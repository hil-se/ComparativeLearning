"issuekey","type","components","storypoint","title","description_text"
"COMPASS-3170","Task","CRUD",5,"Spike Lazy Linked List in Hadron Document","""Spike turning hadron document into a configurable lazy linked list."""
"COMPASS-3192","Task","Export to Language",8,"Add class layer between ANTLR and visitor classes","""Right now there is a lot of repeated code between the python and javascript/shell visitors. Add a class layer in between the ANTLR-generated classes and the language-specific classes so that methods that all visitors have can be written in one place."""
"COMPASS-3190","Task","Export to Language",5,"refactor edge case tests for python","""Right now we have a few tests that are not JSON based, and therefore are only being tested from javascript. Refactor those tests so that we can easily test them from Python as well, and move them into JSON form where possible."""
"COMPASS-3202","Task","Export to Language",5,"Fix auto-argument casting for functions","""Works for javascript, but the python implementation uncovered some odd behavior so go through and verify that the casting mechanism is working correctly. And document it! """
"COMPASS-3224","Task","Language Modes",3,"Add native regex type to python","""Other than optional and named args, this is the last feature required for python as an input language."""
"COMPASS-3227","Task","schema.rs",3,"api: use typed_builder crate to support passin in options","""https://docs.rs/typed-builder/0.1.1/typed_builder/"""
"COMPASS-3226","Task","schema.rs",3,"api: library takes in and outputs a bson document","""on this pass output document should have:   * -name-   * -path-   * -regular type-   * -iterate over nested documents and have the above information-   * -bson_type-   * -values-   * -add arrays at type-"""
"COMPASS-3235","Task","Connectivity|Favorites|Security",3,"Eliminate multiple keychain password requests","""The multiple keychain password prompt has been a long-running unexplained behavior we haven't been able to get to the bottom of. A roll-up of bug reports:    - COMPASS-1767  - COMPASS-3091  - COMPASS-3147  - COMPASS-3215    My hunch after re-reading these tickets is this happens after an auto-update or a manual upgrade. What's most likely is that we simply need to call {{keytar}} methods from the main process via ipc rather than from the renderer as we do today. [See this example on stackoverflow|https://stackoverflow.com/a/43239854].    [From this blog post|https://medium.com/cameron-nokes/how-to-securely-store-sensitive-information-in-electron-with-node-keytar-51af99f1cfc4]:    {quote}  One other important note: I recommend you only call node-keytar from the main process. If you set a password from the main process and then attempt to get it from a renderer process, it’ll prompt a permissions dialog for the user (this is macOS only, Windows doesn’t seem to mind either way). Additionally, I think it’s cleaner and clearer to the user if the access control list has your app name and it’s icon, instead of MyApp Helper and the generic app icon which is what you get when a renderer sets it.  {quote}          More notes from previous tickets rolled up below.    ---    [{{SecKeychainFindGenericPassword}}|https://developer.apple.com/documentation/security/1397301-seckeychainfindgenericpassword?language=objc], which is the method [{{keytar}} uses to read a stored connection password|https://github.com/atom/node-keytar/blob/master/src/keytar_mac.cc#L107]. In the discussion:    {quote}  This function automatically calls the function [{{SecKeychainUnlock}}|https://developer.apple.com/documentation/security/1400341-seckeychainunlock?language=objc] to display the Unlock Keychain dialog box if the keychain is currently locked.  {quote}    A few ideas on what might need to happen:    - Maybe something in the keytar bindings is too specific?   Maybe when we run app-migrations today, macOS needs to re-validate or something?  - Maybe a bulk-read call to fetch all passwords with {{FindPassword}} would guarantee this unlock dialog is shown once and only once in all cases (a single, implicit {{SecKeychainUnlock}} call), but there are some potential security implications to consider.   """
"COMPASS-3256","Task","schema.rs",5,"testing: test to process a json file","""should take in a json file (fanclub.json), convert it to bson, be able to parse it and return the current result.    bson crate should have a deserializer for json implemented (hopefully).    should also track timing."""
"COMPASS-3255","Task","schema.rs",5,"api: add unique and duplicate fields","""each type has a count field. to see if there are duplicates the following checks should be done:   * type.name is _Null_ or _Undefined_, check is type.count > 1   * if there is a type.values, check if the vec is all unique"""
"COMPASS-3254","Task","CRUD",5,"Make Embedded Elements Lazy Loaded","""Linked List in hadron-document is now lazy, but needs to expand further to lazy load embedded arrays and documents."""
"COMPASS-3253","Task","CRUD",5,"Paginate Document Table View Columns 20 at a time","""Paginate columns in the document list table view 20 at a time. Needs update to hadron-document to accept a number to the flush method."""
"COMPASS-3252","Task","CRUD",5,"Paginate Document List Elements 20 at a time","""Paginate the elements in the document in the document list 20 at a time."""
"COMPASS-3263","Task","schema.rs",2,"library: performance metrics","""compare results in rust to node.     there is a way to write tests in rust as benchmarks. and that's what should be done for some of these."""
"COMPASS-3260","Task","Language Modes",5,"Implement syntax for object generator","""Support syntax like equality, math, etc."""
"COMPASS-3270","Task","Compass|Query Bar",5,"Need a way to interrrupt/kill long running queries","""If you run a long running query (this is easy to do if you get a keyname wrong) there is no way to interrupt the query before it times out or completes. The only option is to kill the window."""
"COMPASS-3295","Story","Aggregation pipeline",1,"Full-screen stage editor","""h3. User story  As a Compass user  I want more real estate for my stage editor  So that I can see everything I type into the editor without a lot of scrolling, even when my stage contains a lot of code.    h3. Acceptance Criteria  - When I am working on a stage, I can make the stage editor full-screen  - When the stage editor is full-screen, I can see:      -- The stage selector      -- The code editor      -- A way to reach the documentation/examples for the current stage      -- A way to delete the stage      -- A way to disable the stage      -- A sample of the data entering the stage      -- A sample of the data outputted by the stage      -- A way to access the agg. pipeline settings, in case I need to adjust for instance the timeout if the current stage is too slow  - When I close the full-screen editor, the changes I made are reflected in the “small editor” and the results in the preview are updated  """
"COMPASS-3292","Story","Aggregation pipeline",1,"Export to language discoverability","""h3. User story  As a Compass user  I want a quick and discoverable access to “export to language”  So that I can easily find it and I can take advantage of it to speed up my application development.    h3. Acceptance Criteria  - When I look at the Agg. Pipeline builder, I want to know it is possible to export my pipeline to different languages  """
"COMPASS-3291","Story","Aggregation pipeline",5,"Agg. Pipeline settings","""h3. User story  As a Compass user  I want to set sample size, number of docs in preview and maxTimeMS  So that I have better control over how Compass is executing and displaying my pipeline.    h3. Acceptance Criteria  - There is a place in the UI where I can set sample size, number of docs in preview and maxTimeMS  - By default, these settings are set to the default that is in Compass today  - When I change one of these values, the new configuration is preserved across different Compass sessions    h3. Notes  - Should the setting be per collection, per pipeline, or global? How does that resonate with tabs (COMPASS-3289)?"""
"COMPASS-3328","Task","schema.rs",5,"api: should allow for SchemaParser struct output","""currently output is directly converted to json in _flush_ method. The api should allow for either of the two to be an output, or have a way for user to call `to_json` or `to_bson`, `to_struct` methods (or something of the sort) for easier conversions"""
"COMPASS-3325","Task","schema.rs",3,"library: investigate current use of lifetime","""i *think* the lifetime situation is not as stable and efficient as it's meant to be. Look into (+ask advice) on how to improve this."""
"COMPASS-3324","Task","schema.rs",3,"library: modularize crate into separate components","""right now everything is in one giant file, and that's a bit unsustainable. So:    *lib.rs – public facing api*    *schema_parser.rs – SchemaParser trait*    *field_type.rs – FieldType trait*    and possible have,    *field.rs – Field trait*"""
"COMPASS-3323","Task","schema.rs",3,"api: investigate error handling","""no errors are currently handled or thrown (200 path only!), this should be fixed."""
"COMPASS-3322","Task","schema.rs",5,"library: refactor schema parser to use internal structs","""currently using bson to manipulate data, should be using rust-specific methods."""
"COMPASS-3331","Task","Plugins",3,"Move Metrics To External Package","""Move the metrics internal package to an external package in 10gen on the new plugin template."""
"COMPASS-3356","Task","Language Modes",1,"Fill out the rest of the tests for object generation","""The leftover test files are builders, imports, and non-idiomatic. Should be filled out with object to compare with."""
"COMPASS-3354","Task","Language Modes",5,"Write error state tests for object generation","""Fill out error tests with object generation"""
"COMPASS-3371","Task","schema.rs",3,"library: add assert_eq!(), test::Bencher and test::black_box() tests","""the library is missing a large chuck of tests. to make sure future development is a bit more consistent, should add more tests \o/"""
"COMPASS-3370","Task","schema.rs",5,"library: refactor field_type and fields vectors into a more efficient data structure","""when iterating over the input document we need to be checking whether an existing field already exist, and if it does update its field type. this requires two iterations over the 'fields' and 'field_type' vectors. this should be rewritten to be a more efficient data structure that would not require the double iteration and overwriting of an existing field_type struct."""
"COMPASS-3373","Task","schema.rs",8,"bson: add Decimal128 implementation to bson crate","""bson crate - [https://docs.rs/bson/0.13.0/bson/index.html] - does not currently support Decimal128 implementation. To be able to pattern match on all available bson types, we will have to PR in support for Decimal128."""
"COMPASS-3378","Task","schema.rs",3,"bson: add wasm support for bson-rs crate","""bson-rs crate is currently not wasm compatible as it makes system calls to get machine_id and process_id to make ObjectId bson type. This doesn't work in the browser and should be done as randomly generated numbers (like the node's bson package)"""
"COMPASS-3379","Task","schema.rs",3,"wasm: use regular result type in wasm exported functions","""currently library wraps around the existing methods to export them for wasm as the usual """"Result<T, E>"""" doesn't quite work in wasm. There is an outstanding issue on wasm-bindgen project to improve this experience: https://github.com/rustwasm/wasm-bindgen/issues/1017    this ticket is mostly for monitoring and talking to the rust-wasm team to improve the current implementation"""
"COMPASS-3403","Task","schema.rs",3,"wasm: set up compasss to allow for a dynamic import of npm package with wasm","""to be able to consume the produced npm package with wasm, we need to be able to import it async. this requires for compass to handle an async import.    possible things to look at:   * babel plugins   * webpack plugins: wasm-load, and adding `.wasm` in extensions."""
"COMPASS-3413","Task","schema.rs",5,"wasm: should be able to pass in a cursor from js side","""instead of reading a file and reading it line by line, should be able to take a cursor and :   # at first convert it to json and send to rust   # and (not sure if this is possible) take a node created cursor and pass it to rust for a rust driver to read off data from the cursor"""
"COMPASS-3412","Task","schema.rs",3,"api: should include probability field for every field","""should count the probability of a given field existing over a sample collection set. previously used calculation:    {color:#24292e}field{color}{color:#24292e}.{color}{color:#24292e}probability{color} {color:#d73a49}={color} {color:#24292e}field{color}{color:#24292e}.{color}{color:#24292e}count{color} {color:#d73a49}/{color} {color:#24292e}parent{color}{color:#24292e}.{color}{color:#24292e}count{color}{color:#24292e};{color}"""
"COMPASS-3411","Task","schema.rs",3,"api: should update fields and values in nested documents","""currently only top level keys and values get updated with the parser, so values vectors of things like `_id.oid` don't get updated."""
"COMPASS-3429","Task","schema.rs",2,"api: to_json should strip off the ValueType type","""I _think_ there should be a serde_json tag I can add to remove the current behaviour of value vector:    should really just be:    investigate in serde_json docs"""
"COMPASS-3427","Task","schema.rs",5,"api: nested documents in json should stay nested in SchemaParser struct","""current output:              expected output:  """
"COMPASS-3426","Task","schema.rs",1,"oss: write up docs on working with wasm-pack","""we've been using wasm-pack to bundle a js + wasm package. They are currently in need of some docs to help people get this working in their own environments. This ticket is for putting a few of our use cases together for them."""
"COMPASS-3425","Task","schema.rs",5,"library: implement dealing with array as value types","""should destructure the array and put all the values inside the field_type values vector. Currently no matching or further processing is done for arrray bson type."""
"COMPASS-3424","Task","schema.rs",3,"library: implement fuzz testing for public api","""there is a good library to do some fuzz testing in rust: [https://docs.rs/proptest/0.8.7/proptest/]    idea here: make sure lib doesn't crash.         example on how to do it: https://github.com/datrs/sleep-parser/blob/master/fuzz/fuzz_targets/header-from-vec.rs"""
"COMPASS-3423","Task","schema.rs",1,"api: count fields should start at 1","""count currently starts at zero for all the different fields, but should start at 1.    all structs should have a method to update their respective count fields"""
"COMPASS-3432","New Feature","Explain",2,"Render Visual Explain Plan for Any Explain Output","""As a user I would like to drag the output of an explain plan into the Compass Explain tab and have the visual representation of it shown.    - User can drag a file that the the output of an explain plan onto the explain tab and see the visual representation of it.  - User can paste via CTRL/CMD+V the same output from the clipboard and see the visual representation of it."""
"COMPASS-3440","Task","schema.rs",8,"compass: move schema analyser into its own plugin","""We will not be able to use wasm modules directly inside compass (needs current version of webpack), so will need to have this moved from internal-plugins/ in compass into its own plugin. Work was started here: https://github.com/10gen/compass-schema"""
"COMPASS-3439","Task","schema.rs",3,"library: handle missing fields","""if parent_count - field_count > 0, some fields are missing. Create an Undefined type to add this information:          """
"COMPASS-3438","Task","schema.rs",2,"library: handle null and undefined data values","""if either null or undefined, should remove all the field_type values in the finalizing step. this is currently done in the js land:  """
"COMPASS-3437","Task","schema.rs",3,"api: should deal with a store_values option","""when store_values is set to none, don't store values."""
"COMPASS-3436","Task","schema.rs",5,"api: should deal with a semantic_type option","""SchemaParser::new() should accept an option to handle semantic types. setting this to Some should allow for parsing of an email """"type"""" and a geojson """"type"""" along with the regular bson types.    should look for crates that could do the geojson check for us; email should be a rather straight forward regex."""
"COMPASS-3450","Task","Webpack",8,"Webpackify Compass","""Build Compass using Webpack.  - Create Webpack configurations.  - Remove compile cache.  - Remove style manager.  - Remove module cache.    * Need to break up into multiple stories*"""
"COMPASS-3449","Task","Plugins",8,"Extract Home Plugin","""Extract the home plugin to an external plugin on the new plugin template."""
"COMPASS-3448","Task","Plugins",8,"Extract App Plugin","""Extract the app plugin to an external plugin on the new plugin template."""
"COMPASS-3447","Task","Plugins",8,"Extract Schema Plugin","""Extract the schema plugin to an external plugin on the new plugin template."""
