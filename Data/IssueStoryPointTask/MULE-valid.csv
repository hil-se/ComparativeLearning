"issuekey","type","components","storypoint","title","description_text"
"MULE-11329","Task","Core: (other)",8,"Dynamically load Mule Runtime libraries on Tooling Runtime Client","""MULE-11173 was the spike related to this issue, this task is about doing the implementation for Tooling Runtime client to allow loading Mule Runtime libraries dynamically (provided by clients) in order to avoid including them as part of the classpath."""
"MULE-11327","Bug","Modules: (other)",2,"OAuth2 client module encodes redirect_uri twice in the body","""The oauth client module sends redirect_uri both as a query parameter and in the body as a form encoded parameter.    The body version is url-encoded twice, not conforming with the RFC (which says it's optional, but if present should be equal to the query parameter version).    Recently our oauth provider was fixed to url-decode parameters once instead of twice, because it's the same as doing nothing for parameters without special characters and fails when parameters have special characters. See SEC-277."""
"MULE-11326","Enhancement Request","Test: Testing Framework",1,"Update JUnit to 4.12 and disable timeout when debugging","""When debugging our 60 second timeout rule stops the program as when running tests in CI. This is inconvenient and can be disabled with a rule introduced in JUnit 4.12.    This is unrelated to the transport/connection timeout."""
"MULE-11338","Task","Modules: (other)",1,"Remove event dependency from Authentication interface and implementations","""The event doesn't seem to be used in the Authentication's"""
"MULE-11356","Task","Build: (other)",2,"Have all compatibility artifacts in their own subfolder in the repo","""Have all compatibility artifacts in their own subfolder in the repo"""
"MULE-11347","Task","Core: Expressions",2,"Define expression language selection experience","""We need to decide how the EL will be selected when evaluating expressions."""
"MULE-11344","Task","Core: Event/Message",8,"Make MuleEventContext Serializable","""Make MuleEventContext Serializable"""
"MULE-11360","Bug","sdk",5,"Missing definition parser for parameter @Content of type InputStream","""Got this error:        When deploying an application which uses an @Content parameter of type InputStream.  The code for reproducing the failing test is [here|https://github.com/fbarrios/hello-world-connector-4.x/tree/6991a614e14db32565505778185276b203574806].    Changing the parameter type to Object and then casting as InputStream fixes the error:  https://github.com/fbarrios/hello-world-connector-4.x/commit/d90f29c0214162e706fb2ad79865d639ce443fc1  """
"MULE-11359","Task","Core: Containers",2,"Adapt container to work with new binary heavy package ","""The Container should adapt to read the new binary package.    The definition of such is detailed in this [document|https://docs.google.com/a/mulesoft.com/document/d/125WiY0yDxiCzjjY69ho8V_srq8n0pfA3J_SJlBkHBSI/edit?usp=sharing] in the section Phase 1.    This is a general description of how it looks like:        If you whish to generate the package you can already use the following maven plugin       """
"MULE-11358","Bug","Core: Routing / Filters",0,"Path Element is not correctly created for elements after a MessageFilter","""If there is any component after a MessageFilter, the path is not correctly created. The child number assigned is set to double of the difference between the component and the MessageFilter. For example:     The path for """"flow"""" should be (...)/0/1, and it actually is (...)/1/3."""
"MULE-11370","Enhancement Request","Modules: HTTP",2,"Request builder parameters need to be ordered in UI","""Order should be:  * Body  * Headers  * URI Parameters (text should be corrected from 'Uri Params"""")  * Query Parameters (text should be corrected from 'Query Params"""")  * Media Type"""
"MULE-11367","Task","Core: (other)",1,"Tooling API avoid M4 dependencies to mule-runtime artifacts from dataSense","""DataSense 4.0-SNAPSHOT has declared M4 dependencies temporarily.  This should be changed but meanwhile we are going to override these dependencies on Tooling Client."""
"MULE-11364","Task","Core: API",2,"Replace TypedValue interface on mule-api with DefaultTypedValue from mule-core","""Mule-api contains TypedValue interface, which is implemented on DefaultTypeValue on the core.  As it represents a value, it makes more sense to have TypedValue as a class, not an interface. """
"MULE-11362","Bug","Core: (other)",1,"ArtifactClassLoaderRunner - Should avoid including services/plugins classified in Container CL","""MULE-11182 added support for classifiers in all the filters and this change has impacted the logic for Container URLs classifications, the ID used to filter services and plugins from direct dependencies was not including the classifier (now that it is a must in poms to include the classifier the logic could always use the full artifact ID).  In addition to that, Aether will include transitive dependencies no matter if the patternExclusionFilter has a no match for a direct dependency. This is the expected behaviour for application classification due to we still want transitive (case of mule-test-functional->mule-core->x) but no in the container classification case."""
"MULE-11361","Bug","Core: (other)",1,"Tooling API fails when trying to create the container classloader from Studio","""There is an issue in Equinox that when a resource is requested from a Bundle it returns twice the same URL. So, when the container classloader for Mule is created (without the MULE-11329 support yet) the following error is thrown:  """
"MULE-11378","Enhancement Request","Extensions API",8,"Allow SDK operations and sources to return List<Message>","""Allow operations to return signatures of type List<Result<InputStream, FileAttributes>> which would output a list of Messages which payload is of type InputStream and attributes of type FileAttributes.    At the same time allow sources to extend Source<List<Result<InputStream, FileAttributes>>, Attributes> which would be a source which returns a similar collection as the operation above."""
"MULE-11377","Task","Core: Policies",2,"Change API for applying policies to allow policies templates","""Since we will continue to support mustache templates in the policies zip files and the API gateway agent will be responsible for resolving those templates, we need to change our API so the agent can have a chance to process the template if needed.    The idea is to have a single API to cover both use cases: template or no template. The idea so far is that we just ask for the file (as InputStream or whatever) of the resolved template. If there's nothing to do then it will retrieve the policy config file as it is.    Processing the template will not resolve the parametrization of the policy that is not related to mustache. That will be done by mule."""
"MULE-11372","Task","Build: Distributions",1,"Remove JAAS module","""JAAS module will be removed from the code/distro to avoid exposing it on the API.  Missing functionality will be replaced at some point with a new security extension. """
"MULE-11383","Task","Build: Maven",8,"Packaging: plugins, services, policies, and so on, must be packaged as JAR files","""All modules that contribute to the runtime (plugins, services, policies, etc.) must be packaged as JAR files rather than ZIP.    Why we are picking JAR over ZIP files:  * maven knows how to contribute JARs to the classpath without any custom plugin. It can be modified to support ZIP (contributing to the classpath) with a custom maven plugin, but that also implies implementing several plugins for IDEs such as Eclipse, IntelliJ, etc.  * transitive dependencies will work out of the box (same rule as before, it can be done but with more custom code)  * it plugs easier when a mule app depends on a plugin (or a plugin depends on a plugin)  """
"MULE-11380","Bug","Extensions",1,"DynamicConfigurations not disposed when start() fails","""When calling DynamicConfigurationProvider#registerConfiguration, the configuration is both initialized and started, but if start fails it is not being disposed, causing all resources obatained in initialize to be leaked."""
"MULE-11412","Bug","Extensions",5,"MuleContext, services and configs not injected into Pojos nested in a config","""Take for instance OAuth grant types. Having a MuleContext field with @Inject, the field is null when iniitalize is called. This also happens with @UseConfig    Current workaround is to propagate the MuleContext from the HttpRequesterProvider (https://github.com/mulesoft/mule/pull/3940/files#diff-bf73dd2c2b906c68a00d1d8ec0c1d7d3R141)"""
"MULE-11411","Bug","Core: Streaming",5,"Too much contention in TraversableStream when using file store buffer","""When using file store buffer, there's way too much contention on the file store. Add a second level of in memory buffering for each cursor."""
"MULE-11409","Task","Build: Libraries / Dependencies",1,"mule-module-proxy dependencies must be updated","""As part of MULE-11357, all mule plugins will install/deploy a single artifact.    Right now mule-module-proxy depends on mule-module-http-ext-4.0-SNAPSHOT.jar and mule-module-sockets-4.0-SNAPSHOT.jar.    Once MULE-11357 is done, the artifact that the plugins will generate are mule-module-http-ext-4.0-SNAPSHOT-mule-plugin.jar and mule-module-sockets-4.0-SNAPSHOT-mule-plugin.jar respectively.     For the time being, both artifacts will publish both jars, but it's just a workaround to not breaking GW build."""
"MULE-11405","Bug","Extensions",3,"Extensions Client not disposing processor after executing","""DefaultExtensionsClient#createProcessor initializes and starts a processor, but that is never disposed.    Add a scheduler to a heisenberg operation to have coverage for this scenario/"""
"MULE-11404","Enhancement Request","Modules: WS Consumer",8,"Apply OperationUX to the WSC","""Apply OPERATION UX to the wsc"""
"MULE-11401","Task","Transport: TCP / UDP / SSL / Multicast",2,"Migrate Sockets transport parsers to Mule 4 mechanism ","""Migrate Sockets transport parsers to Mule 4 mechanism"""
"MULE-11400","Task","Transport: HTTP(S) / Jetty",8,"Migrate HTTP transport parsers to Mule 4 mechanism ","""Migrate HTTP transport parsers to Mule 4 mechanism"""
"MULE-11397","Task","Modules: XA Transactions",8,"Migrate XML module parsers to Mule 4 mechanism ","""Migrate JBoss TX module parsers to Mule 4 mechanism"""
"MULE-11396","Task","Modules: (other)",2,"Migrate TLS module parsers to Mule 4 mechanism ","""Migrate TLS module parsers to Mule 4 mechanism """
"MULE-11392","Task","Modules: XA Transactions",2,"Migrate Schedulers module parsers to Mule 4 mechanism","""Migrate JBoss TX module parsers to Mule 4 mechanism"""
"MULE-11390","Task","Modules: XA Transactions",8,"Migrate JSON module parsers to Mule 4 mechanism","""Migrate JBoss TX module parsers to Mule 4 mechanism"""
"MULE-11388","Task","Modules: XA Transactions",2,"Migrate JBoss TX module parsers to Mule 4 mechanism","""Migrate JBoss TX module parsers to Mule 4 mechanism"""
"MULE-11386","Enhancement Request","Core: Concurrency / Threading",1,"When an exception is thrown by a scheduled task, it should be logged","""When an exception is thrown by a scheduled task, it should be logged"""
"MULE-11420","Bug","sdk",5,"TypedValue and ParameterResolver can't be used inside a Pojo annotated with @Nullsafe and Content","""*TypedValue and ParameterResolver can't be used inside a Pojo annotated with @Nullsafe*    * Nullsafe annotated pojos uses a different mechanism to create {{ValueResolvers}} which doesn't consider {{TypedValue}} and {{ParameterResolver}} parameters.  * Not considering this cases, this mechanism creates value resolvers that evaluate expressions to create TypedValue type."""
"MULE-11418","Enhancement Request","jms-module|sdk",13,"Improve JMS Extension acknowledgement mechanism","""*Improve JMS Extension acknowledgment mechanism*    *Improvements*  * In the *JMSListener* in the {{@OnError}} method execute a {{session.recover()}} to communicate to the JMS Broker that an error occurred and the message should be redelivered.  * When the user configures a {{AUTO}} acknowledgment mode, the listener should execute an ACK in the {{@OnSuccess}} method.  ** Take care that the JMS specification says when a {{AUTO}} acknowledgment mode is selected, the JMS Client will produce an ACK if the execution of the {{listen()}} is executed correctly, but as the listener once receive the message, dispatch this one asynchronously to the flow, the {{listen()}} method always is performed successfully, producing automatically an ACK not depending on the result of the flow.  ** To work around what is explained above, when the user select an {{AUTO ACK}}, the extension communicates to the client that a {{CLIENT_ACK}} has been chosen, so the client doesn't produce the ACK automatically, then in the {{@OnSuccess}} check the ACK Mode, and if is an """"Extension"""" Auto ACK, manually execute an ACK.  * Nowadays is impossible to have a *JMS Listener* with *MANUAL ACK Mode*, and later doing the ACK Manually because the *listener* and the *ACK Operation* can't share the same connection, and as consequence the same session. This will make the *ACK* operation always fails because the new connection won't find a session to make the message an ACK.  Also doing a *consume* and a *ack* doesn't have a deterministic result, due that in both operations a different connection could be configured.  ** As a possible solution implement something like {{HttpRequesterConnectionManager}} for HTTP Connector https://github.com/mulesoft/mule/pull/3923/files. That is having a shared state between all the configurations where the messages/sessions are referenced to be able to do an ACK without depending of the injected connection in the ACK Operation.  * Change the *ackId* of the JMSAttributes from a *Optional<String>* to a *String*, due that this implies that the Mule user will need to unwrap the optional value at runtime.  * Review the implications of a {{transacted}} ACK Mode.  * With client ack mode, the messages are generated from a same session, the JMS spec defines that the ACK is done over a session, not over a particular message, so doing a ACK over a message will not only produce the ACK over this one althought the messages of the entire session doesn't matter if these had been sucessfully processed or are still in flight. The same can happen doing the recover the session, this method can affect on more that one message."""
"MULE-11416","Enhancement Request","Modules: WS Consumer",0,"WS Consumer Module: Should use Mule TLS implementation to read the Remote WSDL instead of using the Java classes directly","""The WS Consumer doesn't use the TLS configuration of the HTTP requester because it uses the Java Classes directly instead of the Mule Implementation.    This was fixed by MULE-11298, we only add tests here."""
"MULE-11414","Task","jms-module|sdk",13,"Review JMS Extension Migration","""*Review JMS Extension Migration*  * Review and find gaps in the migration of the JMS Transport to JMS Extension"""
"MULE-11413","Task","Test: Testing Framework",2,"Fix DW dependency for FunctionalTestCase","""Since DW is a plugin and FunctionalTestCase has no support for those, the EL fails to load and all tests, including ExtensionsFunctionalTestCase, cannot use DW as EL."""
"MULE-11426","Task","Core: (other)",1,"Loading ExtensionModels in Studio takes too long","""We found that either the Extension support from Mule Runtime or the class loading stuff takes a too long when loading an extension model from Tooling and Tooling is running under an Eclipse Plugin classpath.  It could be related with the scan classpath that Extension support does in order to discover the class annotated with the @Extension. This issue is about to resolve this performance issue and make it work for Studio/Eclipse OSGi environments."""
"MULE-11443","Task","Core: DSL processing",2,"Create DSL-API converter for string to enums","""Add support for converting string to enums."""
"MULE-11442","Bug","Core: (other)",3,"Tooling Client cant resolve transitive mule plugin dependencies from zip files when loading extension.","""When loading an extension model from a zip file we need to provide an ArtifactResolver implementation that resolves a given Artifact to a File, if we provide the dependency zip file it won't load the extension properly."""
"MULE-11441","Task","Core: Expressions",1,"Adapt to DW new syntax","""Some syntax changes have been introduced to DW, so we need to adapt our tests to them."""
"MULE-11440","Task","sdk",8,"Provide a way to set the SecurityContext in SDK","""In order to eliminate all MuleEvent uses from HTTP, there must be a way to replace the HttpBasicAuthenticationFilter. Though a custom version could be built to replicate it's superclass, it's impossible to set the required SecurityContext without accessing the Event."""
"MULE-11439","Bug","sdk",3,"Different values in a connection don't trigger a new connect() for cached providers","""When trying different scenarios for dynamic configs in the HTTP request part I stumbled upon the fact that performing 2 requests varying a dynamic host (which is a connection param) resulted in the second being the same as the first. In org.mule.test.module.http.functional.requester.HttpRequestDynamicConfigTestCase#requestsGoThroughClient1 the following requests demonstrate the issue:    Notice that the first request goes to localhost and without any more changes to the config parameters the next goes to 1.1.1.1 which should fail but instead is successful because it ends up reusing the first connection.  Though a combination of config and connection params should be taken into account to define whether to reuse the cached connection, it seems the connection ones are ignored."""
"MULE-11435","Enhancement Request","sdk",13,"Support application declaration as interface between tooling and componentModel","""Support application declaration as interface between tooling and componentModel"""
"MULE-11433","Bug","Extensions API",13,"Useful error never informed by connectivity testing","""When performing connectivity testing, the extensions almost never inform a useful connection code. UNKNOWN is constantly resolved"""
"MULE-11432","Task","Extensions API",3,"Disallow operations to receive the current Event and Message","""This should also include removing the concept of Function<Event, T>.    Coordinate with [~afelisatti] before executing this task.    Also add a validation that no operation tries to receive the event or the message  """
"MULE-11431","Enhancement Request","Modules: Email",2,"Decouple email connector from MuleMessage","""PagingProviderEmailDelegate manually generates a list of Messages. It shouldn't."""
"MULE-11429","Enhancement Request","Extensions API",13,"Auto Generate extensions documentation","""Auto generate documentation when the extension is built. Mimic what devkit currently has"""
"MULE-11460","Task","Core: Concurrency / Threading",0,"Make CPU-intensive pool a ForkJoinPool","""ForkJoinPool seems to be a great fit for the computation pool.    When it is so, the mechanism it has to keep the parallelism may be put to allow a wait policy when scheduling from cpuintensive into a busy cpuLight pool"""
"MULE-11455","Bug","Transport: JMS",0,"JMS connector doesn't allow subclasses to change send() parameters","""Some connectors like WMQ need to change send() parameters based on endpoint configuration attributes or outbound properties."""
"MULE-11451","Task","Core: (other)",1,"Remove DynamicPipeline","""DynamicPipeline and its implementations should be removed."""
"MULE-11450","Task","Test: Testing Framework",8,"Migrate performance tests to JMH","""Contiperf framework is not compatible with JUnit 4.12+, so all tests need to be migrated to JMH which is also a more solid framework."""
"MULE-11472","Task","Core: (other)",8,"Implement support for interception message processor from the Debugger","""Debugger should use the interception support added in MULE-11346 with a different API due to the debugger should be able to modify session/flow variables along with the message too."""
"MULE-11470","Task","Modules: HTTP",2,"Make HTTP messages body a TypedValue","""The HTTP message body is an Object right now but we should have it be a TypedValue<Object> so that the MediaType is no longer needed."""
"MULE-11461","Task","Core: (other)",8,"Review and add message processing trace logging where needed","""Review and add logging where needed"""
"MULE-11491","Bug","Core: Exception Handling",2,"Rename block to try","""We should rename """"block"""" to """"try"""" as it's the most familiar term in our user base.  """
"MULE-11489","Task","Core: DSL processing",2,"Review name attribute on child elements","""Define if the rule of not having name attributes in child element must continue to exists or it should be removed. And as part of this task remove the rule if necessary.    Seems that the gain of having that rule is not much and allowing to use it in the dsl of child elements may simplify the DSL."""
"MULE-11487","Task","Core: (other)",2,"Review if org.mule.runtime.core.management.stats.ProcessingTime is required","""Mule 3.x uses org.mule.runtime.core.management.stats.ProcessingTime and org.mule.runtime.core.management.stats.ProcessingTimeWatcher to calculate the time used to process a given event.   A ProcessingTime is attached to each event when the event is created. ProcessingTimeWatcher uses weakReferences to those ProcessingTime instances to detect when a given event has been processed.  This approach has issues on mule 3, but it won't work on mule 4 as the event is immutable, to every change in the event requires to create a new one, so the ProcessingTime will be released every time the event is changed.  Mule 4 has EventContext#success and EventContext#onError methods that could be used to replace the ProcessingTime management"""
"MULE-11484","Bug","sdk",5,"ParameterGroup's order are not populated automatically is a value was not configured manually","""*ParameterGroup's order are not populated automatically is a value was not configured*    * Following the work of https://www.mulesoft.org/jira/browse/MULE-11247 , also the {{ParameterGroup}} should be populated with the order information.  * If the order is configured manually (Using the {{@Placement}} annotation), the value is populated correctly in the model.  * The solution should contemple that the *General* parameter group should be always the first group."""
"MULE-11498","Bug","Transport: FTP / SFTP",0,"SFTP connector uses ""."" for listing and some implementations don't support it","""The current implementation of SFTP uses """"."""" to denote a directory for listing files even after other paths (like """"/a/path/.""""). The RFC says it's optional to support it (""""should"""" keyword), and removing it works for all servers tested."""
"MULE-11496","Enhancement Request","Core: API|Core: Components",8,"Create an ExtensionModel for core components of Mule","""Currently, mule's core components like Logger or SetPayload doesn't have an extension-model that represents them.     In order to unify the handling between SDK extensions and core components, both for runtime and tooling, we need to provide the extension models of each component accordingly."""
"MULE-11495","Task","sdk",8,"Change ConnectionExceptionCode to ErrorType","""*Change ConnectionExceptionCode to ErrorType*    * Nowadays the {{ConnectionValidationResult}} exposes a {{ConnectionExceptionCode}} to communicate the type of error happened when creating/validating an exception.  * This {{ConnectionExceptionCode}} is an *Enum* which provides a set of different codes, but these codes get short when describing some specific situations, and the error ends being {{UNKOWN}} or another code that doesn't make too much sense.  * To improve this, change the {{ConnectionExceptionCode}} to an {{ErrorType}}"""
"MULE-11494","Task","Core: (other)",1,"Add a way to validate transitive dependencies for Tooling Runtime Client","""As transitive dependencies will change and we have to enforce API and implementation in different artifacts we have to have a way to keep control of these dependency graph."""
"MULE-11493","Task","Core: (other)",2,"Allow to release versions of Tooling Runtime Client implementation for a already released Mule version","""Current approach implemented maps Mule version with Tooling Runtime Client implementation and Agent Rest Client. The scenario where a bug was found in the implementation of Tooling Runtime Client should be handled by releasing a new version of the Client without affecting clients of the API as they always request a Tooling Runtime Client for a Mule version.    Some sort of override properties file could be added in order to map the last client version that works for a Mule version."""
"MULE-11505","Enhancement Request","Core: Concurrency / Threading",2,"Implement cached IO scheduler that grows that uses async hand-off with queue.","""- Should use a bounded queue for hand-off  - Should not have max size.  - Should grow on demand  - -Should start rejecting work when resources start getting tight.- -> MULE-13936"""
"MULE-11503","Task","Modules: HTTP",1,"Disable scheduling of incoming requests in HTTP connector","""Disable scheduling of incoming requests in HTTP connector"""
"MULE-11499","Bug","Core: Deployment",0,"MavenBundleDescriptorLoader forces zip type even for jar dependencies","""Because all mule plugins that are loaded with the org.mule.runtime.module.deployment.impl.internal.plugin.MavenBundleDescriptorLoader are forcing the type to zip, it is impossible to resolve transitive dependencies to other mule plugins, when trying to load the extension model.  The type should be jar, or the code should check that if the packaging is mule-extension, the type is jar and not zip."""
"MULE-11516","Task","Core: Streaming",0,"Define optimum bufferSize for cursor streams","""We need to do performance test/analysis to define the optimum size of the cursor stream's buffer"""
"MULE-11513","Task","sdk",3,"MetadataKeyIdModelProperty shouldn't be public","""The MetadatKeyIdModelProperty states the type and parameter name of the parameter containing the MetadataKeyId annotation. This is useful for the runtime, but tooling consumer can't do much with this info, and should always rely on the MetadataKeyPartModelProperty.    Problems arise regarding the keyId model property in the context of multi level datasense, since the """"parameterName"""" in the mp actually references the name of the containing parameter group. It references the argument and not the parameter in the model (which is what we need in the runtime, but makes no sense for the external consumer)"""
"MULE-11512","Task","sdk",5,"JMS TopicBridgeTestCase: replace consumer with listener to avoid flakyness","""JSM TopicBridgeTestCase: replace consumer with listener to avoid flakyness"""
"MULE-11511","Task","sdk",1,"Ignore flaky JMS topic bridge test","""Ignore flaky JMS topic bridge test"""
"MULE-11507","Task","Core: Expressions",2,"Improve ""parse"" behaviour for DW","""With MEL, component like the logger could define a """"message"""" attribute that would then be """"parsed"""" which allowed String and expressions to be composed together (one could write message=""""My message"""" or message=""""My #['message']"""" which would result in the same output). Since we've decided to deprecate the """"parse"""" method and only allow straight up String in DW it is quite annoying to have to put a String (in the logger example, one has to write message=""""'My message'""""). It would be ideal to find a way to avoid that """"double"""" String thing."""
"MULE-11506","Bug","sdk",8,"ModuleExceptionHandler should consider error type hierarchy","""ErrorTypes have the notion of hierarchy but that however is not contemplated by the ModuleExceptionHandler when an error is thrown. The operation's ErrorTypeProvider is used to match exactly the thrown error and so one must defined each and everyone regardless of whether or not they belong to a hierarchy.   In my case, I had RESPONSE_VALDIATION error type and several """"children"""" like BAD_REQUEST, but if only RESPONSE_VALIDATION was defined in the provider throwing BAD_REQUEST would fail. """
"MULE-11541","Enhancement Request","Modules: HTTP",1,"Move HttpConstants and HttpHeaders to http-service-api","""Move it to the service api so it may be accessed by users of the http service"""
"MULE-11540","Enhancement Request","Core: Expressions",1,"Have an ExpressionManager interface in API","""In order to inject the ExpressionManager into services and other places, it has to be declared in mule-api."""
"MULE-11537","Enhancement Request","sdk",5,"DslElementModel: Add default values and expose the value in the element","""DslElementModel: Add default values and expose the value in the element"""
"MULE-11534","Bug","Core: (other)",0,"XmlMetaDataFieldFactory returns empty field list for element with complexType/any","""For an element definition in a schema such as:        metaDataFields is empty after calling XmlMetaDataFieldFactory#loadFields"""
"MULE-11533","Enhancement Request","jms-module",5,"JMS: Add support for TypedValues","""JMS: Add support for TypedValues"""
"MULE-11530","Bug","sdk",1,"JMS: Fails to set UserMessageProperty when using TypedValues","""JMS: Fails to set UserMessageProperty when using TypedValues        Excepton occurs when runing `JmsAbstractQueueBridge`"""
"MULE-11529","Task","Core: (other)",8,"Define interception API ","""The API for interception should be added to mule-api and it should allow to do before/after and around interceptions."""
"MULE-11527","Task","Core: Components",8,"Parameters should be resolved only once if before doesn't make any changes while intercepting the processor ","""Current approach for interception needs to resolve parameters before calling the interceptor as this is input while doing interception to make decision on how interceptor would handle a before operation either if the processor is skipped.  If the interceptor doesn't make any changes to the variables/message the parameters would be resolved once again when processor is executed."""
"MULE-11525","Task","Core: Components|Core: Transports",2,"Support compatibility fields from the event on interception","""Some interceptions may want to change session variables.    We need to define how to use the privileged compatibility api for this.  """
"MULE-11524","Task","Core: Components",2,"Automatically @Inject fields in the handler factories","""This should happen during registration?"""
"MULE-11521","Task","Core: Components",8,"Define interception handlers registration mechanism","""Handler Factories may be registered at the context (for all the runtime) or for individual applications.    The order of the handlers in the chain must be predictable too."""
"MULE-11519","Task","Core: (other)",8,"Define mechanism to patch the runtime and apps","""Define mechanism to patch the runtime and apps"""
"MULE-11551","Task","Core: Deployment",8,"Define mechanism to inform shared libraries dependencies","""We need to define how we are going to identify """"shared"""" libraries provided by the application or domain."""
"MULE-11546","Bug","Extensions API",5,"Pojo with Map field DSLSyntax element is not generated correctly","""When consuming the DSL for a pojo with the following structure, the generated information is not correct.      The generated DSL has a properties element, with an attribute name of key, and no information about having a child element with name property."""
"MULE-11545","Enhancement Request","Transport: JMS",0,"Add powermock version to global pom","""As powermock is used on both CE and EE, we'll add it to dependency management to avoid possible differences in version used."""
"MULE-11544","Bug","Extensions API",1,"java.util.Map is listed in the types of an ExtensionModel","""An Object with typeId java.util.Map is in the listo of types provided by an extension when it shouldn't    """
"MULE-11543","Enhancement Request","sdk",8,"Add SSL as an ErrorType provided by Mule","""*Add SSL as an ErrorType provided by Mule*    * Several connectors uses SSL for their connections, and in all these cases SSL Errors can be thrown, add the capability in Mule and in the SDK to provider an {{ErrorType}} associated with SSL Exceptions."""
"MULE-11542","Task","Core: (other)",0,"Tooling API should have only one ArtifactResolver interface","""It would be better to only have one interface to be implemented by customers when using Tooling API for resolving external dependencies."""
"MULE-11556","Bug","Core: Exception Handling|sdk",1,"Mule exceptions thrown from an extension end up as UNKNOWN","""Since upon an exception we try mapping it to an error according to the failing processor and sdk extensions define one for each component, any mule exceptions thrown from an operation (e.g. a transformation error when evaluating the operations parameters) will end up mapped using the operations mappings. Under most circumstances this results in an UNKNOWN error from the extension namespace."""
"MULE-11558","Task","Build: Distributions",8,"Remove XML module","""XML module will be replaced at some point with a XML extension.   Module will be removed from the code/distro to avoid exposing it on the API"""
"MULE-11570","Bug","Modules: HTTP",1,"Make host and port required for HTTP request","""Host and port should be required on HTTP request to align it with how other connectors work. Users can override them still at the request level. """
"MULE-11568","Task","Core: DSL processing",8,"Implement a way to determine the ComponentType of a component","""Also review other implementations of ComponentIdentifier#getComponentType()    Also, review SCOPE vs ROUTER in CompoenntType"""
"MULE-11566","Enhancement Request","Core: API",2,"Rename AnnotatedObject to Component","""Rename AnnotatedObject to Component(?)"""
"MULE-11565","Bug","sdk",8,"Fix ElementDeclaration handling of open objectTypes","""Fix ElementDeclaration handling of open objectTypes so we can represent unknown keys in objectType"""
"MULE-11563","Task","Core: (other)",0,"Tooling API should not depend on xml APIs","""Tooling API has a few third-party dependencies, the ones related to xml should not be included:    These libraries have issues when running Tooling API from Studio/OSGi"""
"MULE-11588","Enhancement Request","sdk",13,"Enable bidirectional XML generation/parsing","""Since Mozart uses the DSL Resolver along with the XML Generation Service to write XMLs, we need a new service to be able to parse a given mule XML into the same object structure."""
"MULE-11587","Bug","Tools",1,"poolingProfile being created without prefix by XMLGenerationService","""When using the XMLGenerationService to convert a db config with a my-sql-connection connectionProvider the poolingProfile parameter is being created without prefix.    {code:title=database config}  <db:config name=""""database_config"""">    <db:my-sql-connection database=""""patients"""" host=""""myDatabase.org"""" password=""""organization_owner"""" port=""""5432"""" user=""""myuser"""">      <pooling-profile acquireIncrement=""""1"""" maxPoolSize=""""5"""" maxWait=""""0"""" maxWaitUnit=""""SECONDS"""" minPoolSize=""""0"""" preparedStatementCacheSize=""""5""""/>    </db:my-sql-connection>  </db:config>  {code}"""
"MULE-11584","Enhancement Request","sdk",13,"Forbid the use of Content in POJOs fields that are not groups","""Forbid the use of Content in POJOs fields that are not groups"""
"MULE-11582","Enhancement Request","sdk",5,"SDK should provide the working directory property","""When initialising the extension, we would like to know the working directory. Nowadays this information can be retrieved by searching it in the Registry."""
"MULE-11575","Task","Core: Transactions|Core: Transports",8,"Migrate use of blocking API by transports to use non-blocking API that supports new interceptors. Part 1.","""This would allow the transaction support to use the reactor api, effectively deprecating and possibly removing the process method.    The outcome of this spike would be a determination of whether its more convenient to do this migration (MULE-11023) or to add an interception mechanism for the blocking Processor API."""
"MULE-11574","Bug","Build: Integration Tests",8,"Integration tests fail to execute because a classloading problem with extensions","""When running the integration tests from maven in isolation it fails with: Caused by: java.lang.ClassNotFoundException: org.mule.extension.file.common.api.exceptions.FileError    While if the whole project is compile with maven, they work.    The complete stack trace is:    initializationError(org.mule.test.xml.functional.BeanPropertyExtractorTestCase)  Time elapsed: 0 sec  <<< ERROR!  java.lang.TypeNotPresentException: Type org.mule.extension.file.common.api.exceptions.FileError not present   at sun.reflect.annotation.TypeNotPresentExceptionProxy.generateException(TypeNotPresentExceptionProxy.java:46)   at sun.reflect.annotation.AnnotationInvocationHandler.invoke(AnnotationInvocationHandler.java:84)   at com.sun.proxy.$Proxy44.value(Unknown Source)   at org.mule.runtime.module.extension.internal.loader.enricher.ErrorsDeclarationEnricher.lambda$enrich$0(ErrorsDeclarationEnricher.java:72)   at java.util.Optional.ifPresent(Optional.java:159)   at org.mule.runtime.module.extension.internal.loader.enricher.ErrorsDeclarationEnricher.enrich(ErrorsDeclarationEnricher.java:69)   at org.mule.runtime.extension.internal.loader.ExtensionModelFactory.lambda$enrichModel$1(ExtensionModelFactory.java:191)   at java.lang.Iterable.forEach(Iterable.java:75)   at org.mule.runtime.extension.internal.loader.ExtensionModelFactory.enrichModel(ExtensionModelFactory.java:191)   at org.mule.runtime.extension.internal.loader.ExtensionModelFactory.create(ExtensionModelFactory.java:142)   at org.mule.runtime.extension.api.loader.ExtensionModelLoader.loadExtensionModel(ExtensionModelLoader.java:68)   at org.mule.test.runner.infrastructure.ExtensionsTestInfrastructureDiscoverer.discoverExtension(ExtensionsTestInfrastructureDiscoverer.java:92)   at org.mule.test.runner.api.ExtensionPluginMetadataGenerator.getExtensionModel(ExtensionPluginMetadataGenerator.java:162)   at org.mule.test.runner.api.ExtensionPluginMetadataGenerator.generateExtensionManifest(ExtensionPluginMetadataGenerator.java:177)   at org.mule.test.runner.api.AetherClassPathClassifier.generateExtensionMetadata(AetherClassPathClassifier.java:640)   at org.mule.test.runner.api.AetherClassPathClassifier.buildPluginUrlClassifications(AetherClassPathClassifier.java:426)   at org.mule.test.runner.api.AetherClassPathClassifier.classify(AetherClassPathClassifier.java:149)   at org.mule.test.runner.api.ArtifactIsolatedClassLoaderBuilder.build(ArtifactIsolatedClassLoaderBuilder.java:290)   at org.mule.test.runner.ArtifactClassLoaderRunner.createClassLoaderTestRunner(ArtifactClassLoaderRunner.java:223)   at org.mule.test.runner.ArtifactClassLoaderRunner.<init>(ArtifactClassLoaderRunner.java:131)   at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)   at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)   at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)   at java.lang.reflect.Constructor.newInstance(Constructor.java:423)   at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:107)   at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)   at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)   at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)   at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)   at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)   at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:364)   at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:274)   at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)   at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:161)   at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)   at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)   at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)  Caused by: java.lang.ClassNotFoundException: org.mule.extension.file.common.api.exceptions.FileError   at java.net.URLClassLoader.findClass(URLClassLoader.java:381)   at java.lang.ClassLoader.loadClass(ClassLoader.java:424)   at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)   at java.lang.ClassLoader.loadClass(ClassLoader.java:357)   at java.lang.Class.forName0(Native Method)   at java.lang.Class.forName(Class.java:348)   at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114)   at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125)   at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)   at sun.reflect.annotation.AnnotationParser.parseSig(AnnotationParser.java:439)   at sun.reflect.annotation.AnnotationParser.parseClassValue(AnnotationParser.java:420)   at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:349)   at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286)   at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120)   at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72)   at java.lang.Class.createAnnotationData(Class.java:3521)   at java.lang.Class.annotationData(Class.java:3510)   at java.lang.Class.getAnnotation(Class.java:3415)   at org.mule.runtime.module.extension.internal.loader.java.MuleExtensionAnnotationParser.getExtension(MuleExtensionAnnotationParser.java:61)   at org.mule.runtime.module.extension.internal.loader.java.JavaModelLoaderDelegate.declare(JavaModelLoaderDelegate.java:152)   at org.mule.runtime.module.extension.internal.loader.java.JavaExtensionModelLoader.declareExtension(JavaExtensionModelLoader.java:109)   at org.mule.runtime.extension.api.loader.ExtensionModelLoader.loadExtensionModel(ExtensionModelLoader.java:67)   ... 26 more"""
"MULE-11602","Task","Core: Classloading",0,"Export org.yaml.snakeyaml.introspector package from spring-config module ","""The package {{org.yaml.snakeyaml.introspector}} should be exported too as mule-module-spring-config is already exporting a sub-set of {{yaml}} packages and class {{org.yaml.snakeyaml.introspector.Property}} should be visible too. If not a class not found exception is thrown when a other artifacts try to use {{yaml}}."""
"MULE-11599","Enhancement Request","Extensions API",13,"Support for defining DW functions","""A way of registering DW functions to be evaluated in an extension should be provided.    See `org.mule.runtime.api.el.ExpressionFunction`"""
"MULE-11598","Bug","Modules: HTTP",2,"HTTP Listener error responses don't include content-length nor last chunk","""When a 400 or 500 error code is returned by the HTTP listener, the response if malformed. It should contain Content-Length or add a last chunk (currently it says """"Transfer-Encoding: chunked"""" but omits the last one)."""
"MULE-11596","Task","Extensions API",8,"Documentation Generator: parse HTML snippets to Asciidoc elements","""When getting a description from the extension model that contains HTML snippes like bold or italic we should convert those snippets to asciidoc so they can reflect in the generated documentation.    Snippets to parse:  * bold  * italic  * li  * pre  * ul  * ol  * code  * {@link SomeType}  * """
"MULE-11594","Task","Extensions API",8,"Move asciidoc generator from the documentation mojo to tooling-client","""Our plugins documentation it's based on an asciidoc file that is generated from an ExtensionModel, that code lives in the mule-extensions-maven-plugin and it's used to generate the final html documentation page. This should be extracted to a new module in the tooling-client that it's only in charge of generating the asciidoc from a tooling extension model so exchange can use this and generate the asciidoc using the tooling-client."""
"MULE-11612","Bug","sdk",8,"ImplicitConnectionProviderValueResolver doesn't communicate the dynamism correctly","""*ImplicitConnectionProviderValueResolver doesn't communicate the dynamism correctly*    This value resolver has the following override     With a hard coded *false* value, refactor this value resolver to communicate correctly the dynamism depending in the dynamism of the generated result set."""
"MULE-11611","Bug","sdk",3,"NullSafeValueResolverWrapper doesn't communicate the dynamism correctly","""*NullSafeValueResolverWrapper doesn't communicate the dynamism correctly*         Only checks the dynamism from the delegate and not from the fallback, due that fallback can have dynamic default values."""
"MULE-11610","Enhancement Request","sdk",8,"Implicit resolvers doesn't use the same resolving mechanism that for a defined element","""*Implicit resolvers doesn't use the same resolving mechanism that a defined element*.    We should change completely how we handle implicit dynamic connection providers, since current approach is not ideal.  Currently, we evaluate the CP using only the first event, and then always return that resolved instance. This is not ok for dynamic CP, since we need new events to also be used for evaluation.    """
"MULE-11609","Task","Test: Testing Framework",8,"ArtifactFunctionalTestCase - Add support for application test resources","""When the artifact is an application, it should consider that it can have target/class and target/test-classes. From both urls, the analysis should be done of what resources, classes and packages to export."""
"MULE-11608","Enhancement Request","sdk",5,"Guarantee the order of Infrastructure parameters in the schema","""Guarantee the order of Infrastructure parameters in the schema"""
"MULE-11605","Bug","Core: Event/Message",2,"Remove or improve org.mule.runtime.core.api.Event#getVariableValueOrNull for performance","""Remove{{ org.mule.runtime.core.api.Event#getVariableValueOrNull}} for performance"""
"MULE-11603","Task","Core: Expressions",0,"Add DW performance tests","""As MVEL has, we need to add benchmark performance tests for DW."""
"MULE-11636","Task","Core: (other)",2,"Add support on Tooling Runtime Client to have custom types for DataSense","""Allow to retrieve the custom types xml needed by DataSense."""
"MULE-11631","Task","Modules: HTTP",2,"Change HTTP extension namespace to http","""Right now, to track migration and had an incremental replacement between module and extension, the extension has httpn as namespace. Once the module is gone it can be changed to http again. The main issue here will be replacing it in the tests."""
"MULE-11630","Enhancement Request","Core: Deployment",8,"Support artifact plugins on domains","""Currently, it is not supported to define a config of an SDK based extensions on a domain. It should be  """
"MULE-11629","Task","Core: Services",5,"Spike on a Soap Client ","""Spike on a soap client that serves as a mule service to consume SOAP operations, and provided Metadata for it."""
"MULE-11627","Task","Core: (other)",0,"Update Tooling Runtime whitelist to include lib/wlang-1.2.0-SNAPSHOT.jar","""A new transitive dependency has been added so assembly whitelist has to be updated"""
"MULE-11625","Enhancement Request","Core: Exception Handling",2,"Unwrap TypedException before creating a MessagingException","""Unwrap TypedException before creating a MessagingException so the user sees the real cause and not the wrapper."""
"MULE-11624","Task","sdk",1,"Verify Mule error types overriding for Extensions does not happen","""Discuss Mule error types overriding for Extensions"""
"MULE-11619","Bug","Core: (other)",8,"Test Connectivity returns null instead of a proper error message","""When doing test connectivity with invalid credentials, a null error type is retrieved (since the internal mule app tries to start and fails). We need test connectivity to skip this validation and perform the real one once the app is up and running."""
"MULE-11617","Task","Extensions API",1,"Add missing extensions descriptions","""Currently JMS, OAuth, Sockets, WSC descriptions are empty.    We should consider making it a mandatory element since this will most probably be the description that exchange, studio or any other tooling consuming the extension model will show as a summary."""
"MULE-11615","Task","Extensions",13,"Move extensions out of the core.","""We should move all core extensions out of the core.  This implies:  * migrating them to a new repository  * set up the necessary CI jobs  * create a new Internal Extensions Parent Pom, with all the internal plugins and dependencies required.  * check extensions that were used in integration tests (those test should be moved to another repo)  """
"MULE-11614","Task","Documentation / Website",0,"Document new expressions for common uses cases","""We need to list all the common uses cases for expressions and translate them to DW. For example:  * flowVars = variables  * message.payload = payload  * message.dataType = dataType  * comparing two strings  * accessing an objects variable    This will not only help document the changes but also identify thins to change/improve."""
"MULE-11654","Enhancement Request","Core: API",8,"Define privileged API","""Define which classes/packages must be part of the privileged API.  """
"MULE-11652","Enhancement Request","Core: API",8,"Provide a mechanism to define a privileged API","""Some plugins and tools used on Mule 4 will require access to parts of the API that we don't want to make public for everyone.  This API will be accessible only to """"privileged"""" plugins. Privileged plugins will be whitelisted on the core"""
"MULE-11651","Bug","Core: Non-Blocking|Modules: HTTP",8,"HTTP request lost when a failing one is processed first","""org.mule.test.module.spring.security.SecureHttpPollingFunctionalTestCase features a server with basic auth receiving 2 requests triggered by a poll almost simultaneously. One of them has valid credentials while the other does not. Problem is that, although both requests are clearly received and processed by the listener, if the first to be processed (in terms of the flow) is the invalid one then the other is lost and ends up failing afterwards.  Though this is happening in that test it would seem it's a more pressing issue in the execution engine that could affect all sources."""
"MULE-11647","Task","Core: (other)",8,"Add support for handling stream payloads on TryIt","""The way Streams are handle by TryIt is to show the class name for those payloads, instead it should use the new capability added to Mule to open a cursor in order to transform it to an String representation therefore notifications could be readable."""
"MULE-11644","Task","Core: Transports",2,"Bundle spring version required by CXF module in compatibility plugin","""When spring is completely isolated in core, cxf will still need to keep its own spring version.    We need to ensure that 2 different spring versions isolated cause no trouble."""
"MULE-11643","Bug","sdk",8,"Nested Pojos with static configurations have its lifecycle tied to its container config","""This affects the usability of the OAuth extension. See the description of MULE-11642.     Also, this will affect all other users of the OAuth service, since the OAuth objects will have to be initialized before the component that uses OAuth is attempted to be used."""
"MULE-11642","Bug","Modules: HTTP|sdk",8,"OAuth config is not initialized at application startup","""OAuth authorization grant type authenticator needs to create some http listeners on startup.    Since the OAuth authenticator is declared inside an http requester config, and that config is dynamic, the OAuth authenticator is not initialized until the requester config is initialized, which doesn't happen until it tries to send a request.    This is a serious usability problem, since the only way to workaround this bug and create the required http listeners is to try to send a request through the requester to force the initialization of the oauth authenticator.    This is currently worked around in the tests by forcing the initialization calling the http request operation. (See https://github.com/mulesoft/mule/blob/mule-4.x/extensions/oauth/src/test/java/org/mule/test/oauth2/AbstractOAuthAuthorizationTestCase.java#L99)."""
"MULE-11981","Task","Core: Streaming",8,"Make Off Heap streaming EE only","""Filestore Stream buffer should only be available in EE"""
"MULE-11754","Task","Core: Concurrency / Threading",2,"Update the names of the threads according to the executing task","""For monitoring and troubleshooting, it would be good to have task information on the thread."""
"MULE-11752","Bug","Modules: WS Consumer",5,"WSC doesnt pick WSDL files from the current classpath","""Creating an app using the WSC connector doesn't work if the WSDL location is relative to the project.  """
"MULE-11750","Task","Modules: HTTP",8,"Add URL option to HTTP request","""Instead of being able to override a configs host and port, we should allow an url attribute.  """
"MULE-11744","Task","Core: (other)",0,"Add component resolution to DataSense service on Tooling Runtime Client API","""DataSenseService should allow to resolves data sense component information for a componentPath."""
"MULE-11739","Enhancement Request","sdk",8,"Make ImportedTypes not dependent on Extension name","""Make ImportedTypes not dependent on Extension name.    This implies using the TypeCatalog for resolving the Extension that declares a given type in the DslResolvingContext.     We are assuming all the necessary information for actually importing the type (that is, having the declaring Extension in the context) is provided by some external actor, and that dependency resolution does not rely on the Extension model import declarations."""
"MULE-11735","Enhancement Request","Core: Streaming",8,"Implement object streaming","""Implement object streaming"""
"MULE-11733","Bug","Extensions API",2,"Cannot inject LockFactory","""I attempted to refactor the ObjectStore Extension to inject ObjectStoreManager and LockFactory individually instead of the MuleContext. While functional tests still worked, running a Mule app in a standalone runtime failed, throwing the attached stacktrace.    Please contact me if you need help reproducing this. Thanks!"""
"MULE-11732","Task","Core: (other)",2,"Remove custom-lifecycle-adapter-factory element","""Remove custom-lifecycle-adapter-factory element"""
"MULE-11730","Task","Core: (other)",2,"Remove *-all-strategy elements","""Remove *-all-strategy elements. This are elements used by services"""
"MULE-11729","Task","Core: (other)",2,"Remove *-router elements","""Remove *-router elements. This were old routers used by services.      """
"MULE-11728","Task","Core: (other)",0,"Remove dynamic-round-robin, dynamic-all, dynamic first-successful elements","""Remove dynamic-round-robin, dynamic-all, dynamic first-successful elements"""
"MULE-11724","Task","Core: (other)",8,"Remove *-object-store elements","""Remove *-object-store elements. Tests cases must use the object store module instead of the core elements."""
"MULE-11722","Task","Core: (other)",2,"Remove custom-connector element","""Remove custom-connector element"""
"MULE-11721","Task","Core: (other)",0,"Remove custom-exception-strategy elements","""Remove custom-exception-strategy element"""
"MULE-11720","Task","Core: (other)",1,"Remove default-exception-strategy element","""Remove default-exception-strategy element"""
"MULE-11716","Task","Core: (other)",8,"Move set, remove, copy for attachments, properties, session properties to compatibility module","""Move set, remove, copy for attachments, properties, session properties and variables to compatibility module"""
"MULE-11715","Task","Core: API",8,"Analyze how to provide package version on each exported package","""As the version of packages used on mule artifacts could be not the same when different artifact versions are used, it would be a good thing to detect in advance whether a package exported by the container will work on a given artifact."""
"MULE-11714","Task","Core: (other)",2,"Remove interceptor-stack elements","""Remove interceptor-stack elements"""
"MULE-11711","Task","Core: (other)",2,"Remove jrun-transaction-mamanger, resin-transaction-mamanger and jndi-transaction-manager elements","""Remove jrun-transaction-mamanger, resin-transaction-mamanger, custom-transaction-manager and jndi-transaction-manager elements"""
"MULE-11710","Task","Core: (other)",2,"Remove custom-transaction elements","""Remove reconnect-notifier and reconnect-custom-notifier element"""
"MULE-11709","Task","Core: (other)",8,"Remove *-processing-strategy elements","""Remove reconnect-notifier and reconnect-custom-notifier element"""
"MULE-11708","Task","Core: (other)",2,"Remove reconnect-notifier and reconnect-custom-notifier element","""Remove reconnect-notifier and reconnect-custom-notifier element"""
"MULE-11707","Task","Core: (other)",2,"Remove reconnect-custom-strategy element","""Remove composite-source element"""
"MULE-11705","Task","Core: API",0,"Clean up debugger API","""Debug API must be clean up after MULE-10834 is solved"""
"MULE-11697","Task","Core: (other)|Transport: VM",0,"Move queue-profile and queue-store to VM transport","""Move queue-profile and queue-store to VM transport and all the elements that extend those types"""
"MULE-11693","Task","Core: Routing / Filters",8,"Migrate idempotent message filter","""Define an error type for this filter."""
"MULE-11686","Task","Core: Components",8,"Move component and it's dependencies to compatibility module","""This is to move <component> and it's dependencies like:   - <*-entry-point-resolver>   - <spring-object> // This one may require integration the new spring module   - <singleton-object>    - <prototype-object>   - etc.    """
"MULE-11685","Task","Modules: HTTP",2,"Provide non streaming options for HTTP client","""Since the HTTP extension must support streaming under all circumstances (it's the safest bet) the HttpClient API of the service only supports those scenarios. It's quite annoying for simple uses to have to either use the blocking API or run the non blocking on an IO thread when a quick response and consumption is desired. We should provide non streaming options both blocking and non blocking for those cases."""
"MULE-11681","Task","Core: (other)",8,"Tooling API define DTOs for DataSense Service","""Tooling Runtime API is exposing DataSense API, as agreed the API for Tooling should define a DTO and utility classes for it."""
"MULE-11774","Bug","sdk",5,"MetadataTypes generated for Interfaces should expose the getters as fields","""Currently, we always generate an empty ObjectType when dealing with interfaces, instead of inferring the fields of that object based on the getters.   This is not an issue for input parameters (see #MULE-11773), but *is an issue for the OutputModel*, since Tooling won't be able to provide a real representation of the output payload nor the Attributes of a Result.    If we have an interface like:       Then the MetadataType generated for this should be an ObjectType with two fields, one of simple type String and one of ObjectType Engine.      """
"MULE-11773","Enhancement Request","sdk",5,"Parameters of Interface types should be forced to have API implementations","""Parameters of Interface types should be forced to have API implementations.    If we have an operation like:      where Car is an interface like:       Then, unless we provide a public implementation of this Car interface, the only way the app user can create the parameter for this operation is to create its own implementation using a Java Component. This won't work nicely with DW.    We should enforce that *any interface used in a Parameter* has to be a baseType of a SubtypesMapping declaration, thus providing at least one implementation in the API of the Extension.  *Output should have no restriction on this.*  """
"MULE-11768","Task","Modules: HTTP",2,"Make response and error-response for listener ParameterGroups","""The @Content annotation will be banned from Pojos, this affects the HTTP listener's response and error-response components so they must be migrated to ParameterGroups."""
"MULE-11766","Bug","Extensions",0,"DefaultExtensionManager's method attemptToCreateImplicitConfigurationInstance should be syncronized","""The synchronization in DefaultImplicitConfiguration.createImplicitConfiguration is not enough to ensure that another thread did not beat the actual thread to create the instance.  The code:    Could fail from race condition, if the actual thread verifies the condition before the ExtensionStateTracker registers the ConfigurationInstanceProvider in the other thread. """
"MULE-11765","Bug","sdk",8,"Invalid XA JDBC Connections are created after an XA Transaction","""*Invalid XA JDBC Connections are created after an XA Transaction*    * After the execution of an XA transaction, the {{jdbcConnectionFactory}} returns the same {{StandardXAConnection}} with an invalid internal state making the connector fail when starting a transaction.    """
"MULE-11763","Bug","sdk",2,"Wrong exception on ElementDeclaration validation","""Wrong exception on ElementDeclaration validation"""
"MULE-11762","Bug","sdk",8,"Wrong implicit config created when using an exclusive operation","""When using an HTTP request without referencing a config one would expect an implicit request config to be used but a listener one is created instead, failing because such config cannot be implicit.  The http request operation is defined as exclusive of the requester config thus that config should be created as it's implicit one."""
"MULE-11761","Enhancement Request","sdk",13,"Create the new Soap Service","""As a first approach we need to implement the client side, moving most of the code that is in the WSC to this module"""
"MULE-11760","Task","Core: API",1,"Move LockFactory to mule-api","""Move LockFactory interface and its dependencies to mule-api."""
"MULE-11756","Enhancement Request","Core: Streaming",8,"EventContext should be aware of <async>","""Right now, it is possible to subscribe to an EventContext and get notifications when completed. CHild context allow that behaviour to work through flow-refs.    We need a way of allowing the same thing when an event goes through one (or many) <async> blocks. Also consider the case of a flow-ref which executes asynchronously."""
"MULE-11780","Task","Modules: WS Consumer",8,"Move the Soap Service specific tests from the WSC to the Soap Service.","""As we don't have an easy way to start a soap server with custom configurations for testing, the soap service is tested through the WSC, we should move those soap service specific tests to the service module."""
"MULE-11779","Enhancement Request","sdk",8,"Spec on Soap Connect","""Spec on Soap Connect."""
"MULE-11777","Enhancement Request","Modules: WS Consumer",8,"Soap Service: Add the ability to use custom underlying transports.","""Add the ability to use custom underlying transports such as   HTTPS, JMS"""
"MULE-11776","Task","Modules: WS Consumer",13,"Make the WSC use the Soap Service","""Make the WSC use the Soap Service    This implies:   * Using the new API  * Find any gaps on the Service API  * Adapt all tests."""
"MULE-11804","Task","Core: API",8,"Make ServerNotificationHandler part of the API","""This is to move the ServerNotificationHandler infrastructure to the Mule API so extensions can be injected with it and trigger custom notifications.    This is needed for the custom notifications of the HTTP module."""
"MULE-11803","Enhancement Request","Extensions API",8,"Allow privileged extensions to enrich their ExtensionModel","""Privileged extensions can contribute declaration enrichers which enrich their own ExtensionModels.    This should be part of the Privileged API and only selected extensions should be able to do this."""
"MULE-11799","Enhancement Request","Extensions API",1,"Prevent triple state booleans","""The SDK allows for parameters of boxed boolean types. This generates the possibility of a triple state boolean: true, false, undefined.    This produces a bad UX in tooling. We should:    * Disallow Boolean parameters  * Force optional boolean parameters to have a default value of """"false""""  """
"MULE-11797","Enhancement Request","Extensions API",8,"Extension's XSD should be generated in runtime","""Right now the XSD is generated at build time. We should make it so that it's generated when the extension is loaded.    This functionality also needs to be exposed through an API so that other components can dynamically obtain an extension's XSD"""
"MULE-11796","Task","Tooling Client",0,"Remove code duplication on DefaultExtensionModelModelService","""DefaultExtensionModelModelService from mule-runtime-tooling-client duplicates code that is already available on Mule container module.  More specifically, all the code used to create modules is already available on Mule's org.mule.runtime.container.internal.ClasspathModuleDiscoverer"""
"MULE-11790","Enhancement Request","Extensions API",13,"Implement OAuth support in SDK","""Placeholder task. Need to split"""
"MULE-11789","Task","Core: Deployment",8,"Lightweight package support","""This is to support the deployment of an application that has no dependencies on it. All the dependencies are declared and must be lookup using an API. We can suppose that the API for looking up for dependencies is already implemented.    This is required for Mozart so it doesn't have to send the app with the whole dependencies set each time there's a change on it."""
"MULE-11784","Task","Documentation / Website|Modules: HTTP",2,"Update HTTP migration doc","""The HTTP migration doc has not been touched since M2 and as a result is very outdated. We need to update it with new examples, review it's content and remove anything that makes no sense anymore, specially considering it might be used to document the extension."""
"MULE-11781","Task","Core: Non-Blocking",1,"Update Reactor lib version to 3.0.5-release","""Update Reactor lib version to 3.0.5-release"""
"MULE-11814","Enhancement Request","Modules: XML, XSLT, XPath, SXC",13,"Migrate XML module to an SDK extension","""Migrate XML module to an SDK extension"""
"MULE-11810","Task","Core: Routing / Filters",8,"Standardize DSL for routers","""DSL for routers is a more complicated than it should.    When a single processor per route can be used, then it looks like this:      If later on, the processor1 must be modified to add some additional logic, the DSL has to be updated like this:        This makes the DSL more complex than it should and that complexity is also consumed by tooling.    The proposal is to change all routers to have always a wrapper element for each route. So it would look like:      """
"MULE-11808","Enhancement Request","Transport: VM",8,"Implement SDK based VM connector","""Spike on implementing VM connector for Mule 4"""
"MULE-11832","Enhancement Request","Modules: WS Consumer",13,"Add missing DataSense features on WSC","""Add missing DataSense features on WSC"""
"MULE-11831","Task","Extensions API",3,"Reduce NestedProcessor to its minimum expression","""Until a replacement is introduced in 4.x, minimize the NestedProcessor interface to it's minimum expression: process() and process(Result).    Also, remove the concepts of @RestrictedTo and @Extensible"""
"MULE-11834","Bug","sdk",3,"DSL: If defaultValue is explicit, write it in the XML","""DSL: If defaultValue is explicit, write it in the XML"""
"MULE-11836","Task","Core: (other)",1,"Tooling API shouldn't throw an exception if an error happens while resolving Metadata for a DataSense request","""When resolving DataSense the dynamic Metadata could fail, in that case the exception shouldn't be propagated and a failure should be passed to DataSense so it could resolve static."""
"MULE-11839","Enhancement Request","sdk",13,"Support core components in the Extension Model","""In order to support every mule component in the extension model, some new concepts have to be added, like:    - Scopes  - Routers  - Aggregators """
"MULE-11838","Enhancement Request","sdk",8,"Support flow paths in ElementDeclaration","""Support flow paths in ElementDeclaration to allow lookup using the same coordinates everywere"""
"MULE-11837","Enhancement Request","sdk",8,"Simplify declaration to make everything a parameter","""Make the ElementDeclaration of components like flows and artifact support every inner component as a parameter."""
"MULE-11848","Bug","Core: Streaming",5,"Replace direct buffers with pooled heap buffers","""Direct buffers depend on garbage collection for the memory to be released, plus allocating bunch of them for small buffer sizes is not truly performant.u    They should be replaced with pooled heap buffersjhh"""
"MULE-11844","Bug","sdk",3,"The dynamic-config-policy element is not part of the extension model","""In the XSD of the extensions, the configurations have an element  *dynamic-config-policy*.    Because it is not included in the extension model, it is impossible for tooling to generate an UI for it so that users can configure it.    This element should be included as part of the model if we want users to define it.    We should also move the element to mule's core namespace."""
"MULE-11843","Bug","Modules: HTTP",2,"Http Server scheduler is shutdown before the connections are closed","""When an http server is closed, its connections are closed too, sending the `Connection: Close` header. But in order to send that, it still needs the executor for the io work, which was already closed when the server was stopped."""
"MULE-11863","Bug","Extensions API",8,"Replace Extension TypeAlias with Metadata TypeAlias","""Replace uses of extension TypeAlias annotation with metadata model TypeAlias annotation."""
"MULE-11855","Bug","jms-module",5,"NullPointerException with JMS Listener","""The following configuration is throwing a NullPointerException when starting the runtime.        The null pointer stacktrace is:      It seems that JmsListener property 'consumerType' is lacking a default value"""
"MULE-11854","Task","Modules: HTTP",2,"Remove dependency from HTTP service to HTTP module","""HTTP service is currently depending on code from the old HTTP module.  HTTP module should be removed from CE code, so the dependency must be removed.  Code form the module that is required on the service must be copied to the service, then other usages of the HTTP module in CE must use the HTTP service.   """
"MULE-11851","Task","Build: Distributions",2,"Remove skipDistributions property from pom files","""Pom files from distribution modules contain a skipDistributions property used to skip the execution of some plugins.   But there is also a distributions profile that is used to include/exclude distribution modules form the build. """
"MULE-11850","Bug","Core: Flow",0,"Paths for processors in dynamically referenced subflows are not recalculated","""Since the dynamically referenced subflows' are remembered to if there were already calculated, if the referenced subflow (2) had a reference to another subflow (3), the first time it is called it will work.   If in another execution, the flow continues in another subflow (4) witch also refers to the subflow (3), the path will be null (it will not be calculated, since it was set as already calculated).    Solution: do not remember paths for """
"MULE-11871","Task","Modules: HTTP",2,"Add a method in the dancer to get the current state for a resourceOwner","""The returned object should be an immutable view of the current state. It must include things like what url was used for authentication, aparte from the state available already in the store."""
"MULE-11870","Enhancement Request","Modules: HTTP",0,"Support CRL in the HTTP listener","""Implement certificate validation through revocation lists for clients connecting to the HTTP listener."""
"MULE-11868","Task","Modules: HTTP",2,"Add invalidate() method in OAuthDancer","""Add an invalidate method, receiving the resourceOwnerId where applicable, in the dancers."""
"MULE-11876","Enhancement Request","Core: Flow",2,"Provide a standard way to build a BindingContext from an InterceptionEvent","""This is to improve the usability of using expressions from an interceptor"""
"MULE-11887","Enhancement Request","Core: Expressions",0,"Add the concept of function namespace","""We need a way for different modules/plugins to contribute functions without worrying about name clashing.    For that, we need some kind of mechanism that acts like a function namespace. DW currently has the concept of module but we need a way to hook that up with the runtime and analyze how it would impact the expression's syntax.    Once this is done, we need to add support for it on the SDK Functions feature"""
"MULE-11883","Task","Modules: HTTP",2,"Remove dependency from HTTP module to sockets transport","""HTTP module is depending on the old sockets transports, which is not private.   Dependency must be removed"""
"MULE-11891","Bug","Modules: HTTP",1,"NotPermittedException in http sends status 405 (method not allowed) instead of 403 (forbidden)","""When a user is authenticated bu requests something he's not allowed too, an 403 (Forbidden) status code has to be returned.    Currently, Mule is returning 405, which is for when the method (GET, PUT, etc) is not allowed."""
"MULE-11897","Bug","Core: Routing / Filters",2,"When filter throws exception, the handler loses the reference to the filter","""Since the Error type/exception type mapping is based on the component that threw the exception, losing the failing filter causes the exception to not be handled correctly.    Examples are:  * AuthorizationFilterTestCase#testAuthenticatedButNotAuthorized  * XmlSendTestCase    There, the component at the moment the exception is being handled is the component following the one that threw the exception."""
"MULE-11906","Bug","Core: Services",8,"WSC: use option resolvers to find service address","""The WSC should use the Value Resolvers to find the service address if possible.    In the cases where there is not a valid address in the WSDL for example:    """"Human_Resources"""" is not a well-formed address per se.    the field must accept custom values, this way when no valid address has been resolved the user can specify the correct one.    All this implies that the current ADDRESS parameter in the WSC connection providers moves from being @Optional to a required parameter.  """
"MULE-11919","Bug","Core: Bootstrap / Standalone",2,"MULE_HOME & MULE_BASE getting set twice in Mule startup","""When you start Mule Standalone with {{./bin/mule}}, the environment variables MULE_HOME and MULE_BASE are being set twice.    Log:  """
"MULE-11917","Bug","Core: Expressions",0,"Error message evaluating a Dataweave Expression is not shown in the app log.","""Error message evaluating a Dataweave Expression is not shown in the app log.    It only shows the expression that failed but not the error that is sent by Dataweave:  {quote}  Message               : Execution of the expression """"                  %dw 1.0                  %output application/java                  ---                      payload.entry map ((entry , indexOfEntry) -> {                          DATE_OF_BIRTH: entry.resource.birthDate,                          GENDER: """"M"""" when (entry.resource.gender) == """"male"""" otherwise """"F"""",                          LAST_NAME: entry.resource.name[0].family[0],                          FIRST_NAME: entry.resource.name[0].given[0],                          CONCAT_NAME: entry.resource.name[0].given[0] ++ """" """" ++ entry.resource.name[0].family[0],                          PHONE: entry.resource.telecom.value[0],                          PATIENT_ID: entry.resource.id                      })          """" failed.  {quote}    This should be showed similar to this after the fix:  {quote}  Message               : Execution of the expression """"                  %dw 1.0                  %output application/java                  ---                      payload.entry map ((entry , indexOfEntry) -> {                          DATE_OF_BIRTH: entry.resource.birthDate,                          GENDER: """"M"""" when (entry.resource.gender) == """"male"""" otherwise """"F"""",                          LAST_NAME: entry.resource.name[0].family[0],                          FIRST_NAME: entry.resource.name[0].given[0],                          CONCAT_NAME: entry.resource.name[0].given[0] ++ """" """" ++ entry.resource.name[0].family[0],                          PHONE: entry.resource.telecom.value[0],                          PATIENT_ID: entry.resource.id                      })          """" failed with this error """"Unexpected character ']' at payload@[2:1] (line:column), expected false or true or null or {...} or [...] or number. at              """"use"""": """"home"""",  {quote}"""
"MULE-11915","Bug","Core: Lifecycle",2,"LockFactory is not initialized before initializing an object that uses it","""This is seen in LifecycleAwareConfigurationInstance. When it is initialized, the injected LockFactory has not been initialized yet.    It is expected when initializing/starting an object that all of its dependencies have been initialized/started respectively."""
"MULE-11914","Bug","Transport: Email",0,"Email transport does not invoke exception strategy when flow processing strategy is synchronous","""When an error occurs while trying to route the message received, and there was an Catch Exception Strategy configured, it is not being invoked. """
"MULE-11913","Enhancement Request","Extensions API",13,"Support for router operations in SDK","""Support for router operations which are rendered as a RouterModel"""
"MULE-11912","Enhancement Request","Extensions API",13,"Support Scope model in SDK","""Allow operations such as validation:all to be rendered as a ScopeModel"""
"MULE-11911","Bug","Core: (other)",2,"Race condition with asynchronous retry policy in testConnectivity()","""When a configuration has an asynchronous retry policy, it may happen that the LifecycleAwareConfigurationInstance is stopped while the connectivity testing is still running, causing it to work with an invalid state.    Also, in the case that a connectivity testing takes a long time, it may happen that a second connectivity testing is done while the previous is still running."""
"MULE-11937","Bug","Extensions API",3,"Multiline parameter documentation is truncated in the extension model","""When an operation method with parameters, and with javadoc for a parameter that is so long it continues in the next line, when generating the json extension model for that parameter only the first line is put in the *description* field."""
"MULE-11936","Bug","Extensions API",0,"IllegalArgumentException: Can not set final java.lang.String field org.mule.runtime.api.metadata.DefaultMetadataKey.id to org.mule.runtime.extension.api.metadata.NullMetadataKey","""IllegalArgumentException when trying to serialize a NullMetadataKey"""
"MULE-11934","Bug","sdk",1,"errors for operation are empty if extension doesn't have @ErrorTypes","""I have an operation with a method that has a @Throws annotation:        If the extension doesn't have the @ErrorTypes annotation, the `errors` field for that operation is empty in the generated extension model json file.    It should fail when building the extension, saying that the @ErrorTypes is required when using @Throws. The consistency between the ErrorTypeProviders and the enum with the ErrorTypes should be enforced and validated too."""
"MULE-11933","Bug","Core: Components",8,"Update all Mule component's parameters to be compatible with DW","""*Review all Mule components parameters to be compatible with DW*    * Review scopes (for-each), routers (choice), filters, and every component parameter and validate if they provide the correct expected *DataType* when evaluating a DW expression.  ** E.g.: the {{<when expression=#[]}} should communicate that is expecting a {{Boolean}} with MimeType {{application/java}}.  * Update {{<set-variable>}} implementation to automatically save the variable with the MimeType that the evaluated expression provides."""
"MULE-11943","Task","e: DataSense",8,"Make the core extension model available through the tooling client","""Provide a way in the tooling client to use the extension model for core components introduced with MULE-11496."""
"MULE-11942","Bug","Core: (other)",5,"Missing information about metadata key when resolving operation metadata","""When resolving operation metadata the key which was used to resolve the metadata was not set to the MetadataAttributes therefore there was no information about it.  This has been partially fixed by adding the following line has been added to {{org.mule.runtime.module.extension.internal.metadata.MetadataMediator}}:  {{attributesBuilder.withKey(newKey(keyValue.toString()).build());}}    Still this is not the correct fix as the keyValue at this point is an object and the information related to the key cannot be obtained and mapped to a {{MetadataKey}}.  """
"MULE-11941","Enhancement Request","Extensions API",8,"Operation, Scope and Router models should extend ProcessorModel","""Currently, ScopeModel and RouterModel extend OperationModel. Although not incorrect, the  model will be more clear an extensible if those three extend a new ProcessorModel abstraction, which extends ComponentModel"""
"MULE-11939","Bug","Modules: HTTP",2,"HTTP extension does not leverage cursor streaming","""HTTP Extension is not able to use new Cursor Streaming ability provided by SDK.  Try to set a custom streaming strategy and see it fails:    """
"MULE-11954","Enhancement Request","sdk",5,"Create extension model loader for models created manually","""While creating a plugin (not an extension), there should be a way to add an extension model to it, so the tooling can generate the UI. """
"MULE-11945","Bug","Core: Concurrency / Threading",1,"Fix threading flaky tests","""Fix the following flaky tests:  * ExpiryMonitorTestCase  * TextFileStoreTestCase  * DefaultSchedulerQuartzTestCase  * DefaultSchedulerScheduleTestCase  * DefaultSchedulerTerminationTestCase"""
"MULE-11958","Bug","Modules: FTP",3,"Error when trying to read certificate signature on SFTP","""When running on Oracle JDK 8u121, some SFTP tests are randomly failing with the following error:        Inner exception is:        Verification of signature fails because leading 0 are removed (that was not validated before).    http://stackoverflow.com/questions/41987227/signature-length-not-correct-when-calling-pgponepasssignature-verify  http://stackoverflow.com/questions/30907205/jsch-not-working-with-certain-sftp-servers  Related info: https://bugs.openjdk.java.net/browse/JDK-8174719"""
"MULE-11957","Task","Core: (other)",1,"LazyMuleArtifactContext initializeComponents do not rebuild minimal apps in some scenarios","""On initializeComponents in LazyMuleArtifactContext it could happen that minimal app is not regenerated and ends being inconsistent with location in request."""
"MULE-11961","Task","Modules: HTTP",1,"Prepare HTTP service for extension","""Some minor changes need to be made so that the HttpServiceImplementation can be extended."""
"MULE-11964","Enhancement Request","jms-module",8,"Review JMS Listener's consumers usage implementation","""*Review JMS Listener's consumers usage implementation*    * In 3.x the JMS Listener can be configured to listen for messages using multiple consumers at the same time, this capability was removed in 4.x.  * In 4.x to be able to maintain the """"Sync"""" capability of the listener, the different consumers must be from different sessions, so we can maintain the unitary ACK/Session recover over just one message.  * Re-adding this capability implies:  ** If it is possible to create a session per consumer.  ** A rework in the JMS Listener to support multiple consumers.  ** How this is going to work when the destination is a TOPIC"""
"MULE-11963","Enhancement Request","jms-module",5,"Improve error message for JmsAcknowledgement operations when the SessionInformation doesn't exist anymore","""*Improve error message for JmsAcknowledgement operations when the SessionInformation doesn't exist anymore*    * Nowadays when a manual ACK or Session Recover is executed, the SessionInformation retrieved using an *ackId*, if the session has been already recovered or acknowledged, this SessionInformation is eliminated.  * When a manual ACK/Session Recover is executed there is no way to detect if the acction is not possible due the possible three scenarios:  ** The session has been acknowledged  ** The session has been recovered  ** The ackId is invalid"""
"MULE-11975","Task","Test: Testing Framework",2,"Make plugin dependencies work with compile scope","""Currently, plugin dependencies are required to be declared as *provided* to be correctly handled by the test classifier. The should have compile scope."""
"MULE-11971","Task","Core: Expressions",0,"Improve DW performance","""Current tests show a significant performance issue in DW when compare to MEL, mostly caused by repeated iterations than can be avoided. We need to analyse the tests and address the bottlenecks found.    For simple evaluation of payload current numbers (March 14) are:  *MEL:*  Time: 580 nS/op  Allocation: 1850 Bytes/op    *DW:*  Time: 4100 nS/op  Allocation: 6900 Bytes/op   """
"MULE-13445","Task","Core: API",1,"Avoid usage of SPI on ThreadPoolFactory ","""ThreadPoolFactory from mule 3.x has support to provide different thread pools depending on whether the runtime was a CE or EE version.  As compatibility is now EE only, there is no need to maintain this functionality and the code would be more easy to read and performant without using SPI"""
"MULE-11987","Bug","Core: Concurrency / Threading",2,"Periodic jobs are cancelled when a trigger happens when the threadpool is busy","""When running a periodic job, if one of the runs is to be executed at the moment its target scheduler is busy (no idle threads), a RejectedExecutionException is thrown and because of that, the job is cancelled not running ever again.    The execution should be skipped and tried to run again at the next trigger."""
"MULE-11986","Bug","sdk",1,"Declaration fails to serialize list of strings","""Declaration fails to serialize list of strings"""
"MULE-11982","Task","Core: Classloading",8,"Boot packages needs to be removed and modules must explicitly define what they export","""ContainerClassLoaderFactory.BOOT_PACKAGES defines a set of packages exported by container modules that must always be loaded by the container class loader.  This means that, if a service has a dependency to javax.mail but javax.mail packages are defined as BOOT_PACKAGES, then the service class loader will not try to load the javax.mail class never and will always delegate to the container class loader.     The problem is that, if the dependency with that package is not longer bundled in lib/opt in the container, then the service, even if it bundles javax.mail, it won't be able to load the class resulting in a NoDefClassFoundException."""
"MULE-11980","Task","Core: (other)",0,"Apply package renaming from compatibility plugin","""Some classes from compatibility  referenced on CE code were moved to a different package. Need to fix these references:  * org.mule.compatibility.core.context.notification.EndpointMessageNotification  * org.mule.compatibility.core.api.context.notification.EndpointMessageNotificationListener"""
"MULE-11978","Bug","Core: Streaming",8,"CursorStreamProvider is closed too early","""As a side effect of MULE-11881, SSAuthenticationAgainstMultipleProvidersTestCase in the compatibility plugin is broken. This is because the provider is being closed before the listener gets to open a new cursor to send the response."""
"MULE-11994","Bug","sdk",3,"Default values not shown for ObjectTypes in generated docs","""Look at the ftp connector generated docs. Things like the PoolingProfile have all their fields described, but the default values are not shown. They should."""
"MULE-12002","Task","sdk",1,"Revisit DslSyntaxUtils as part of the API","""Revisit DslSyntaxUtils as part of the API"""
"MULE-12001","Bug","sdk",5,"ArtifactDeclarationLoader support for EE namespace","""ArtifactDeclarationLoader support for EE namespace in infrastructure parameters"""
"MULE-11997","Enhancement Request","Core: API",3,"Define API for service configuration/override","""Define an API for service override. There are two use cases:    * The runtime wants to override itself. E.g: Overriding the StreamingManager implementation in EE  * A custom distribution wants to override something via core extension. E.g.: Override the queue manager when in cluster mode, override the object store manager when in CH"""
"MULE-12003","Story","sdk",1,"Change the default value for output type field in the HTTP Request","""Change the default value for output type field in the HTTP Request (advance > other setting > output type field) from Any to Stream"""
"MULE-12012","Task","sdk",5,"Review Source Transactions","""Review Source Transactions"""
"MULE-12011","Enhancement Request","sdk",8,"Spike on Support Transactions in Sources","""Spike on Support Transactions in Sources"""
"MULE-12010","Enhancement Request","sdk",8,"Bundle import/export of declaration in a single Artifact serializer","""Bundle import/export of declaration in a single Artifact serializer.     Currently we have one way to import the declaration from an xml, and one way to export, in a diferent api. We should have a single bundle that allows both import/export of declarations AND dslElementModels.    """
"MULE-12004","Task","Core: (other)",8,"[Perf] Review GC tunning for Mule 4 when used from Tooling Client","""As part of the root cause analysis for MULE-11950 I found that when using Mule Runtime to deploy and deploy several times applications on Mule 4 the classloaders for each application is disposed/closed but the classes are not unloaded from the JVM.  After a while and doing the deploy/undeploy operation for more 150 times the response times for the JVM starts to be 4 or 5 times greater than it was for the first deploys.    For the time being Tooling has defined that the Metaspace should be sized to 256m but this ticket is about finding the root cause of this and define if needed the correct GC tunning for Mule."""
"MULE-12239","Bug","Core: Classloading",8,"When objects form a plugin are being registered, the context classloader is the one from the app instead of the plugin","""For non-extension plugins, it should be enforced that the classloader to use when loading plugin classes and resources (for instance, when putting those in the registry) is the classloader of the plugin. Currently it is the classloader for the app,    This is currently worked around by exporting additional stuff from said plugins os its internal stuff can be loaded from the appllication classloader. Those exports should be trimmed as part of this fix.  """
"MULE-12021","Task","Core: Services",8,"Remove services to their own repositories","""We need to determine a way to provide pathces/fixes for services artifacts. For plugins/extensions this will be achieved by having them in their own repo, with their own lifecycle and releasing the whole plugin instead of doing a patch.    It has yet to be determined what to do for services in a similar scenario"""
"MULE-12017","Bug","Core: Logging",0,"JMSAppender not property closed after application is undeployed","""When an application uses JMSAppender to log through JMS, the current log4j version (2.5) doesn't close the connection to the queue when the logger context is stopped. This is fixed in 2.7."""
"MULE-12030","Bug","Core: Expressions",2,"Make mule.test.mel.default sysporp set the default not exclusively","""Currently, the *mule.test.mel.default* sysprop is forcing MEL as the expression language, even for DW full scripts or one-line dw expressions with the *dw:* prefix.    The sysprop should only affect expressions without prefix."""
"MULE-12029","Bug","Core: Deployment",8,"Pom properties are not being resolved when loading the dependencies from the pom file","""When properties are used to define a dependency version within a plugin or an application inside the pom file, then it fails to resolve the dependencies.    The problem is that we are not creating the resolved model for maven, we are just loading the file content into a Model instance."""
"MULE-12048","Task","Core: Classloading",1,"Container should not export /META-INF/mule-module.properties files","""Container is exporting /META-INF/mule-module.properties files, apparently those files are used on the isolated test runner in order to properly create the classloader for the test. But is not correct that those files are exported, is required to review why they should be exported and find another way to do the same without doing it."""
"MULE-12046","Bug","Transport: Email",0,"IMAP decode special character in username and password twice","""AbstractMailConnector decodes username and password although they were already decoded while creating the DefaultInboundEndpoint. This usually does not have any bad effect, except when the password includes a '%' character."""
"MULE-12043","Bug","Modules: XML, XSLT, XPath, SXC",2,"In AbstractXPathExpressionEvaluator, replace the cache WeakHashMap with a guava cache","""AbstractXPathExpressionEvaluator uses a WeakHashMap for caching, but the keys are String's and it is recommended for WeakHashMap entries to do equals by identity, which is not the case here.    It should be changed to a guava cache, with a max size instead of depending on the garbage collector."""
"MULE-12042","Bug","Core: Routing / Filters",8,"Empty Failure Expression evaluated positive in Catch Message Exception","""Description  When a until-succcessful scope is within a catch message exception it completes an unexpected behaviour wheh the failure expression is empty.  The failure expression will be evaluated only if the flow didn't throw an exception. In order to fail only when a specific type of error is thrown. However when the contents of the failureExpression is empty, it's default is to populate the failure expression with """"exception-type:"""".   if (failureExpression != null)          {              failureExpressionFilter = new ExpressionFilter(failureExpression);          }          else          {              failureExpressionFilter = new ExpressionFilter(""""exception-type:"""");          }  This means that the failure expression seems to always run.  """
"MULE-12039","Enhancement Request","Extensions API",8,"Change how configuration resolution works","""The configuration resolution for operations without an explicit reference is sometimes confusing:    a. If you don't have a validation configuration, it will create and use a default one.   b. If you have only 1 validation configuration, it will be automatically used as the default one.   c. If you have more than 1, you need to specify on each validation operation what configuration to use.     Consider the following 3-step scenario using the validations extension:     1) You initially develop Validation_A, which has no need for a validation configuration. Therefore you leave config-ref blank. Validation A works successfully.   2) Later, you develop Validation_B, which needs Validation_Configuration_1. Validation_B references Validation_Configuration_1, and it works. However, now, without changing anything about Validation_A, it now uses a completely different validation configuration, and it may not work.   3) Even later, you develop Validation_C, which needs Validation_Configuration_2. Validation_C references Validation_Configuration_2, and it works. However, now, while still not changing anything about Validation_A, it fails completely (and it goes uncaught until runtime!!!).     As it works now, making a change completely unrelated to a working validation can cause that validation not to work. After talking with my fellow developers, we agreed: a validation with no config-ref should work the same way no matter how many validation configurations exist within the project.     We can see a case for a validation always being required to define a config-ref. Or we can see a case for a validation with no config-ref always using the default configuration. But we do not think it makes sense for a validation with no config-ref to work differently (and potentially break) depending on how many unreferenced validation configurations are in the project.    We need to change to:    * Operations without a config-ref will share the same implicit config (when possible), even if several explicit configs are defined  * Operations with an explicit config ref with honour that config, even if an implicit one was created."""
"MULE-12037","Task","sdk",1,"Update external extensions parent pom with Mule services dependencies","""Update external extensions parent pom with services dependencies"""
"MULE-12036","Enhancement Request","Modules: WS Consumer|sdk",5,"Validate WSC connection","""Properly validate the connection by making an HTTP request to the provided address."""
"MULE-12033","Task","Core: Streaming",8,"Set the stage for introducing object streaming","""Make necessary refactors and changes so that we can introduce object streaming while leveraging and reusing all the infrastructure created for the CursorStream functionality, specially the one which prevents leaks"""
"MULE-12051","Task","Build: Integration Tests",8,"All functional tests from CE must use the isolated test runner","""There are many functional test cases on CE that are running without isolation, ie, they are not extending from MuleArtifactFunctionalTestCase but from FunctionalTestCase or ExtensionFunctionalTestCase.  Those test must be migrated to properly test the components"""
"MULE-12049","Bug","Core: Classloading",2,"Different javascript engine are used on unit and isolated tests","""Unit tests on the scheduler service are using the javascript engine provided by the JDK.  On the container or isolated tests, however, the used engine is the one that come from the scripting module, ie, Rhino.  The problem appears to be related to the fact that the nashorn implementation is being filtered on the container classloader, so the service is not able to load it and falls back to Rhino."""
"MULE-12255","Task","Build: Integration Tests",2,"Migrate testing namespaces to plugins","""There are namespaces used for testing, i.e.: *mule-test.xsd*, The functionality provided by such namespaces must be migrated to a plugin and use the new parsers     Break the dependency of the classes in the test plugin with the *Component* interface."""
"MULE-12061","Task","sdk",5,"Remove the RouteModel and replace with ScopeModel ","""Remove the RouteModel and replace with ScopeModel """
"MULE-12057","Task","Core: (other)",2,"DataWeave should be used to encrypt payloads in idempotent-secure-hash-message-validator","""DataWeave should be used to encrypt payloads in idempotent-secure-hash-message-validator. Also, the tests should test this functionality.  Check: https://github.com/mulesoft/data-weave/issues/121    """
"MULE-12056","Task","Core: (other)",2,"Move combine-collections-transformer to compatibility module","""Move combine-collections-transformer to compatibility module"""
"MULE-12055","Bug","Transport: FTP / SFTP",8,"MULE-7211: SftpAutoDeleteTestCase (flaky test)","""endpointAutoDeleteFalse[explicit-connector]"""
"MULE-12068","Bug","Modules: XML, XSLT, XPath, SXC",8,"Add TransformerFactory to our XMLSecureFactories","""Some months ago we reviewed all usages of potentially susceptible classes to XXE vulnerabilities. Recently, our reference wiki page included TransformerFactory and SAXTransformerFactory. See https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet    We should add the corresponding fixes for prevention, and determine if they are actually issues affecting us.    Sources to check:  - modules/xml/src/main/java/org/mule/module/xml/filters/SchemaValidationFilter.java: Validator, SchemaFactory  - modules/json/src/main/java/org/mule/module/json/transformers/TransformerInputs.java: SchemaFactory, TransformerFactory  - modules/xml/src/main/java/org/mule/module/xml/transformer/AbstractXmlTransformer.java: TransformerFactory  - modules/xml/src/main/java/org/mule/module/xml/transformer/XsltTransformer.java: TransformerFactory  - modules/ws/src/main/java/org/mule/module/ws/consumer/WSDLUtils.java: TransformerFactory  - modules/xml/src/main/java/org/mule/module/xml/util/XMLUtils.java: TransformerFactory  - modules/xml/src/main/java/org/mule/module/xml/expression/JaxpXPathExpressionEvaluator.java: XPathExpression  - modules/xml/src/main/java/org/mule/module/xml/xpath/JaxpXPathEvaluator.java: XPathExpression"""
"MULE-12066","Task","sdk",5,"Support XA transactions in SDK extensions at source level",""" *Support XA transactions in SDK extensions at source level*  *  With https://www.mulesoft.org/jira/browse/MULE-12011 and https://www.mulesoft.org/jira/browse/MULE-11221 Sources started to be able to participate in transactions.  * But nowadays the sources are not able to init an *XA transaction*. The support of XA transactions implies:  ** The Source should be communicated which kind of transaction the Mule developer want to create: *LOCAL*, *MULTI*, *XA* and depending on this value, the kind of transaction that should be created."""
"MULE-12136","Enhancement Request","Core: Streaming",5,"Implement off heap object streaming","""Add a file store option for object streaming"""
"MULE-12080","Task","sdk",8,"Verify that dynamic metadata works well with auto paging operations","""Verify that auto paging operations with a custom output resolver correctly notify their metadata.    The user should provide an output resolver for the pages items, but the communicated MetadataType should be an array of such type.    you have to:    * Verify that tests like this exist for non paged operations (List<Apple>)  * Add tests for similar auto paging operation (PagingProvider<Applet>)  * Add test for non paged operation with output resolver (List<Object> -> List<Apple>)  * Add similar test for paged operation with output resolver (PagingProvider<Object> -> List<Apple>)    If any of the above don't work, make them."""
"MULE-12079","Bug","Extensions API",5,"Auto paging operations should not have a @Connection parameter","""Right now, auto paging operations fail if they don't include a connection parameter.    This is not only wrong (since most operations only need the connection inside the paging provider) but can also lead to problems since the developer could get confused and use the connection received in the operation instead of the one in the paging provider.  """
"MULE-12078","Bug","Extensions API",5,"Auto paging operations must have a fetchSize parameter","""All auto paging operations must have a fetchSize parameter which needs to be injected into the PagingProvider.    It has to be automatically injected by the SDK"""
"MULE-12077","Enhancement Request","Extensions API",8,"Allow operations to override parameters from config","""Operations which override a param from the config is a very common pattern. However, right now, the user needs to:    i) declare the parameter  ii) check if it was provided  iii) if not, fetch the value from the config    Besides being cumbersome, it requires null handling which is something we would like to avoid with certain types such as booleans. We need a feature in which we could declare the parameter to be an override of the config:        Take aways:    * The operation must require a configuration. If it doesn't, compilation should fail  * The parameter MUST have the same name as the config parameter being overriden  * The parameter will automatically be marked as optional and will not have a default. Using @Optional in tandem with @ConfigOverride will be invalid  * Other annotations such as @ExpressionSupport are valid    The SDK will automatically do the value resolution, injecting either the operation's own value or whatever value was assigned on the config  """
"MULE-12075","Bug","Core: Event/Message",8,"Serialization issues in EventContext","""When a child context is serialized an deserialized, its reference to the parent context is lost. The newly deserialized child context has a cloned parent context, so when trying to notify its parent, all who are expecting on the parent context miss the notification.    This is manifested with the following tests, that must be added in *DefaultEventContextTestCase*:      Also, when running in integration tests, the transient fields are not reinitialized after the deserialization (*readObject* is not called)"""
"MULE-12100","Bug","sdk",1,"JMS throws NPE when receiving a message without ContentType","""JMS throws NPE when receiving a message without ContentType"""
"MULE-12099","Bug","Core: (other)",2,"Remove dead-letter-queue","""Remove dead-letter-queue element and related functionality from redelivery-policy and until-successful."""
"MULE-12095","Enhancement Request","Extensions API",3,"Remove support for intercepting operations in the SDK","""Intercepting operations are evil and we don't need them anymore now that we have super awesome streaming"""
"MULE-12093","Enhancement Request","Extensions API",3,"PagingProvider should support sticky connections","""Although not the most frequent case, some API's require that the same connection that got the first page is the one requiring the second one. An example of that is JDBC.    PagingProvider should have an option to hint that the same connection should always be used. This must be an optional setting and the default should be that different connections are supported."""
"MULE-12092","Task","Core: Non-Blocking",8,"Split synchronous processing strategy into blocking and direct strategies","""Now that Event doesn't have a sync flag, operations have no way of blocking when blocking behaviour is configured at flow level or is required due to transactions.    Rather than operations using event.isSynchronous() operations, where possible, should be non-blocking be default and rather the flow, via the processing strategy should block and wait for the response of these operations.    """"synchronous"""" processing strategy in config should be an alias for BlockingProcessingStrategy."""
"MULE-12091","Task","Extensions API",3,"Ensure that PagingProvider always gets the same connection when used in a transaction","""When auto paging is used in a transaction, each call to getPage() needs to receive the same transaction.    In theory, this should be working right now. Write a test to ensure it. If the test doesn't pass, make it so."""
"MULE-12090","Enhancement Request","Extensions API",3,"Obtain flow and app name on SDK operation","""In the policies migration to SDK extensions, we found the need to have accessible the flowName and appName in the operation.    We don't need to expose this information however, having them as private variables of the configuration will suffice for our use cases."""
"MULE-12089","Bug","Core: Configuration",0,"Parser enters an exception loop on flow-ref","""The test EEStreamingExtensionTestCase has the following config:        The test passes with this configuration. However, that configuration could be simplified like this:        After introducing the flow-ref, the test starts failing like this: (log was trimmed because of text length limitations, this actually enters a loop until the test times out)    """
"MULE-12088","Task","Extensions",1,"Fix extension's string formats and unused generics","""Fix extension's string formats"""
"MULE-12084","Bug","Core: (other)",0,"Refactor connectivity testing service to use maven dependencies","""Due to the changes related to using maven for dependencies in applications, the connectivity service is broken. We need to update it to use maven."""
"MULE-12115","Task","Core: (other)",0,"Expose DataSenseMetadataCacheProvider in DataSenseService","""DataSenseService should expose cached metadata provider APIs."""
"MULE-12113","Enhancement Request","Core: Configuration",2,"Scheduler should not have implicit behaviuor","""Currently the following is supported in XML and has implicit behaviour that can only be discovered via docs or running the app.    <flow>    <scheduler>  </flow>    IMO, The scheduler strategy and also ideally the scheduler frequency should both be explicit in XML config and during the configuration UX when a scheduler is used to start a flow.    If we want there to be a default in tooling, so that user sees and accepts a default strategy, rather than being forced to configure one then that make sense, but allowing no strategy to be seen/configured doesn't make sense.     In order to support a default strategy that can be accepted rather than needing to be explicitly chosen we may need to add the ability to hint a default strategy in extension model."""
"MULE-12110","Task","Core: (other)",0,"Migrate collection-splitter to new parser in Mule 4 M5","""Migrate collection-splitter to new parser in Mule 4 M5"""
"MULE-12107","Enhancement Request","Modules: WS Consumer",8,"Add Dynamic Metadata resolution support in Soap Connect.","""Basically, for a given Service and Operation, we should provide Input and Output types similar to what the WSC provides.    """
"MULE-12103","Bug","Modules: Email",5,"imap list is returning a List<Result> instead of a List<Message>","""Check this is not the case with Pop3 as well. Also check why none of the SDK tests failed."""
"MULE-12102","Enhancement Request","Core: Non-Blocking",2,"Cleanup API to use ReactiveProcessor instead of publisher function","""Cleanup processing strategy API to use ReactiveProcessor instead of publisher function"""
"MULE-12116","Bug","Core: (other)",2,"Provide support to start server plugins from embedded API","""The embedded Mode API should provide support to start a container with Server plugins such as the debugger. """
"MULE-12129","Bug","Core: DSL processing",1,"Fails to parse valid XML config ","""Deploy the following application which only contains a Spring bean definition and a file:config component.  Deployment fails with the following error:  {code}  Caused by: org.mule.runtime.api.exception.MuleRuntimeException: org.mule.runtime.deployment.model.api.DeploymentInitException: SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 'file:config'.  {code}    Note that if you comment either the bean definition or the file:config element, the application deploys successfully. When nothing is commented, deployment fails.    Config:  {code:xml}  <?xml version=""""1.0"""" encoding=""""UTF-8""""?>  <mule xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance""""        xmlns=""""http://www.mulesoft.org/schema/mule/core""""        xmlns:ss=""""http://www.springframework.org/schema/security""""        xmlns:spring=""""http://www.springframework.org/schema/beans""""        xmlns:file=""""http://www.mulesoft.org/schema/mule/file""""        xsi:schemaLocation=""""http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd        http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/current/mule-spring-security.xsd          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd                            http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/file.xsd"""">        <spring:beans>          <ss:authentication-manager alias=""""authenticationManager"""">              <ss:authentication-provider>                  <ss:user-service id=""""userService"""">                      <ss:user name=""""ross"""" password=""""mason"""" authorities=""""ROLE_ADMIN"""" />                  </ss:user-service>              </ss:authentication-provider>          </ss:authentication-manager>      </spring:beans>            <file:config name=""""File_Config"""">              <file:connection workingDir=""""${mule.home}/apps/parser-bug""""/>      </file:config>        </mule>  {code}"""
"MULE-12126","Enhancement Request","Extensions API",5,"The SDK should communicate to the Expression Manager the expected DataType","""*The SDK should communicate to the Expression Manager the expected DataType*  * Nowadays when an extension parameter value is evaluated the AttributeEvaluator doesn't communicate the expected DataType of the evaluation.  * This is required for DW transformation when doing a transformation from and to different MimeTypes.  * We need to take care of the Object/InputStream/(and surely other cases) cases that *SHOULD not* be communicated to prevent non-expected behavior in DW transformations.  * Common POJOs and simple types should be communicated """
"MULE-12123","Enhancement Request","Core: Non-Blocking",2,"Add processing strategy resilience tests","""Add tests that process streams of events both success/error and mix"""
"MULE-12121","Enhancement Request","sdk",3,"Replace XMLGenerationService from tooling client to ArtifactSerializationService","""Replace XMLGenerationService from tooling client to ArtifactSerializationService"""
"MULE-12120","Bug","Core: Containers",8,"Embedded container fails to resolve version range ","""The embedded container brakes with the following exception         When the .M2 repository for that artifact  /Users/damiansima/.m2/repository/org/jruby/jruby-core  Looks like this:        It's not yet clear how I manage to get that .m2, I reckon it was a side effect of studio when my application's pom contained a dependency to mule-module-all.    In either case the container should know how to deal with such errors and worst case scenario end the execution properly and without an aether error."""
"MULE-12118","Enhancement Request","sdk",13,"Add support for multiple consumers for JMS Listener","""*Add support for multiple consumers for JMS Listener*    * Create a new session per consumer.  * Review the Listener vs Polling Consumer logic  * Review the semaphore implementation to work with multiple consumers"""
"MULE-12147","Enhancement Request","Transport: FTP / SFTP",0,"Add proxy support for SFTP connector in 3.x","""The SFTP connector currently doesn't support proxies, but the implementation offers them so we just have to provide an interface."""
"MULE-12143","Bug","Core: Expressions|Core: Services",2,"ExpressionExecutor proxy wraps exceptions causing invalid DW expression to throw error of type UNKNOWN instead of EXPRESSION","""An expression for example like: #[invalidExp] which is invalid fails with an error of type UNKNOWN, but it should fail with a EXPRESSION type.    TestCase:        *set-invalid-dw-config.xml* file    """
"MULE-12138","Enhancement Request","sdk",1,"HTTP: ""Allowed methods"" field missing Summary and Example","""HTTP: """"Allowed methods"""" field missing Summary and Example.    When configuring the connector there is no hint stating that the allowed methods should be passed as a """"comma separated list of HTTP methods"""""""
"MULE-12164","Bug","sdk",2,"Extensions documenter doesn't document correctly Message Sources","""*Extensions documenter doesn't document correctly Message Sources*    * Missing parameter description text  * Missing {{@Summary}} text"""
"MULE-12161","Bug","Core: Streaming",1,"Streaming config is not validated to be coherent","""It is currently possible to do things like this:      * It is possible to have an initial size bigger than the max size  * An increment size greater than the maxSize  * test any other crazy combinations you can think off"""
"MULE-12158","Bug","Core: Streaming",1,"Auto paging and cursor iterators should have a getSize()","""In 3.x, auto paged iterators used to have a size() method so that MEL could be used to extract the total size. Auto paged iterators and cursor iterators in mule 4 inherit this behaviour. However, for compatibility with the new EL, the method should be renamed to getSize()"""
"MULE-12157","Bug","Extensions API",1,"Non descriptive error message when connected operation doesn't have a provider","""When an extension declares an operation with requires a connection, but the extension itself doesn't have any connection provider, the error thrown is not descriptive at all. The error should:    * Be descriptive  * Be thrown in compile time  * Verify that it works with sources too"""
"MULE-12155","Bug","Core: Logging",1,"Wrong warning logged with simple expression","""A simple logging expression such as    produces the following warning in the logs      The message is not only wrong, when it does apply it should only be logged once, not in every simple message (see org.mule.runtime.core.util.OneTimeWarning)"""
"MULE-12154","Bug","Modules: File",1,"Path parameter in file:write operation should be required","""Should be required"""
"MULE-12148","Bug","Core: Expressions",0,"Hidden error message in expression evaluation error","""When using DataWeave as an expression language, when some types of exceptions are thrown, the error message from DW is hidden, so not useful description of the error is available to the user.     """
"MULE-12165","Bug","Core: Streaming",8,"Echo application is blocked reserving and unreserving direct memory, which also causes OOM.","""Profilling the echo application with default configuration with the http connector, it shows a big contention when freeing memory, some allocating and a small percentaje of the requests fails do OOM error, looks like this is related to direct-memory which is not used by the streaming capability, but may be releated."""
"MULE-12183","Bug","Core: Request-Reply",0,"AbstractAsyncRequestReplyRequester should not add correlation sequence to correlationID","""If request reply is inside a component that adds correlation sequence (e.g. for each), then the replied message cannot be recieved, because it is expecting the message without the correlation sequence added."""
"MULE-12182","Bug","Core: (other)",0,"Provide a way to give a name to the application in embedded mode","""Embedded container is creating a folder structure to deploy the temp application in order to start the container.     It does so and it also creates the folders apps/app.     It then uses this """"app"""" folder to create the application descriptor in: org.mule.runtime.module.deployment.impl.internal.application.ApplicationDescriptorFactory#loadFromJsonDescriptor    This translates in the logs as       The folder name inside apps should be related to a parameter send to the embedded container factory or taken from the name mule-application.json:      """
"MULE-12180","Enhancement Request","Core: Configuration|Core: Routing / Filters",8,"Remove async Until Successful functionality and make sync until successful non blocking","""- async until-successful is removed from mule core DSL instead flow A -> JMS/VM -> Flow B is recommended. (edited)  - we could not put async until-successful in compatibility, but auto-migration to <async><until-successful/><async/> isn’t quite the same functionally (no persistence), and auto-migration to flow+vm+flow may not be trivial  - sync until-successful need to be kept until we replace it with retry in <try> in 4.x. In the mean time make it non-blocking."""
"MULE-12177","Task","sdk",8,"Review extensions dependencies","""We must review all extensions dependencies to ensure we remove any unnecessary things that will make the final application package too heavy.  This must be done on all extensions prior to Beta release."""
"MULE-12196","Enhancement Request","sdk",3,"Avoid types without ID in the type catalog","""Avoid types without ID in the type catalog"""
"MULE-12192","Enhancement Request","sdk",5,"Review QName and Infrastructure model properties","""Review QName and Infrastructure model properties"""
"MULE-12191","Enhancement Request","sdk",2,"Make Infrastructure and QName model properties public","""Make Infrastructure and QName model properties public"""
"MULE-12189","Task","Core: Classloading",8,"Region class loader must check that different artifacts are not exporting the same package","""Region class loader maintains a mapping that indicates which class loader must be used to load a given package.   Every time a class loader is added to the region, this class loader's exported packages are added to the map, overriding any previous mapping for that particular package.  This is a bug as packages exported by an app can be overridden by packages exported on a plugin. In particular, this problem was observed when migrating test using test extensions  to run with the isolated test runner. In particular, extensions export classes from org.mule.tck.message and other packages, which are exported by the test (aka application)  However, this bug cannot be easily fixed as other modules depend on it in order to work. Extensions have bot unit and functional test cases in the same module. This causes that the test export the same package as the production code (as unit tests are written on the same package). Then, when the extension plugin classloader is added to the test region, the region mapping is updated with that classloader."""
"MULE-12187","Task","Core: (other)",0,"Make embedded test case be able to access a maven repo with mule artifacts","""This is so if there's a maven test case using an app with a dependency not declared in the pom file of the embedded test case, it will be able to retrieve it from the public maven repo of mule"""
"MULE-12205","Task","Core: API",0,"Support equals and hashcode in Location object","""Support equals and hashcode in Location object"""
"MULE-12201","Bug","Modules: HTTP",8,"App hangs when there is a dw evaluation error in the error-response","""When there is an evaluation error in the error-response of the listener, for example when evaluating inexistent variables trying to set a value to the httpStatus, the app hangs.  Steps to reproduce:  Deploy the following config, and hit the endpoint.      As a result, the set-variable fails, trowing an exception. Then the error-response fails to evaluate the expression and the app hangs. These are the logs of that unhandled behaviour:  """
"MULE-12593","Task","Build: Distributions|Build: Libraries / Dependencies",1,"Remove YourKit libraries and scripts","""Decide if we will continue shipping YourKit libraries in the lib/native folder, and upgrade to a newer version that supports the latest JDKs and features of YourKit.  The current version that we are shipping was released in 2010 and meant for Java 6.    Links:    Version history - https://www.yourkit.com/download/older.html  Compatibility - https://www.yourkit.com/docs/kb/tech_req.jsp    UPDATE: We finally decided to remove the yourkit libraries """
"MULE-12211","Enhancement Request","Extensions API",3,"Add Soap Connect Extension Validators","""Add validators for Soap Connect:   E.g: cannot use @Soap with @Configuration."""
"MULE-12207","Enhancement Request","Extensions API",8,"Implement connectivity testing for Soap Connect extensions","""Implement connectivity testing for Soap Connect extensions:  Currently, the ForwardingSoapClient doesn't provide a way to validate the connections because the Soap Service doesn't provide a way. The same happens in the WSC.    """
"MULE-12206","Bug","Core: Queues (SEDA) / Persistence",0,"SedaStageInterceptingMessageProcessor thread should clear RequestContext ","""The thread in SedaStageInterceptingMessageProcessor does not clear the RequestContext, so MuleEvents could be leaked in the ThreadLocalMap (since the thread runs until application is stopped).  Although the thread runs in a WorkerContext, it does not stops running until the application stops, so RequestContext.clear is only executed after that.     """
"MULE-12213","Bug","Core: Expressions",3,"OpUx transformation outputs blank value","""In a flow which payload is a list of maps, the following works well:        One file is written per map in the list, in csv mode.     This other chain should be perfectly equivalent:        However, the above outputs empty files only"""
"MULE-12212","Task","Core: API",2,"Review if the approach used to separated mule API from the implementation is the right one","""Mule API has org.mule.runtime.api.message.Message interface. Instances of that class are created using a org.mule.runtime.api.message.AbstractMuleMessageBuilderFactory implementation which is found via SPI.  Mule API jar does not contain any implementation of the that factory.   In a previous version of  org.mule.runtime.api.message.Message class, there was a NULL_MESSAGE constant which, in order to be built, it required a builder to be available on the class path.  Because of some change required to provide a privileged API, the container classloader has to be used to find the message factory, instead of using the current thread's context classloader. This change, made visible a problem with the API/implementation approach as under some scenarios, there is no message builder factory available.  For example, the extensions maven plugin used to build SDK extensions, depends on Mule API only. When extensions has org.mule.runtime.api.message.Message on their API, then the plugin will need to load that class to do some processing. This will fail, as before, if there is any message constant that require to be build on the Mule API side.    For these reasons, will have to review if the approach used to separated mule API from the implementation is the right one."""
"MULE-12232","Enhancement Request","Extensions API",3,"Introduce the concept of FlowListener","""Advanced operations need to  be able to be notified of the owning flow's result, in order to do log, audit, resource deallocation, etc.    Currently, the mechanism for doing that is intercepting message processors, which are evil.    We need a new mechanism which doesn't require intercepting and instead leverages the new callbacks from the reactive engine"""
"MULE-12230","Bug","Transport: FTP / SFTP",0,"FtpConnector should take into account that Files could have been consumed","""If the files in an FTP Server are consumed between it is checked wether it is a directory or a File (e.g. an external Ftp Client), then the block in FtpConnector:670 is executed resulting in a ArrayIndexOutOfBoundException"""
"MULE-12224","Bug","sdk",5,"Provide support for scope as top level elements","""Extension model should provide support to flag scope elements as top level elements"""
"MULE-12223","Bug","Extensions: Maven Plugin",1,"'File already exists' exception when building extension","""If you build an extension using the extensions-maven-plugin, you often get a """"File already exists"""" message, unless you perform a Maven clean.  The plugin should overwrite the generated files to avoid this error.    Log:  """
"MULE-12218","Enhancement Request","Core: Logging",2,"Reduce overhead of debug log statements by using isDebugEnabled","""Currently logging in EventContext implementations uses getClass(), without a isDebugEnabled contain creating unnecessary overhead."""
"MULE-12216","Enhancement Request","Core: Logging",2,"Eliminate thread contention due to use of java.lang.ClassLoader#getSystemClassLoader in ArtifactAwareContextSelector","""I have not yet measured the raw impact of this contention, but ideally it should not even exist,"""
"MULE-12215","Enhancement Request","Extensions API",3,"Create the concept of Literal","""Add a way to obtain parameter values as they were entered in the DSL. No transformation nor expression evaluation.    When used in configs, those parameters should not cause the config to be dynamic, even if values are expressions"""
"MULE-12245","Task","Modules: XML, XSLT, XPath, SXC",8,"Remove endorsed XML libraries","""We've been using Apache Xalan with Xerces for a long time, but Java 1.7 (and 1.8) provides newer alternatives with more security features.    See this post (maybe a bit exaggerated, but the general idea is probably correct):  http://www.odi.ch/weblog/posting.php?posting=689    The purpose of this issue is to determine how many tests are broken, and if the migration is easy then doing it. Regarding APIs, all standard factories should be compatible but comparisons of XML fragments in our tests may fail due to differences in spacing, order, namespaces, etc.    Conclusions:  - It was possible to remove them.  - We are still using Woodstox XMLInputFactory and Saxon TransformerFactory in some places, but explicitly.  - licm (License Manager) required modifications.  - By including Woodstox or Saxon JARs in the classpath we are changing the default XMLInputFactory and TransformerFactory implementations. But as we use them through XMLSecureFactories for security settings, at least in our code we use the Java provided implementations. User applications and other code will use Woodstox/Saxon if loaded, and it can't be changed unless we remove their META-INF/service providers."""
"MULE-12244","Bug","sdk",5,"Exclusive Optional parameters are not communicated for parameter groups inside POJOs","""*Exclusive Optional parameters are not communicated for parameter groups inside POJOs*    * The information about *Exclusive Optional* parameters is communicated in the ParameterGroupModel, due that for Types this model doesn't exist, the information is lost.  * This happens for {{TypeClassifier}} of DB Connector.  """
"MULE-12243","Enhancement Request","Transport: JMS",8,"JMS should publish messages with String Representable MimeTypes as StringMessages","""JMS extension publishes a message based on an application/json payload as StreamMessage with MM_MESSAGE_CONTENT_TYPE property application/json.     When that message is consumed the mimeType returned is an application/json that wraps an ArrayList that contains the published application/json content instead.    *Application  to reproduce*    {code:xml}  App details    <?xml version=""""1.0"""" encoding=""""UTF-8""""?>    <mule xmlns:httpn=""""http://www.mulesoft.org/schema/mule/httpn""""        xmlns:ee=""""http://www.mulesoft.org/schema/mule/ee/core""""        xmlns:doc=""""http://www.mulesoft.org/schema/mule/documentation""""        xmlns:jms=""""http://www.mulesoft.org/schema/mule/jms""""        xmlns=""""http://www.mulesoft.org/schema/mule/core""""        xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance"""" xsi:schemaLocation=""""  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd  http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd  http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd  http://www.mulesoft.org/schema/mule/httpn http://www.mulesoft.org/schema/mule/httpn/current/mule-httpn.xsd"""">        <flow name=""""amq-publish"""" >          <httpn:listener config-ref=""""HTTP_Listener_config"""" path=""""/utils/amq-publish"""" doc:name=""""Listener"""" allowedMethods=""""get""""/>          <ee:transform doc:name=""""Transform Message"""">              <ee:set-payload><![CDATA[%dw 2.0  %output application/json  ---  {   Id: 'scheduler IdValue',   channel : 'channelValue',   operationType : 'Contact',   createdDate : 'createdDateValue',   replayId: 'replayIdValue'  }]]></ee:set-payload>          </ee:transform>          <jms:publish config-ref=""""JMS_Config"""" destination=""""jmsTestUtils""""  doc:name=""""Publish"""">              <jms:message-builder >                  <jms:body>#[payload]</jms:body>              </jms:message-builder>          </jms:publish>      </flow>        <flow name=""""amq-consume"""" >          <httpn:listener config-ref=""""HTTP_Listener_config"""" path=""""/utils/amq-consume"""" doc:name=""""Listener"""" allowedMethods=""""get""""/>          <jms:consume config-ref=""""JMS_Config"""" destination=""""jmsTestUtils"""" doc:name=""""Consume""""/>          <ee:transform doc:name=""""Transform Message"""" >              <ee:set-payload ><![CDATA[%dw 2.0  %output application/json  ---  payload]></ee:set-payload>          </ee:transform>      </flow>    </mule>  {code}    *Console error*    """
"MULE-12240","Bug","Core: (other)",0,"Memory leak in embedded container","""Successive runs of the embedded container consumes the heap, please ask for a heap dump as its size is over 6 gb"""
"MULE-12253","Bug","sdk",3,"AllowInlineDefinition is true for interfaces without any known implementation","""If the user doesn't declare an XmlHint for the parameter, we use the default, which leads to an inconsistent Extension model that declares that an interface without any known implementation can be declared as an inline parameter.    Example of the `dataSourceRef` parameter of Db:    """
"MULE-12270","Bug","Transport: JMS",0,"JMS connector fails to receive CursorStreamProvider","""JMS Connector provider does not work with Cursor Streams  The following configuration fails:    """
"MULE-12267","Bug","Core: (other)",0,"NotificationUtils not checking for null parentElement","""Since the fix done in MULE-11358, repeated children will have null MessageProcessorPathElement as Parent. So, in NotificationUtils.addMessageProcessorPathElements, there could appear a parentElement as null (coming from AbstractInterceptingMessageProcessorBase), which should be checked.     The processors will still have path setted because this only happens to duplicates. """
"MULE-12265","Enhancement Request","Extensions API",5,"Provide support to declare typed restrictions on Scopes models","""There are some scopes that only make sense within other specific ones. This is the case of the error-handler within a flow or try, or the on-error elements within an error-handler. There is however no way to indicate this in the extension model."""
"MULE-12279","Bug","Extensions API",3,"Group already declared error when declared only once","""When building an Extension with @ParameterGroup(showInDsl=true) for a parameter and a connection provider of the same type, an error is shown with the following information:    The operation:      The connection provider:  """
"MULE-12278","Enhancement Request","sdk",8,"Create archetype for SDK extensions.","""Create a Maven Archetype for SDK extensions, this way users can scaffold a project from scratch and start working on it."""
"MULE-12277","Bug","Extensions API",3,"ParameterGroup validation is not taking into account the showInDsl attribute","""If you have 2 or more parameter groups of the same type, and you mark all to be shown in the DSL, the extension doesn't compile.    Method      The error shown is:      Since the second POJO is marked with the @ParameterGroup(showInDsl = true), no parameters with repeated names should be reported"""
"MULE-12276","Bug","Core: Logging",1,"MuleLoggerContext: getLogger inconsistent to hasLogger","""With MULE-9457 the method    was overridden but not      Additionally the naming in the Logger Map was changed.    Log4j2 original:  LoggerContextKey.create(name) = """"com.company...YourClass.org.apache.logging.log4j.message.ParameterizedMessageFactory""""    MuleSoft:  """"com.company...YourClass""""    This yields to hasLogger(name) returning false always.    Either update name in the map to LoggerContextKey.create(name) or override hasLogger as well."""
"MULE-12275","Bug","jms-module",8,"JMS publish and receive operation should be non-blocking","""This is lack of functionality as this is supported in 3.8"""
"MULE-12274","Bug","Core: Exception Handling",2,"Rename on-error-continue so it's clear flow does not continue with next processor","""Also means we can implement real continue later as is."""
"MULE-12272","Bug","Core: Exception Handling|Transport: JMS",1,"JMS Error not returned in response","""When an error is thrown by the JMS extension, you only get an error message but not the real cause of the error, meaning it's not useful for the user.  For example, using the following flow:        Will throw the following error *to the console* when no message is available:        But the *HTTP response* with error code 500 only contains the following:        The same behavior is seen in other operations."""
"MULE-12295","Enhancement Request","Test: Testing Framework",5,"Make MuleArtifactFunctionalTestCase work with Soap Extensions from the IDE.","""Currently extensions need the mule-plugin.json in order to get the correct ExtensionModelLoader to be loaded, When running with maven this is not a problem because maven generates the mule-plugin.json at compile time so its the testing framework is able to locate it and load the extension correctly, but when the extension is not compiled and does not have the generated resources in place the IDE will not generate those resources since that is configured in the components.xml.    Currently there is a method in the ExtensionModelLoaderFinder class that when the mule-plugin.json does not exist it will default to de DefaultJavaExtensionModelLoader().        This should be chaged so when there is no mule-plugin.json a mechanism is triggered in order to find the correect loader."""
"MULE-12294","Task","Core: (other)",0,"Fix package names on schedulers module","""Packages names on schedulers module are wrong, instead of having the org.mule.runtime.modules.schedulers prefix, they must use org.mule.runtime.module.scheduler"""
"MULE-12292","Bug","Extensions",5,"DB pool limit does not throttle the connections but throws error instead.","""The current default of the connections pool of the DB extension is 5, when testing with more, the requests fails with the message """"Could not obtain connection from data source"""", which does not correlates to the reality.    Also, this limit is not found on 3.6-3.8 connector, which uses one connection per call, as DB calls may take a long time, this value may need to be increased and also added to the migration doc."""
"MULE-12291","Task","Core: DSL processing",2,"ComponentModel config file name must point to the relative path file rather than the file","""Current ComponentModel has a method called org.mule.runtime.api.component.location.ComponentLocation#getFileName which points to the file of the modeled element when it should have the relative path to the file as it will be mandatory to properly look for it when debugging """
"MULE-12289","Bug","Build: Integration Tests",8,"Failing tests on Windows","""The following tests are failing on Windows 10 OS.     * mule-core module:  **  ExceptionUtilsTestCase.testFullStackTraceWithoutMessage  **  JdkVersionUtilsTestCase.testIsSupportedJdkVersion  **  JdkVersionUtilsTestCase.testRecommendedJdkVersion  **  JdkVersionUtilsTestCase.testValidateJdk5  **  PersistentObjectStorePartitionTestCase.skipAndMoveCorruptedOrUnreadableFiles  **  QueuePersistenceObjectStoreTestCase.queueFilesAreRemovedWhenSerializationFails    * mule-modules module:  ** XsltResultDocumentTestCase.writeToSameFileSeveralTimes  ** MuleResourceResolverTestCase.testsExistentFileSystemResourceWithBaseUri"""
"MULE-12307","Bug","Build: (other)",2,"make mule-app-plugins-maven-plugin to leave the pom file in the proper place","""The plugin mule-app-plugins-maven-plugin  Is leaving the pom file inside of mule-artifact folder which is not correct it should follow the maven convention   *META-INF/maven/groupid/artifactid/*"""
"MULE-12304","Bug","Core: Deployment",1,"Incorrect folder structure in internal Maven repository","""The Maven repository folder structure has a duplicate nested folder:  """
"MULE-12316","Bug","Core: Deployment",1,"Path resolution not working for repository location","""The path resolution with wildcards for the muleRuntimeConfig.maven.repositoryLocation is not working.    This cmd works:      But this one doesn't work:  """
"MULE-12314","Bug","sdk",8,"Content parameters of different type and same name should not be allowed","""*Content parameters of different type and same name should not be allowed*    * Nowadays we are allowing different content parameters of different type but with the same name, the problem of this is that a content parameter, due to child element support, will register a bean definition with a certain name and type.   * If another content parameter uses the same name, will probably use the bean definition from another type, this will lead to in runtime, depending on the configured type fail or not  """
"MULE-12310","Task","Core: Domains shared resources",8,"Add domain based system tests","""Currently, the tests that inherit from *DomainFunctionalTestCase* don't run in an isolated environment.    Apart from that, those tests have mocked services (for instance, the SchedulerService) instead of the actual service, which prevents from testing some scenarios."""
"MULE-12328","Bug","Core: Deployment",1,"Privileged access check is done differently on the container and test runner","""Artifact ID for plugins is being populated  differently when plugins are created on standalone or the isolated test runner.  On standalone mode, the artifact name is took from the plugin descriptor, while in the test runner the name is took from the full artifact maven ID (groupId, artifactId, version, etc)"""
"MULE-12325","Task","Core: Routing / Filters",8,"Review Scatter-gather UX","""Need to review the UX of SC in Mule 4:    * Review which DW expressions should be use to obtain the result of each route  * When a route fails, review how to get both the error and the exception  * Apply changes  * Run all tests"""
"MULE-12322","Bug","Core: Non-Blocking",8,"Flow should not continue processing in non-blocking processor response thread.","""Flow should not continue processing in non-blocking processor response thread."""
"MULE-12321","Bug","Modules: HTTP",2,"When an app with OAuth Client Credentials can't connect at deployment it doesn't show the HTTP requester response as in 3.x","""When an app with OAuth Client Credentials doens't can connect at deployment it doesn't show the HTTP requester response as in 3.x"""
"MULE-12320","Bug","Core: Deployment",8,"App that fails deploying take too much time to show the error","""App that fails deploying take too much time to show the error. For example when you don't set a placeholder for the port or with ouauth when it can't obtain the token in client credentials."""
"MULE-12345","Bug","Core: Deployment",2,"Maven depenency resolution doesn't output logs ","""When an app is being deployed and Mule starts downloading its dependencies from a remote repository, no log is being displayed about what is going on, and the user is left with the message:  """
"MULE-12342","Bug","Extensions API",0,"Sources may not receive onSuccess/onError","""In ModuleFlowProcessingPhase there are two consumers (for success and error) to send the events after a flow ends. If it's a source, then onSuccess/onError are dynamically called respectively to produce a response (like for the http extension).    Now, inside getSuccessConsumer and getErrorConsumer the parameters required for each invocation are obtained through callbacks (see MessageSourceResponseParametersProcessor) which may for instance run dataweave. These expressions can fail for some and not all events, and when they do, the corresponding source callback won't be invoked.    This is more problematic for the case of """"error"""", as a failure on """"success"""" will still try to call the error consumer. When onError parameters can't be obtained, the source is not notified and can't complete processing (for instance, http needs to tell grizzly that the request was handled - with or without emitting a response -, otherwise the extension will stall).    A possible solution would be another callback, like onComplete that will always be called with the SourceCallbackContext and no extra parameters. Another one could be making dynamic parameters nullable and let the same onError handle them."""
"MULE-12372","Bug","Transport: JMS",1,"Incorrect error mapping for SecurityException","""When a {{java.lang.SecurityException}} is thrown on a jms:publish operation, this error is wrapped in a {{TypedException}} with type """"PUBLISHING"""", which doesn't allow the user to handle properly this type of errors.    Security exceptions should have their own error types or be mapped to the SECURITY type provided by Mule.    Log:  """
"MULE-12371","Bug","Transport: JMS",3,"Hidden error messages on JMS operations","""When an error is thrown by the JMS Publish operation, the actual error is wrapped inside a generic error which hides the actual cause.  Example:      The only way to access the actual cause of the error is using: *{{error.cause.cause.message}}*, which is not user friendly.  The cause of the error should be available via: *{{error.description}}*    Stacktrace of the error:  """
"MULE-12370","Task","sdk",1,"Cherry pick M5 fix for Qname and infrastructure model property","""Cherry pick M5 fix for Qname and infrastructure model property"""
"MULE-12369","Bug","Core: Transformers",3,"Runtime should know how to transform java 8 dates to java 7 dates","""(complete)"""
"MULE-12368","Enhancement Request","Core: Streaming",5,"CursorProvider management should happen on the pipeline","""(complete)"""
"MULE-12367","Enhancement Request","Modules: File",3,"File and FTP connectors should not require match-with","""the match-with wrapper should not be necessary. """
"MULE-12364","Task","Modules: (other)",8,"Review use of boxed booleans in extensions","""Go through all extensions and remove triple state booleans"""
"MULE-12363","Bug","sdk",3,"Missing CDATA on import of ArtifactDeclaration","""Missing CDATA on import of ArtifactDeclaration"""
"MULE-12362","Task","Core: (other)",0,"mule-core should use same asm library as the one packaged with distribution","""core has a different version of asm therefore tests are running within that version instead of the one that finally goes to the distribution."""
"MULE-12361","Enhancement Request","Core: Expressions",8,"Update ExpressionManager to accept expressions that resolves to null when indicating the expected DataType","""Update ExpressionManager to accept expressions that resolves to null when indicating the expected DataType"""
"MULE-12360","Bug","Modules: XML, XSLT, XPath, SXC",8,"XsltTransformer should close underlying InputStream when using XMLStreamReader ","""As Javadoc says the underlying input stream is not going to be closed, therefore the transformer should take care of this:  http://docs.oracle.com/javaee/5/api/javax/xml/stream/XMLStreamReader.html"""
"MULE-12358","Task","Core: Non-Blocking",2,"Reduce verbose output of ProcessingStrategy test cases","""Reduce verbose output of ProcessingStrategy test cases"""
"MULE-12357","Task","Core: Non-Blocking",2,"Upgrade reactor to version 2.0.7","""Upgrade reactor to version 2.0.7"""
"MULE-12356","Bug","Test: Testing Framework",2,"Test Infrastructure doesn't handle services correctly","""Consider the pom for extension-spring-support. The mule-service-http artifact is listed as a dependency twice:    1) first as a provided service  2) as a test service    This leads to the following problems:    * If ran as is, an exception is thrown saying that there're two bean definitions for the HttpService  * If the test dependency is removed, then the test fails with NoClassDefError of the HttpService  * The the test dependency is kept but not as service, the first problem appears again.    In order to get it working, I had to comment a validation on org.mule.runtime.config.spring.SpringMuleContextServiceConfigurator#createCustomServices which should be bring back when this issue is fixed."""
"MULE-12355","Bug","Extensions API",1,"OAuth operations are always executed in a blocking manner","""In order to refresh tokens and retry operations when they throw AccessTokenExpiredException, the OAuthOperationMessageProcessor class is written in a way which always forces the operation to block, even if they're not blocking.    This should be refactored so that non blocking OAuth operations are in fact executed in a non blocking manner"""
"MULE-12386","Bug","Core: (other)",1,"java.util.MissingFormatArgumentException when no pom is found for an extension","""When the maven client fails to get a pom from jar, an exception is thrown:  """
"MULE-12382","Bug","Modules: WS Consumer",8,"WSC fails to parse local XSD imports.","""WSC fails to parse local XSD imports."""
"MULE-12381","Bug","Core: Deployment",2,"Unclear error message when no Maven repository is configured","""When you deploy a lightweight application and you don't configure any Maven repository to pull the dependencies from, The app deployment fails with the following error:        If no Maven repository is configured, the user must know that they are missing that configuration with a clear error message"""
"MULE-12376","Task","Core: API",0,"Remove transaction constraint classes","""Classes from org.mule.runtime.core.transaction.constraints are only referenced on org.mule.runtime.core.api.transaction.TransactionConfig API but never really used. Remove them"""
"MULE-12399","Bug","sdk",3,"Validate Pojos used as Subtypes","""Imagine you have a base subtype relationship between pojo A and B (A is the parent and B the child).    You use your base type A as a parameter or return type, what ends up happening is that all the SDK validations are run against A (for instance, having all the getters for the field), but no validation is run against B.    In all the situations that a base type is validated, we should also validate its subtypes."""
"MULE-12395","Bug","Core: (other)",0,"Cannot load extension model in Windows","""Tooling client fails to load extensions on Windows machines because the path are not written correctly.    """
"MULE-12389","Enhancement Request","Core: (other)",1,"Move Pooling Profile to ""Pooling"" Tab","""Instead of putting Pooling Profile on the Advanced Tab, it should be on a separate tab named Pooling and not in a group."""
"MULE-12406","Bug","Core: Services",1,"HTTP, Oauth and Soap services have wrong package name","""I came to realise that the package of those services (http, oauth and soap) have package """"org.mule.services"""" instead of """"org.mule.service"""". We need to fix that."""
"MULE-12405","Enhancement Request","Modules: WS Consumer|sdk",5,"Use MetadataCache for SoapOperationMetadata in WSC ","""Use MetadataCache for SoapOperationMetadata in WSC, since the metadata is resolved for the whole operation but retrieved by part (headers, body, attachments).   The cache allows us to save the operation metadata for the first elemente resolved and let the other two use the cached value instead of re-introspecting the wsdl.    In order to do this we should provide a json serializer for the SoapOperationMetadata directly from the soap-api, and use that serialized value as the stored value in the cache,  """
"MULE-12404","Bug","sdk",5,"If an error occurs resolving the @OnSuccess parameters the error is never exposed","""*If an error occurs resolving the @OnSuccess parameters the error is never exposed*    * The case comes when the SDK is trying to resolve the parameter's values, and for example one of the values is resolved from an expression and this expression is invalid.  * When this happens no exception is exposed, no error log information will be displayed.  * If the *listener* has an {{@OnError}} method, this will be called, if not, no method will be called and the Mule Developer won't see any exception.  * In case that the resolution error occurs on the {{@OnError}} method, the following log line will be displayed, which is totally different from any other normal Mule Error"""
"MULE-12403","Bug","Core: (other)",0,"Cannot load extension model in Windows, pom.xml not found","""The tooling client is failing to locate the pom.xml file, and because of this, it cannot load the extension model. We checked the jar in the local repository, and the pom.xml existed under the folder maven/org.mule.modules/mule-module-sockets    """
"MULE-12407","Task","Core: Expressions",2,"Define how to deal with splitting of application/xml content","""Currently there is no way to do a foreach or splitter over an String with application/xml using an expression that may return several XML parts. We need to define how it should work with XML.    This issue must make the test annotated with Ignore(""""MULE-12407"""") pass"""
"MULE-12420","Task","Modules: (other)",1,"Move scripting plugin to a separated github repository","""Move scripting plugin to a separated github repository so it can have a release cycle different from the container."""
"MULE-12414","Bug","Core: Event/Message",2,"Event Builder allows null message","""Event builder must validate that the message is not null when creating the event."""
"MULE-12429","Bug","Core: Streaming",1,"Streaming buffer is wrongfully exceeded","""When the streaming buffer size matches the payload size exactly, it wrongfully throws BufferSizeExceddedException."""
"MULE-12427","Bug","Core: Classloading",0,"Application should expose only shared resources to plugins","""Resources on the app which come from not shared libs are still found by plugins.   For example in compatibility IntegrationTestCaseRunnerConfig, if it shares """"org.mule.tests:mule-tests-unit"""" and """"org.mule.tests:mule-tests-functional"""", then for some reason, the plugins classloaders try to load the org.mule.test.config.dsl.ParserComponentBuildingDefinitionProvider which is defined on test-integration, which is not exported.     Apparently the problem is that the app exports META-INF/services/org.mule.runtime.dsl.api.component.ComponentBuildingDefinitionProvider, because it is part of mule-test-functional. That resource is also present on mule-test-integration."""
"MULE-12438","Bug","sdk",5,"Cannot override default value for explicit primary content","""While making some changes in HTTP, I annotated with @Optional(defaultValue = """"#[error.description]"""") an attribute already annotated with @Content(primary = true). Though the extension model was correct, when resolved on runtime #[payload] was used. Furthermore, when removing the explicit primary thing, no expression was evaluated and null was resolved (perhaps because there was no other primary?)."""
"MULE-12434","Bug","Core: (other)|sdk",5,"Poll extension model is invalid","""Poll extension model is invalid, thus preventing tooling from using the ArtifactDecalration serializer.    The new model will eliminate the need of an schedulers module and unify both strategies as a subtypes case. Final DSL will be:       """
"MULE-12433","Bug","Core: Streaming",1,"CursorStream should throw IOException","""CursorStream throws an IllegalArgumentException when assertNotDisposed is called during a read or seek, which causes trouble because those ops are supposed to throw IOException, meaning such an error will not be handled properly most likely."""
"MULE-12430","Bug","Core: Non-Blocking|Core: Routing / Filters",2,"Scatter-gather router does not handle errors correctly and invokes error handler multiple times","""Scatter-gather router does not handle errors correctly and invokes error handler multiple times"""
"MULE-12603","Enhancement Request","Modules: HTTP",0,"Improved HTTP layout","""Based on user studies which we've done, we need to improve the layout of the HTTP connector as people were not able to get successful with it.     Details TBD """
"MULE-12454","Enhancement Request","Core: API",1,"Redefine expression language API","""Core module defines ExpressionLanguageExtension interface that can be implemented on external modules to provide extensions to MEL expression language.    There are currently two extensions provided on validation module and batch EE module.    In order to remove MEL from core, this API has to be moved to a separated module that can be referenced on the mentioned modules     """
"MULE-12452","Bug","sdk",5,"Errors thrown from SDK extensions are not handled properly ","""Throwing an java.lang.Error such as an Assertion error from inside an SDK extension get's wrapped in an Exception inside *org.mule.runtime.module.extension.internal.runtime.exception.ExceptionHandlerManager#wrapInException*    This is causing that the source of the failure gets to the error lookup as an exception instead of the original Error.  Which in turns causes error handler to execute because the error is not mapped as critical """
"MULE-12451","Task","Test: Testing Framework",1,"Cleanup test dependencies from poms","""Change dependencies to core-tests for dependencies to test support modules  Remove transient test dependencies"""
"MULE-12448","Bug","sdk",8,"Sources error handling is inconsistent","""When changing the default error handler, it became clear that the HTTP listener error-response had to be updated which uncovered the fact that source error handling is extremely inconsistent. Under some scenarios error handling is called, under others the source handles the error directly while worst of all sometimes the app hangs. We need to review all scenarios and settle on the behaviour. Focus should be on sources using the default error handler."""
"MULE-12465","Bug","Core: (other)",2,"Thread contention on System.getProperty in ModuleFlowProcessingPhase","""Thread contention on System.getProperty in ModuleFlowProcessingPhase"""
"MULE-12459","Bug","Extensions API",1,"OAuth extension fails if it doesn't provide default set of scopes","""if defaultScopes are not provided on the @AuthorizationCode annotation, then the extension fails"""
"MULE-12457","Bug","soap",1,"Remove distribution management from Soap parent pom.","""Remove distribution management from Soap parent pom so that childs do not inherit that configuration."""
"MULE-12455","Bug","Modules: Email",3,"Hidden error cause in E-mail connector","""When the e-mail connector throws an UnsupportedDataTypeError, the actual cause of the error is not easily available to the user:    Current error message is:  {{Error while sending email: IOException while sending message (org.mule.extension.email.api.exception.EmailException).}}    But the real and more useful error message can be found in the stacktrace:    {{javax.activation.UnsupportedDataTypeException: no object DCH for MIME type application/json}}    Complete log:  """
"MULE-12467","Bug","sdk",5,"Collection/Map DataTypes lack generics","""Changes were recently introduced to indicate the EL the expected DataType of an evaluation so that when a parameter is resolved the EL can do type coercion or fail accordingly if necessary. We have also introduced the MapDataType. However, this is not being considered and Collections/Maps lack the generic data that would allow the EL to know that all items on a list should be ints, for example, or that the keys of a Map should be Strings and the values some POJO."""
"MULE-12466","Enhancement Request","Extensions API",1,"AuthCodeState should give more information","""Although at first it was thought as unnecesary, the AuthorizationCodeState needs to also provide access to:    * The authorizatio url  * The access token url  * The consumer key  * The consumer secret"""
"MULE-12485","Task","Modules: HTTP",2,"Remove listener interpretRequestErrors feature","""The interpretRequestErrors feature was mistakenly conceived as a way to deal with proxies where the request would fail. However, a proper proxy should not treat any status code as a failure but propagate that response (using a success status code validator from 0 to 599). We need to remove the feature since it's useless and will only create confusion."""
"MULE-12483","Task","Modules: HTTP",2,"Old javax.mail bundled with HTTP connector","""HTTP connector bundles javax.mail 1.4.3 which was released in 2010. We must include a newer version. (1.5.6 released in 2016)."""
"MULE-12480","Enhancement Request","Extensions API",5,"support custom http:listener in OAuth enabled extensions","""Support custom http listener in the callback definition"""
"MULE-12477","Bug","Core: Streaming",8,"Additional streaming performance work","""Take additional profiling sessions, Tackle additional issues that arise."""
"MULE-12476","Task","Core: Streaming",5,"Set definitive default streaming buffer sizes","""Determine the best streaming buffer sizes defaults and impact the code"""
"MULE-12475","Bug","mule4|sdk",0,"Support smart connectors that rely on EE elements","""A smart connector might rely on some EE elements (such as *transform*, *cache*, or any other EE plugin) in which case the tooling client must be responsible of loading the needed JARs to be sure all resources are available.    Right now, it fails discovering the schemas for the DW *transform* element, but this will be an issue if some Java services are EE only, in which case Java SDK connectors will fail as well to load the extension model.    This jira blocks MULE-12440"""
"MULE-12474","Enhancement Request","Modules: WS Consumer",3,"WSC: Improve authentication representation in the extension","""Right now, in order to represent the different authentication method supported by the WSC, the extension is using a list with subtypes.    This is not an accurate representation of what the users can do, as they should always configure 1 of each subtype, and they should not be allowed to configure more than once each.    If we change the list of subtypes, to single optional fields for each type, not only we are reflecting what the users should be doing, but improve the experience when configuring it."""
"MULE-12473","Bug","Modules: Email",3,"email config elements should have the -config suffix","""The email config elements should end with the -config elements. The SDK should actually automatically enforce this"""
"MULE-12495","Task","Transport: HTTP(S) / Jetty",2,"Remove mule.tls.disableSystemPropertiesMapping functionality","""Aether configuration requires using the JVM default trust store. Since this runs at the beginning of all tests, it can interfere with the tests verifying the use of mule.tls.disableSystemPropertiesMapping, a property introduced for backwards compatibility that makes mule map the HTTP transport trust store as a JVM property (java.net.ssl.trustStore) and makes no TLS configuration required for HTTP clients in tests. We need to get rid of that property and functionality since it's wrong (it was only added in case clients depended on it). """
"MULE-12494","Task","Core: API",0,"Move ObjectStore to Mule API","""Move ObjectStore to API in order enable the new object store connector"""
"MULE-12492","Bug","Core: (other)",2,"Tooling client is not deleting the temporal apps","""It seems applications cannot be dispose because keeps some files in <mule instance>/tmp/tooling/<app name>.     Note: I am in windows OS."""
"MULE-12491","Task","Core: (other)",2,"Validate loading extension models with different loader types","""Plugins could use different loaders for ExtensionModels, this ticket is about validating that those loaders work on Tooling Client."""
"MULE-12490","Bug","Core: (other)",8,"Issue with mule-config.json","""In order to use the lightweight package we need to configure the mule instance with the settings.xml and m2 repo.  Doing this using the system properties works as expected        However trying to use the mule-config.json in the conf folder, it seems does not work because the application model cannot be build.    Note: I am testing this in windows.        """
"MULE-12489","Task","Build: Integration Tests",8,"Review ignored distribution tests whose issues are in status resolved","""*Tests in scope*  * DbTestCase#addBlob()  * HttpRequesterTestCase#testHttpForEachWithDifferentKindOfPayloads()  * HttpRequesterTestCase#testHttpsWithBasicAuthObtainingJsonAndThenApplyingTransformWith5mbInput()   * ToolingServiceTestCase#connectivityTestingUsingJdbcDriver()    *Status*  [Ignored distribution tests review status|https://docs.google.com/a/mulesoft.com/spreadsheets/d/1mbatcGVq_lxyks5xDdVBCMFpbsZob1aCdgLklzwellM/edit?usp=sharing]  """
"MULE-12488","Enhancement Request","Modules: WS Consumer",5,"Soap Connect: Give the capability to inject custom headers to the requests.","""Give the capability to inject custom headers to the requests."""
"MULE-12502","Bug","Core: Routing / Filters",0,"Filter inside When changes When expression","""SE-5854  If a Filter is defined inside a When element, then the Filter expression is set as the expression in the When element.  That is ok, since there are tests that check that functionality but the problem arises when """"expression"""" is already set inside When and it get replaced.  Besides, the expression change will be made with the Filter in any position inside When children.    This happens when the parent of the Filter element is checked in FilterRefDefinitionParser:56 and no MessageProcessorWrappingBeanAssembler is created for when beanAssembler.copyBeanToTarget() (ParentDefinitionParser:66) is called.      """
"MULE-12501","Task","Test: Testing Framework",0,"Make MuleProcessController extensible","""This is needed in order to be able to do system tests of EE specific functionality (i.e.: server plugins)."""
"MULE-12500","Task","Modules: XML, XSLT, XPath, SXC|mule4",8,"Remove endorsed XML libraries in 4.x","""Make the same changes from MULE-12245 in Mule 4.x. It shouldn't be very different, but there are more repositories to change."""
"MULE-12499","Bug","Core: (other)",8,"Cannot retrieve metadata from an EE processor","""As of today, the tooling client is not being able to provide definitions for core EE message processors and this makes it impossible to retrieve DataSense for an EE processor, such as DW transform, as the component is not properly loaded and the component location has the form {{flowName/0}} instead of {{flowName/processors/0}}. This also creates a shift in the indexes used for the flow processors in general affecting requests for other components in the same flow."""
"MULE-12498","Bug","Build: Distributions",1,"Groovy should not be loaded on the container classloader","""Groovy jar is being deployed on MULE_HOME/lib/opt but is not used on the container. That jar is used in order to run the launcher script only, so it should be located in a lib folder that is not included in the container classloader.  """
"MULE-12516","Bug","sdk",3,"WebService consumer should receive InputStreams as the inputs of the Invoke operation","""*WebService consumer should receive InputStreams as the inputs of the Invoke operation*    * This should be done to prevent performance issues, due that receiving a String will make load the entire String on memory instead of consuming from an InputSream  * The usage of Strings will produce issues in transformations of different mimeTypes"""
"MULE-12515","Bug","Modules: Email",3,"Email Send operation should receive a TypedValue<InputStream> instead of a EmailBody","""*Email Send operation should receive a TypedValue<InputStream> instead of a EmailBody*    * The usage of the {{EmailBody}} produces issues in performance because the {{content}} is a {{String}} the entire content will be loaded on memory.  * Set manually the {{encoding}} and {{mimeType}} is not consistent with the rest of the connectors that takes the {{mimeType}} from the given value (HTTP, JMS)  * Using String as the content will produce issues when transforming from others mimeTypes  """
"MULE-12513","Bug","Modules: Email",2,"NoSucheMethodError while using email connector","""Using new email connector in a try it test case (tooling), results on NoSuchMethodError, because javax.email package is defined in Boot packages, and email connector needs a newer version of it.    App:    """
"MULE-12509","Task","Build: (other)",8,"Create a single Jenkins Pipeline running all projects to validate feature changes","""Create a single Jenkins Pipeline running all projects to validate feature changes"""
"MULE-12528","Bug","Extensions",2,"Race condition when stopping an ExtensionSource while it's being recconnected","""Reconnection on ExtensionSource must not be attempted if a stop is in process."""
"MULE-12527","Bug","Core: (other)",2,"ProcessorInterceptor API does not send componentLocation","""The API org.mule.runtime.api.interception.ProcessorInterceptor does not send the componentLocation of the processor being intercepted to each of the methods of the API.    These things are necessary at the point of interception to decide if action should be taken or not."""
"MULE-12526","Bug","sdk",3,"HTTP Listener source allows config-ref as optional","""HTTP Listener source allows config-ref as optional    <?xml version=""""1.0"""" encoding=""""UTF-8""""?>  <mule xmlns=""""http://www.mulesoft.org/schema/mule/core""""        xmlns:xsi=""""http://www.w3.org/2001/XMLSchema-instance""""        xmlns:http=""""http://www.mulesoft.org/schema/mule/http""""        xsi:schemaLocation=""""          http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd          http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd"""">        <http:listener-config name=""""lisConfig"""">          <http:listener-connection host=""""0.0.0.0"""" port=""""8010"""" protocol=""""HTTP""""/>      </http:listener-config>        <flow name=""""main-http"""">          <http:listener path=""""/"""" />          <logger message=""""#[payload]""""/>      </flow>    </mule>  """
"MULE-12525","Bug","sdk",8,"ArtifactDeclaration should represent the ParameterGroups model","""ArtifactDeclaration should represent the ParameterGroups"""
"MULE-12524","Bug","Extensions",5,"Soap Connect fails to dispose http clients when more than one service is connected","""When the ForwardingSoapClient loads more than once SoapClient it leaks resources cause is not disposing properly the related resources while doing the onRemove() or disconnect().    """
"MULE-12521","Task","Service: HTTP",2,"Expose servers protocol","""In order to establish a base url for a given server we need to expose it's protocol (ip and port are already available)."""
"MULE-12520","Bug","Extensions API",3,"Serialisation of transform operation fails with custom parameters","""The artifact declaration serializer fails when attempting to serialize a declaration containing a transform operation that is configured with custom parameters."""
"MULE-12519","Bug","Core: Concurrency / Threading",2,"SchedulerService should not use ThrottledScheduler if maxConcurrency > pool size","""Currently ThrottledScheduler introduces significant thread contention doe to synchonrized block. This can potentially be improved, but it's best to avoid using ThottledScheduler completely when maxConcurrency > poolSize"""
"MULE-12518","Bug","Core: Concurrency / Threading",2,"SchedulerService does not support queue size of 0","""SchedulerService does not support queue size of 0"""
"MULE-12530","Bug","Build: Libraries / Dependencies",1,"Upgrade commons-beanutils to 1.9.3","""Upgrade commons-beanutils to version 1.9.3 to leverage the latest bugfixes."""
"MULE-12541","Task","Build: Libraries / Dependencies",1,"Upgrade log4j2 to 2.8.2","""Upgrade log4j2 to 2.8.2"""
"MULE-12538","Task","Core: Configuration",1,"Configure Garbage Collection parameters for JDK 8 in Mule 4","""Starting with Mule 4.0, we only support Java 8 for running Mule.  Garbage collection configuration needs to be optimized to run with JDK 8.  The following messages need to be eliminated:  """
"MULE-12537","Bug","Extensions: Maven Plugin",0,"Smart Connector source and package project must be as similar as a mule application as possible","""The structure of any smart connector must be as similar as possible as a mule application, which means it must have a *mule* folder where all the XMLs are dropped from.  Today's project's folder has the following:    when ideally should be        and the generated package must also respect that convention (which means that the JAR file will have a *mule* folder with all of its files there, and the deployment must be able to look for them accorindly)"""
"MULE-12534","Bug","sdk",5,"When using TypedValue<Object> the SDK provides a CursorProvider instead of a Cursor","""*When using TypedValue<Object> the SDK provides a CursorProvider instead of a Cursor*    * This affects JMS and HTTP  * HTTP also has a bug when consuming the stream, because it returns the {{@OnSuccess}} method before consuming the entire stream.    h2. EXAMPLE    JMS: JmsMessageBuilder      In this case, if the payload is a {{CursorStreamProvider}} the SDK should not inject a {{TypedValue<CursorStreamProvider}}, it should open a new cursor and return a {{TypedValue<InputStream>}}    The same happens in HTTP, but as HTTP when an unknown value is given, it will use the transformation service, so it will not suffer this issue but is not the correct way to do it.    """
"MULE-12570","Bug","sdk",3,"Wrong ExtensionModel generation when adding errors to an operation","""See test ExtensionModelJsonGeneratorTestCase. When validating the generated extension model for the marvel extension there are additional error information added to operations unrelated to the one with error types."""
"MULE-12567","Epic","Core: Expressions",0,"Performance improvements on DW integration","""Echo scenario is a 6% faster with mel instead of default dw."""
"MULE-12562","Enhancement Request","Core: (other)",1,"Reduce logging level of certain components","""Mule team, can we move the following messages to debug level:  * AbstractDataTypeBuilderFactory  * SpringXmlConfigurationBuilder"""
"MULE-12561","Task","Tooling Client",8,"Improve datasense performance","""Currently the whole cycle of executing datasense from studio is taking too long. We need to profile a little bit to improve the experience  """
"MULE-12560","Bug","Core: Transformers",2,"Improve performance of ObjectToString transformer","""The approach used to convert InputStream to String in 4.0.0 has been changed and is less performant than in 3.x.  Revert this change and add micro-benchmark to confirm."""
"MULE-12559","Bug","Modules: HTTP",2,"BlockingTransferInputStream should implement read(byte[] b, int off, int len)","""BlockingTransferInputStream should implement read(byte[] b, int off, int len)"""
"MULE-12556","Task","Build: Libraries / Dependencies",2,"Upgrade opensaml to 2.6.4","""Upgrade opensaml to 2.6.4 in the SOAP service."""
"MULE-12588","Enhancement Request","Extensions API",8,"Support Sources that send asynchronous responses","""Some sources such as <http:listener> send responses asynchronously. When the response content is an InputStream and repeatable streams are enabled, there's a race condition betweent the runtime that closes the CursorStreamProvider (mainly because it doesn't know that http:listner is still asynchronously consuming the stream) and the listener which is actually replying.    To do so, we need to support asynchronous response sources, so that the event is not completed until the source has actually finished sending the response."""
"MULE-12579","Enhancement Request","Extensions API",5,"Create a StreamingHelper for operations","""We need to provide tools for handling repeatable streaming resources which are embedded into structures of arbitrary complexity"""
"MULE-12576","Task","Core: (other)",2,"Tooling Client Integration test for email ObjectStreams","""After MULE-12513 is fixed, finish ignored test in TryItTestCase"""
"MULE-12574","Enhancement Request","sdk",3,"Add ""kind"" to Source and ErrorHandlers in ExtensionModel serialization","""Add """"kind"""" to Source and ErrorHandlers in ExtensionModel serialization.  Currently, not all the ComponentModels are serialized with its kind, it would be better to declare the explicitly even if it's more verbose."""
"MULE-12573","Task","Core: (other)",2,"Extract embedded-api to its own repo","""The embedded API is versioned differently than the impl, so it must be in its own repo to allow for an independent release lifecycle."""
"MULE-12596","Bug","Core: (other)",2,"Tooling client must dispose unused apps after certain threshold","""If tooling client connection fails (for example), the application could still be up in the agent side, indefinitely. """
"MULE-12594","Bug","Modules: HTTP",8,"HTTP Listener: cannot create listeners for paths when one starts with the other","""Attempting to create a pair of http listeners like this:        I get an error like    """
"MULE-12945","Task","Build: Distributions",2,"Branch all the repositories for Mozart Beta ","""Branch all the repositories for Mozart Beta """
"MULE-12616","Task","Modules: HTTP",1,"Avoid exposing API config parameter","""Need to comment out the API config stuff so that's it's not visible until we do it."""
"MULE-12614","Enhancement Request","Core: Services",2,"OAuth service must support multitenancy between the same ObjectStore","""It is needed to hold tokens from different tenants on the same object store. It is needed for the OAuth service to optionally allow specifying prefix (and maybe even suffix) for the resorceOwnerId."""
"MULE-12613","Task","Core: Deployment",1,"Support patching module jars","""On current version of Mule, the container fails do start when it detects two modules with the same name.  This check make us unable to deploy patches jars for modules.  While a full patching solution is needed, we need at least a quick workaround to make this possible."""
"MULE-12620","Bug","Modules: FTP",5,"Connectivity test for SFTP doesn't show actual error","""Connectivity test for SFTP doesn't show the resolved path where it is trying to connect to.  You know that the connectivity test failed, but in no place of the stacktrace you can see which is the actual path trying to be connected. This means that if the path has placeholders or expressions, you are not able to properly troubleshoot the error.    """
"MULE-12619","Bug","sdk",1,"ExtensionModel declarer allows invalid XML naming","""It's possible to use the HasOperationDeclarer (or any other declarer if I'm not mistaken) to create invalid XML components from the ExtensionModel by parameterizing wrong values, such as    `declarer.withOperation(""""this is not << XML valid and yet works"""");`,     Ideally, the API should either blow up throwing an exception or hypenizing the String (if possible, as parameterizing empty string is also invalid).  Despite this issue is hard to reproduce from a Java connector, if @Alias is used as `@Alias(""""jaja <> le23 23 23 """"` it will end up in wrong XML namign operations, configurations, parameters, etc.,     """
"MULE-12635","Bug","Tooling Client",2,"Maven Configuration is not taken from the tooling client","""While using the org.mule.tooling.client.internal.DefaultToolingRuntimeClientBuilder , when users override the maven configuration, this information is not propagated to the org.mule.tooling.client.api.extension.ExtensionModelService, making it impossible to solve extensions that don't use the default tooling client configuration"""
"MULE-12634","Bug","Core: (other)",2,"Add a getNamedParts() method in MultiPartPayload","""MultiPartPayload currently has a getPart(String partName), but that is not usable from within DataWeave.    DataWeave needs a proper getter method that returns a Map."""
"MULE-12633","Task","Core: (other)",8,"Create BOM for EE and use it on Tooling ","""Currently, we are using a POM on tooling side that includes all modules. We should have a differentiated POM for EE version (so eventually CE version of Tooling will run on a CE version of the Agent)"""
"MULE-12629","Bug","Extensions API",3,"Cannot have OAuth multitenancy in the same ObjectStore","""(insert)"""
"MULE-12628","Task","sdk",2,"Rename scheduler components","""Rename `scheduling-strategy` inner child element to reduce verbosity and avoid redundancy.    `fixed-frequency-scheduler` -> `fixed-frequency`  `cron-scheduler` -> `cron`"""
"MULE-12627","Task","Extensions API",5,"Make soap connect EE ","""Make soap connect EE """
"MULE-12626","Task","Core: (other)",1,"Remove evaluateExpression from notification","""After Studio moves to the interception API, we should remove our method MessageProcessorNotification#evaluateExpression (and corresponding one in EnrichedNotificationInfo)."""
"MULE-12654","Task","Tooling Client",2,"Improve application URL supplier calls in DataSense requests","""For every datasense request, the supplier is being call 3 times.     1 for extensions calculations,   1 for datasense static fetching,   1 for datasense dynamic    We need to reduce the amount of times that we are fetching the zip. """
"MULE-12652","Task","Build: Integration Tests",0,"Fix flaky ExceptionHandlingTestCase","""The problem is between the persistent object store and the deserialization mechanism."""
"MULE-12651","Enhancement Request","Core: (other)",8,"Extensions resolution should fetch transitive dependencies","""When an application have http or ftp as dependencies it is not solving sockets when fetching extensions within tooling client or deploying an application."""
"MULE-12649","Task","Core: Deployment",8,"Deployment should also consider remote repositories defined in pom.xml","""There will be cases where applications packaged on lightweight mode would need to download dependencies from remote repositories that are declared in the same pom.xml. This is a best practice when working with Maven and it should be handled by deployment module."""
"MULE-12645","Task","Core: API",1,"Use standard license header mechanism in mule-api","""Use standard license header mechanism in mule-api as it's done in mule."""
"MULE-12641","Bug","sdk",3,"If @Errors annotation is not defined, the extension doesn't get enriched by any kind of error","""*If @Errors annotation is not defined, the extension doesn't get enriched by any error*    * Nowadays the extension can be enriched automatically by several kinds of errors types automatically, e.g., CONNECTIVITY, SOURCE, etc.  * But those are not being populated if the {{@Errors}} annotation is not used."""
"MULE-12669","Bug","sdk",1,"Fix ConfigurationBasedDslElementModelSerializerTestCase","""Fix ConfigurationBasedDslElementModelSerializerTestCase"""
"MULE-12666","Bug","mule4",2,"Missing identifier in ComponentPath for OnError components ","""The component path for an error handler with an on-error child is missing the `onError` identifier"""
"MULE-12664","Bug","sdk",5,"Fix SOAP Connect message builder to match WSC builder","""Fix SOAP Connect message builder to match WSC builder.    - Add wrapper element with inline group  - Rename `request` to `body`"""
"MULE-12661","Task","Core: (other)",1,"Fix ArtifactSerializationServiceTestCase tests","""ArtifactSerializationTestCase tests for json have been failing for many builds"""
"MULE-12659","Bug","Extensions API",3,"ResourceOwnerId should be optional","""The resourceOwnerId parameter in the OAuth connection providers is set as required but should be optional and have no default.    Then, when the OauthConncetionProvider tries to use it to fetch the access token from the Dancer, it should consider the possibility of that parameter being null."""
"MULE-12657","Task","Tooling Client",8,"Resolve extension models internally in tooling client services","""Resolve extension models internally as it's being done in the datasense service so tooling can stop depending on extension models to consume tooling client services. """
"MULE-12656","Bug","sdk",5,"Descriptions are not populated in the extension model","""The description for some parameters is not being populated.    For example in the e-mail connector, several parameters and operations have no description.     """
"MULE-12674","Bug","sdk",5,"SDK fails to create Parameter Group if this contains a parameters of TypedValue<T> and a T","""*SDK fails to create Parameter Group if this contains a parameters of TypedValue<T> and a T*    * if a Parameter Group has the following parameters:    The SDK will fail to build this construction due that {{val2}} will use a ValueResolver to create {{TypedValue<InputStream>}} instances or vice versa.    * The origin of this problems surges in {{ExtensionObjectTypeHandler}}, where if a TypedValue field is found, the handler will unwrap the generic type and set the field type of that generic type, example: {{TypedValue<String> -> String}}, and then in the SDK to know that this field was originally a {{TypedValue}} to be able to build it correctly, the {{TypedValueTypeAnnotation}} to know that that field is not a {{String}}, but a {{TypedValue<String>}}.  * Due that JavaTypeLoader has a {{ParsingContext}} where it caches temporally the already parsed Types, if a {{TypedValue<String>}} is parsed, a String type will be stored with the  {{TypedValueTypeAnnotation}}, the if the plain String parameter gets parsed, the already cached builder will be taken, (the one with the annotatioin)"""
"MULE-12673","Bug","Core: Exception Handling",8,"Fix cases when an exception occurs in an error handler","""Currently when an exception is thrown from an error handler, it's not propagated even if wrapped inside another error handler.    Also, in the case of interceptors such as CXF, as the event is not correctly preserved (it's null) the final error response isn't a valid SOAP message (the XML tags aren't inserted around the original error description)."""
"MULE-12671","Bug","Modules: WS Consumer",3,"WSC is not providing a way to pass transport headers","""WSC is not providing a way to pass transport headers"""
"MULE-12682","Bug","Core: Exception Handling",2,"ErrorHandler model should be a Router instead of a Scope","""Currently, the errorHandler component is defined as a Scope in Mule's ExtensionModel, but a Router fits better it's definition, since the onError* would act as Routes."""
"MULE-12681","Task","Core: (other)",0,"Add test cases for Interception API with Smart Connectors","""We need to have coverage of Interception API interacting with Smart Connectors.    As part of this, the test smart connectors need to be included in the reactor of *mule-integration-tests*"""
"MULE-12680","Task","Core: (other)",0,"Server Notifications should expose SecurityContext/Authentication","""Gateway need access to SecurityContext/Authentication from Server Notifications to be able to send information to analytics"""
"MULE-12684","Task","Modules: Email",8,"Make Email DW and MediaType friendly","""*Make Email DW and MediaType friendly*    This implies:  * Change how Email consumes the body and attachments when sending emails, starting consuming TypedValue<> to be able to infer the MediaType of each content.  * Change how Email list emails, exposing automatically the MediaType of each body and attachments that receive."""
"MULE-12693","Bug","Core: API",0,"Mule Maven Client is locking jar files","""When getting the URLs from inside a jar file, the mule-maven-client is not closing the JarFile, creating a resource leak.  The issue is located at method org.mule.maven.client.internal.util.FileUtils#getUrlsWithinJar"""
"MULE-12691","Bug","sdk",5,"SDK: same name parameters of different types should not be allowed.","""When an operation has 2 parameter groups with parameters that have the same name but its type is different the SDK should trow an error at compile time since this is not going to work because of the how the parsers are made.    For example having an operation Ope1 with this structure:    * Ope1  ** ParamGroup1  *** @Content String param1  *** anotherParam   ** ParamGroup2  *** Int param1     param1 in the ParamGroup1 should clash with param1 in ParamGroup2    Ale you know what to do. """
"MULE-12690","Enhancement Request","Modules: WS Consumer",5,"SOAPService should consume and expose the MediaType of the downloaded attachments","""*SOAPService should consume and expose the MediaType of the downloaded attachments*    * Juani, you know what to do"""
"MULE-12689","Bug","Build: Maven",2,"Extensions maven plugin fails on uber reactor when building the first connector","""When building the uber reactor project, the first connector to be built fails with the error:        This seems to be related to a problem in maven when a project uses a plugin that depends on a module of the same reactor. This is the case for connectors -> mule-extensions-maven-plugin -> mule-api    This is reported in maven as https://issues.apache.org/jira/browse/MNG-5787 (the problem persists with maven 3.3.9 though)"""
"MULE-12688","Task","Extensions",5,"Make WSC DW and MediaType friendly","""Make WSC DW and MediaType friendly"""
"MULE-12686","Task","Extensions",0,"Remove redundant mule module files from extensions","""Sockets and validation extensions contain mule-module.properties files which are not used"""
"MULE-12685","Task","Core: (other)",1,"Review the need for system property ""mule.objectstore.user.transient""","""The system property """"mule.objectstore.user.transient"""" is used in DefaultObjectStoreFactoryBean#createDefaultUserObjectStore().    Check the need for it and either remove or document it."""
"MULE-12708","Bug","Core: (other)",1,"ObjectStore connector missing ""clear"" operation","""ObjectStore connector is missing the """"clear"""" operation which is present in the API"""
"MULE-12706","Task","Core: Exception Handling",2,"Source errors should not be available in on-error-continue","""Newly introduced sources error types should not be available in on-error-continue handlers since execution cannot be completed successfully. We need to make those configurations impossible."""
"MULE-12703","Bug","Core: Expressions",0,"Expression language does not handle context properties","""The {{p()}} DW function is not working in 4.0 so you are not able to retrieve system properties.    Sample flow:      Start Mule with {{./bin/mule -M-Dmule.simpleLog=true}} and see the exception:    {code:none}  WARN  2017-06-06 12:19:41,889 [[MuleRuntime].cpuLight.02] org.mule.runtime.core.el.DefaultExpressionManager: Expression parsing is deprecated, regular evaluations should be used instead.  ERROR 2017-06-06 12:19:43,243 [[MuleRuntime].cpuLight.02] org.mule.runtime.core.exception.OnErrorPropagateHandler:  ********************************************************************************  Message               : """"Script 'p('aRandomProperty') ' has errors:   Unable to resolve reference of p. at 1 : 1"""" evaluating expression: """"#[p('aRandomProperty')]""""..  Payload               : null  Payload Type          : null  FlowStack             : at someFlow(someFlow/processors/0 @ default:null:15)  Element               : someFlow/processors/0 @ default:null:15  Element XML           : <logger level=""""INFO"""" message=""""#[p('aRandomProperty')]""""></logger>  --------------------------------------------------------------------------------  Root Exception stack trace:  org.mule.runtime.api.el.ExpressionExecutionException: Script 'p('aRandomProperty') ' has errors:   Unable to resolve reference of p. at 1 : 1   at org.mule.weave.v2.el.WeaveExpressionLanguage.doEvaluate(WeaveExpressionLanguage.scala:111)   at org.mule.weave.v2.el.WeaveExpressionLanguage.evaluate(WeaveExpressionLanguage.scala:79)   at org.mule.runtime.core.el.DataWeaveExpressionLanguageAdaptor.lambda$evaluate$3(DataWeaveExpressionLanguageAdaptor.java:131)   at org.mule.runtime.core.el.DataWeaveExpressionLanguageAdaptor.sanitizeAndEvaluate(DataWeaveExpressionLanguageAdaptor.java:177)   at org.mule.runtime.core.el.DataWeaveExpressionLanguageAdaptor.evaluate(DataWeaveExpressionLanguageAdaptor.java:131)   at org.mule.runtime.core.el.ExpressionLanguageAdaptorHandler.evaluate(ExpressionLanguageAdaptorHandler.java:99)   at org.mule.runtime.core.el.DefaultExpressionManager.evaluate(DefaultExpressionManager.java:131)   at org.mule.runtime.core.el.DefaultExpressionManager.evaluate(DefaultExpressionManager.java:121)   at org.mule.runtime.core.el.DefaultExpressionManager.parse(DefaultExpressionManager.java:235)   at org.mule.runtime.core.api.processor.LoggerMessageProcessor.log(LoggerMessageProcessor.java:76)   at org.mule.runtime.core.api.processor.LoggerMessageProcessor.lambda$process$0(LoggerMessageProcessor.java:62)   at org.mule.runtime.core.util.func.CheckedFunction.apply(CheckedFunction.java:19)   at org.mule.runtime.core.api.util.StreamingUtils$1.applyChecked(StreamingUtils.java:51)   at org.mule.runtime.core.api.util.StreamingUtils$1.applyChecked(StreamingUtils.java:47)   at org.mule.runtime.core.util.func.CheckedFunction.apply(CheckedFunction.java:19)   at org.mule.runtime.core.api.util.StreamingUtils.withCursoredEvent(StreamingUtils.java:71)   at org.mule.runtime.core.api.processor.LoggerMessageProcessor.process(LoggerMessageProcessor.java:61)   at org.mule.runtime.core.api.processor.Processor.lambda$apply$0(Processor.java:53)   at org.mule.runtime.core.util.func.CheckedFunction.apply(CheckedFunction.java:19)   at org.mule.runtime.core.api.rx.Exceptions.lambda$checkedFunction$3(Exceptions.java:87)   at org.mule.runtime.core.internal.util.rx.Operators.lambda$nullSafeMap$0(Operators.java:37)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:141)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:428)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:428)   at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:90)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:371)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:371)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.request(FluxHandleFuseable.java:208)   at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1482)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:67)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onSubscribe(FluxHandleFuseable.java:126)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:404)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:404)   at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:67)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:82)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:82)   at reactor.core.publisher.FluxHandleFuseable.subscribe(FluxHandleFuseable.java:64)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:416)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:242)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:272)   at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:782)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72)   at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)   at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:173)   at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:173)   at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:173)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:150)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:428)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:428)   at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:90)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:371)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:371)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.request(FluxHandleFuseable.java:208)   at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1482)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:67)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onSubscribe(FluxHandleFuseable.java:126)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:404)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:404)   at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:67)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:82)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:82)   at reactor.core.publisher.FluxHandleFuseable.subscribe(FluxHandleFuseable.java:64)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:416)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:212)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:164)   at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:164)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:164)   at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:67)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)   at reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)   at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:117)   at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:117)   at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:117)   at reactor.core.publisher.FluxHandle.subscribe(FluxHandle.java:49)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:416)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:242)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:272)   at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:782)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72)   at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108)   at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:173)   at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:173)   at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:173)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:72)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onNext(FluxHandleFuseable.java:150)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:428)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onNext(FluxPeekFuseable.java:428)   at reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:90)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:371)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.request(FluxPeekFuseable.java:371)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.request(FluxHandleFuseable.java:208)   at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1482)   at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:67)   at reactor.core.publisher.FluxHandleFuseable$HandleFuseableSubscriber.onSubscribe(FluxHandleFuseable.java:126)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:404)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onSubscribe(FluxPeekFuseable.java:404)   at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:67)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:82)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:82)   at reactor.core.publisher.FluxHandleFuseable.subscribe(FluxHandleFuseable.java:64)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:416)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:212)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:164)   at reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:164)   at reactor.core.publisher.FluxJust.subscribe(FluxJust.java:67)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)   at reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)   at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:117)   at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:117)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:82)   at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxOnErrorResume.subscribe(FluxOnErrorResume.java:46)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:416)   at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:236)   at reactor.core.publisher.FluxPublishOn$PublishOnSubscriber.runBackfused(FluxPublishOn.java:431)   at reactor.core.publisher.FluxPublishOn$PublishOnSubscriber.run(FluxPublishOn.java:472)   at reactor.core.scheduler.ExecutorServiceScheduler$ExecutorServiceSchedulerRunnable.run(ExecutorServiceScheduler.java:325)   at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)   at java.util.concurrent.FutureTask.run(FutureTask.java:266)   at org.mule.service.scheduler.internal.AbstractRunnableFutureDecorator.doRun(AbstractRunnableFutureDecorator.java:88)   at org.mule.service.scheduler.internal.RunnableFutureDecorator.run(RunnableFutureDecorator.java:56)   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)   at java.lang.Thread.run(Thread.java:748)    {code}s"""
"MULE-12702","Enhancement Request","Core: API",1,"Add the possibility to provide a Charset when consuming a stream from the IOUtils","""In the debugger, when generating a readable payload from an input stream, we take into account the charset configured by the user.    We need to add in org.mule.runtime.core.api.util.IOUtils a method to generate a String form a stream providing a java.nio.charset.Charset  """
"MULE-12701","Enhancement Request","Core: Deployment",2,"Change log level for maven client","""When deploying an application, the logs are full of maven client warnings that only generate noise to the users and give you the impression that the deployment is failing.    We should change the log level of the component, or redirect it to another log and not the console.    {code}"""
"MULE-12700","Enhancement Request","sdk",1,"Missing @OnTerminate error message doesn't help you solve it","""When you have an extension with @OnSurccess or @OnError, users are forced to have an @OnTerminate annotated method.    But if the users have no @OnTerminate method, the error reported doesn't help you as it simply states:    Callback could mean anything, especially to new users.    It should be straight forward and tell you that you have @OnSuccess and @OnError annotated methods and that to solve it you ned to add an @OnTerminate annotated method."""
"MULE-12694","Bug","Core: Deployment",0,"Mule Maven Client is locking pom files","""When reading pom files, the mule-maven-client is not closing the FileReader, creating a resource leak.  The issue is located at method org.mule.maven.client.internal.util.MavenUtils#getPomModelFolder"""
"MULE-12737","Bug","Core: Transformers",2,"one-liner set-variable returns a different object than declaring output application/java","""one-liner set-variable returns a different object than if output application/java is declared.    In this case    {code:xml}          <ee:transform>              <ee:variables>                  <ee:set-variable variableName=""""syncTimestamp"""">#[payload]</ee:set-variable>              </ee:variables>          </ee:transform>  {code}    the object returned is not serializable. If instead set-variable is stated like this    {code:xml}  <ee:transform>              <ee:variables>                  <ee:set-variable variableName=""""syncTimestamp""""><![CDATA[                      %dw 2.0                      output application/java                       ---                      payload                   ]]></ee:set-variable>              </ee:variables>          </ee:transform>  {code}    object is serializable     *App details*  {code:xml}   <ee:transform>              <ee:message>                  <ee:set-payload><![CDATA[                      %dw 2.0                      output application/json                      ---                      now() as DateTime {format: """"yyyy-MM-dd hh:mm:ss"""", unit: 'miliseconds'}                   ]]></ee:set-payload>              </ee:message>          </ee:transform>          <ee:transform>              <ee:variables>                  <ee:set-variable variableName=""""syncTimestamp"""">#[payload]</ee:set-variable>              </ee:variables>          </ee:transform>          <logger level=""""INFO"""" message=""""#['Next sync resuming from ' ++ variables.syncTimestamp]""""/>          <os:store key=""""syncTimestamp"""">              <os:value>                  #[syncTimestamp]              </os:value>          </os:store>  {code}      *Console output*  """
"MULE-12723","Task","Core: (other)",0,"Add TransactionStatus to Transaction type in Tooling API","""Need to add this field for when runtime/agent can give us that information"""
"MULE-12713","Bug","Core: Exception Handling",2,"Default Error Handler not consistently initialized","""When calling MuleContext#getDefaultErrorHandler(), some callers properly initialize it and some others (MuleClientFlowConstruct) don't"""
"MULE-12712","Bug","sdk",1,"ExclusiveParameters are using field name instead of the alias","""If you take a look at the extension model json, yo will see that the names used for the parameters don't take the alias into account."""
"MULE-12711","Enhancement Request","Core: (other)",0,"Provide replacement for sprint import","""The component Spring import will sease to work in Mule 4.    There is still a need to import file and other components in such a way.  One of the reasons is provide support for MUnit which requires to describe which parts of the application needs to be imported.    Bear in mind that the application config files now live in /mule of the application packages and not in the classes folder, though by default those files will not be on the classpath"""
"MULE-12710","Enhancement Request","Core: API",1,"Provide access to container bootstrap utils to artifacts","""Need to define a module for container bootstrap and provide access to the utilities classes to mule artifacts"""
"MULE-12735","Enhancement Request","Core: Exception Handling|Core: Routing / Filters",8,"Update FirstSucessful  and any other routers to use errorType matchers instead of just failureExpression","""Update FirstSucessful to use errorType matchers instead of just failureExpression"""
"MULE-12734","Enhancement Request","Extensions|sdk",13,"Dummy implementations for Test Connectivity in core extensions","""- Http: HttpRequesterProvider   - Db: DbConnectionProvider, affects all Db connections   - File: LocalFileConnectionProvider   - Email: AbstractSenderProvider"""
"MULE-12728","Task","Core: (other)",1,"Fix flaky ConnectorMessageErrorNotificationTestCase","""ConnectorMessageErrorNotificationTestCase is failing locally because of a small timeout, need to increase it to avoid flakiness."""
"MULE-12724","Task","Service: HTTP",2,"Add HTTP client streaming test cases","""Though most HTTP scenarios are tested through the HTTP extension, since it only uses non blocking requests there are currently no blocking tests cases validating the streaming functionality. We need to add them to the service to make sure users will be successful regardless of the blocking/non blocking streaming/memory configuration."""
"MULE-12747","Bug","sdk",1,"@Query text does not allow for dynamic values.","""When an operation is @Query, the `@MetadataKeyId String query` text is not evaluating expressions.    This is not working only on operations annotated with Query      """
"MULE-12741","Enhancement Request","Core: Exception Handling",8,"Unify different overload errors within a  single parent error type","""- back-pressure (flow is slower than producer)  - streaming memory  - JVM OOM    This will allow some source to handle these errors equally if required (HTTP maybe) while allowing other to differentiate between them."""
"MULE-12776","Bug","Transport: JMS",1,"JMS degraded 70% in mule4 (dup of PERF-1430)","""see PERF-1430"""
"MULE-12775","Bug","Tooling Client",1,"Artifact xml serializer not adding the core namespace by default","""When generating the xml of an artifact that does not contain any core processors, the artifact xml serializer is failing to add the core namespace to the xml as well as the schema location.     xmlns=""""http://www.mulesoft.org/schema/mule/core""""    http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd """
"MULE-12773","Enhancement Request","Modules: File",1,"Typo on FILE:ILLEGAL_PATH error message","""FILE:ILLEGAL_PATH error message contains a typo. It should read *doesn't exist.* instead of """"doesn't exists.""""      """
"MULE-12771","Task","Core: Exception Handling",8,"Parametrize ObjectStoreStoreRetrieveAndRemoveTestCase flows and add negative cases","""ObjectStoreStoreRetrieveAndRemoveTestCase flows need to be parametrized to enable error triggering.    Error handling scenarios will involve the following operations    * file:read  * db:bulk-insert  * db:select  * os:store  """
"MULE-12770","Bug","Extensions",8,"Sdk should validate that required parameters can't receive null values","""Sdk should validate that required parameters can't receive null values"""
"MULE-12769","Task","Extensions API",8,"Allow MessageSource back-pressure strategy to be defined by a Extension Source","""Implement SDK support for MULE-12768  Message sources need to be able to define how they want the Flow to handle back pressure."""
"MULE-12768","Task","Core: API",8,"Message sources need to be able to define how they want the Flow to handle back pressure.","""Currently the way in which a Flow reacts to overload depends on i) source thread ii) processing strategy in use iii) thread pool used by processing strategy because it's logic internal to SchedulerService that determines if/when a source thread should block based on relative thread types.    Not all processing strategies start with the scheduling of tasks to a Scheduler and instead a Flow should be able to respond to back-pressure and handle it regardless of logic internal to schedulers.  The Flow can either always fail with an OVERLOAD exception on back-pressure, can always WAIT or use one of the two strategies based on the MessageSource.  - Always WAIT is not an option because some sources like HTTP, need to fail fast with a 503 response rather than block selector threads.  - Always fail with OVERLOAD exception is an option, but it means i) there is overhead associated with creating, throwing and handling the exception and error. ii) the source needs would need to implement it's on retry.  - Have the MessageSource or ExtensionMessageSource expose the desired strategy ERROR/WAIT/DROP and the Flow implement this at the point in which the Event is dispatched to the reactor stream avoiding the need to create of catch    The signature needed would be""""    ERROR/WAIT/DROP MessageSource.getBackPressureAction()"""
"MULE-12767","Enhancement Request","Core: (other)",2,"Use DataSense failure instead of returning null on ToolingDataSenseMetadataProvider","""Instead of returnin `null`, return `failure`"""
"MULE-12766","Task","Modules: HTTP|Service: HTTP",2,"Move to Grizzly AHC","""We need to change our dependency of AHC to the Grizzly sponsored one:    Not only have they fixed some of our reported issues but it will be the supported artefact from now on. Because of the former, we'll need to remove our custom code to address the issues which includes all changes in https://github.com/mulesoft/mule/pull/4990 and https://github.com/mulesoft/mule/pull/4217."""
"MULE-12765","Task","Modules: File",5,"Document File connector","""Doc it"""
"MULE-12764","Task","Modules: WS Consumer",5,"Document WSC","""Doc it"""
"MULE-12762","Enhancement Request","Core: (other)",0,"Maven client must support offline mode","""Maven client used internally to resolve dependencies, should be able to work offline to avoid downloading artifact and metadata from external repositories.  This is useful, for example, when running test (both unit/functional and system) to avoid having local artifacts overridden with newer versions."""
"MULE-12759","Enhancement Request","sdk",0,"Compilation warnings should be logged with the corresponding level","""It seems we are logging warning using the error log.        Logs should be consistent with the severity of the message.    If there are no errors or warning, nothing should be logged at all"""
"MULE-12792","Bug","jms-module",3,"Messaging sources should not expose an ackMode=""NONE""","""The ackMode 'NONE' has nothing to do with JMS acknowledgement mode as defined by the JMS spec and wasn't used in Mule 3 either.  In Mule 4 it is being used to define fire-and-forget behaviour and therefore switch between the 3.x (one-way) behaviour where the JMS MessageListener does not wait for the flow to complete vs. the 4.x (consistent) behaviour where the JMS MessageListener does wait for the flow to complete to ensure that any errors in the Flow, unless they are handled, result in a nack.    One of the main goals of work to remove exchange patterns and processing strategies was to remove all implicit, or flag-defined threading or fire-and-forget behaviour so that  all sources receive the response from the flow and use it to ack/nack.  The only way the user should be able to explicitly perform a fire-and-forget such that the source acks before the flow completes is via the explicit use of <async>.    Also if it did make sense to configure this on a source, which it doesn't, this flag should be available in all sources that don't use a response such as file and ftp too, otherwise it's inconsistent.    Due to this, this mode should be removed in all messaging connectors where it exists today and documentation as well as performance tests should use <async>."""
"MULE-12789","Bug","sdk",8,"Implicit config does not instanciate default parameter groups","""When using an implicit config, the parameter groups result in a null value instead of instanciating a """"Nullsafe"""" group with the corresponding default values.    In JmsConfig we have      But the implicit config created results in:    """
"MULE-12786","Bug","Modules: File|Modules: FTP",3,"File/FTP read and list should not receive a MediaType as parameter","""*File/FTP read and list should not receive a MediaType as parameter*    The current behavior of *MediaType* is to receive the MediaType of the Payload at the moment of executing the operation, a thing that is wrong for this operations.  In case the user want to provide a certain MediaType for the output @DataTypeParameters should be used."""
"MULE-12785","Enhancement Request","sdk",5,"Remove the @DataTypeParameters annotation","""*@DataTypeParameters should be removed*    The Mime Type parameters outputMimeType and outputEncoding should be always generated when the return type of an operation is an Object, a StringType or a BinaryType allowing the user to override whatever mimetype is set by mule"""
"MULE-12784","Bug","sdk",5,"ObjectType.getFields doesn't return the fields in the order writen in the extension-model.json","""In an extension with subtypes, the org.mule.metadata.api.model.ObjectType.getFields() doesn't return the fields in the order written in the extension-model.json    For simple types, this may not be an issue, but if the Object has other objects inside, the order must be exactly the same.    Today we cannot check for a model property to determine the order, so we need to use the order in which the fields are returned as the source of truth. Currently there seems to be a difference which may lead to errors when generating the UI and writting down the child elements    Check the extension:  https://github.com/mulesoft/mule-tooling-mock-connector/tree/mule-4.x/extension-with-subtypes        But iterating the fields return first the pages field, and second the id"""
"MULE-12783","Task","Core: (other)",1,"Normalize extensions artifacts names","""All pom names should either be Foo Module or Foo Connector.    Not Mule Foo Connector, Foo Extensions or nothing of that sort"""
"MULE-12782","Bug","Build: Libraries / Dependencies",2,"Contention on ExceptionUtils.getCause - Upgrade commons lang to >=3.1","""Mule currently uses commons lang 2, which has a contention issue doe to an unneeded synchronization on ExceptionUtils.getCause.    Use ExceptionUtils from version >=3.1, but keep the current version for backward compatibility (packages are different so that should be no problem)."""
"MULE-12781","Task","jms-module",5,"Review JMS ack modes ","""Review JMS ack modes """
"MULE-12779","Bug","sdk",3,"Wrong name is generated in the DSL element name for uppercase words","""When there are uppercase words in the @ParameterGroup name, the generated XML element name is not the right one. Uppercase words are being split instead of being handled as one.    Example:  """
"MULE-12809","Enhancement Request","sdk",3,"Make MetadataTestCase use LazyMetadataService","""Make MetadataTestCase use LazyMetadataService"""
"MULE-12806","Bug","sdk",3,"Do not validate required parameters on Datasense resolution","""Do not validate required parameters on Datasense resolution"""
"MULE-12805","Bug","Modules: FTP",1,"Upgrade JSCh to 0.1.54","""Upgrade JSCh to 0.1.54"""
"MULE-12802","Enhancement Request","jms-module",5,"JMS Publish does not need to use PooledConnectionProvider","""This impact performance because i) it has default pool size of 5 ii) even if you increase size, it's still overhead/contention on pool"""
"MULE-12800","Task","Tooling Client",8,"Define an ApplicationProvider instead of Supplier<URL> for Tooling Artifacts","""This will allow to notify when an application has been deployed by Tooling (required to resolve an operation against the Runtime) and also allow later to add more specific updates on applications (when a config only has changed, etc).  As part of this task the getApplicationId should be removed."""
"MULE-12799","Task","Core: (other)",8,"Move ArtifactDeclaration to a new API","""ArtifactDeclaration should be a Tooling concept, therefore it has to be moved to an API that can be used by Tooling API and removed dependency from Mule Runtime."""
"MULE-12798","Bug","sdk",2,"Allow parameter groups repeat Display Name","""Allow parameter groups repeat Display Name"""
"MULE-12795","Enhancement Request","jms-module",8,"Update JMS caching strategy defaults for decent OOTB performance","""By default JMS session caching is just 1, whereas in Mule 3.8 it is unbounded and as such defined implicitly by the number of worker threads in the Flow.  Using a default of just 1 impacts OOTB performance significantly.    Also in 3.x cacheConsumers was off by default to avoid consumer leaks with publish-consume and temporary reply queues, yet it is on by default in 4.x. This needs to be tested fully with publish-consume, temp queues and load before changing this."""
"MULE-12826","Enhancement Request","Extensions API",8,"ParameterModel should be able to point to another mule elements","""Figure out a way to have parameters which point to component names.    Examples:    * listenerConfig parameter should point to a http:listener-config  * objectStore should point to a os:object-store    Although the ExtensionModel should (somehow) say this, at the DSL and Java level, the parameters will be simple Strings."""
"MULE-12823","Bug","sdk",3,"Wrong DSL definition for boolean parameters","""Wrong DSL definition for boolean parameters"""
"MULE-12821","Bug","Modules: RSS / ATOM",1,"Upgrade abdera-client to 1.1.3","""Upgrade abdera-client to 1.1.3"""
"MULE-12818","Bug","Modules: XML, XSLT, XPath, SXC",0,"Xml Schema Validator filter changes mimetype","""Same as SE-6155"""
"MULE-12817","Task","sdk",3,"Add LICENCE file to new projects","""Add LICENCE file to connector projects"""
"MULE-12815","Task","Core: (other)",5,"Create service to generate XSDs for an application","""Currently extensions include the XSDs in the output JAR, but it won't be the case anymore soon. This is because they are generated when required in ModuleDelegatingEntityResolver.    Studio probably requires this so we should provide an API to obtain the XSDs required by an application, generating them if appropriate (in case of extensions)."""
"MULE-12810","Task","Tooling Client",1,"Upgrade DataSense dependency in tooling to 4.0.0-SNAPSHOT","""Upgrade the dependency to the new version published by datasense"""
"MULE-12844","Bug","Core: Containers",2,"Embedded container cannot delete folder when stopping app in Windows","""When stopping the embedded container, it tries to perform a deleteTree in the container base folder. In Windows, the deletion is not successful, so the next time a container is started it cannot create the domains/default folder.  This causes, for example, that MUnit cannot run two consecutive suites.  An example can be tested in the org.mule.runtime.module.embedded.EmbeddedContainerTestCase. A test for this could be something like:    In JUnit it might work due to the creation of a temporary folder, but if one changes the containerBaseFolder to another location (for example inside the project) the issue can be reproduced."""
"MULE-12836","Bug","sdk",1,"Fix version in BETA tests ",""""""
"MULE-12833","Task","sdk",3,"Review WSC fields in configuration ","""Review Expresion Supported fields in configuration  Config Ref shoud be named requesterConfigRef  """
"MULE-12832","Enhancement Request","Core: Exception Handling",1,"Avoid generating stacktraces for exceptions when verbose is disabled","""Generating stacktraces for exceptions is expensive in cpu time.    Stacktraces should only be filled when there is certainty they are going to be logged/shown somewhere."""
"MULE-12831","Enhancement Request","Core: Components",8,"Complete ObjectStore connector","""add support for connection providers  add support for persisent, ttl, etc  support multiple stores  support defining stores."""
"MULE-12829","Enhancement Request","Extensions API",8,"Allow Top Level Pojos to point to a config","""Support for both static and dynamic pojos"""
"MULE-12828","Bug","Modules: XML, XSLT, XPath, SXC",2,"The version of Xerces used in endorsed directory performs service provider lookup for each new DocumentBuilder","""This is due to lookup of org.apache.xerces.xni.parser.XMLParserConfiguration for each new DocumentBuilder.    The version of xecers in jdk7/8 does not do this, but rather has a fixed implementation.    Best way to resolve this until we stop using endorsed version of xerces is to set the system property:    -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeAwareParserConfiguration    This has a significant performance impact when using XML expression functions."""
"MULE-12850","Bug","Core: Components",1,"Connectors point to the wrong version of their parent pom","""Currently, connectors are pointing to       as the parent pom, but the version in https://github.com/mulesoft/mule-core-modules-parent/blob/master/pom.xml#L15 is 1.0.0-SNAPSHOT"""
"MULE-12849","Enhancement Request","Extensions: Maven Plugin",1,"Add @threadSafe to extension-maven-plugin mojos","""Ensure the mojos of the extension plugin are thread safe and annotate them to avoid the warnings when doing parallelmaven builds."""
"MULE-12869","Bug","sdk",5,"Failure to run SOAP-based apps: 'basic-connection' does not have an associated Bean Definition Parser","""h6. Steps to reproduce    * Create a Mule app containing a *SOAP connector: either Workday or ServiceNow*.  * Deploy it in Studio 7 or a 4.x Standalone Runtime (SNAPSHOT or BETA).  * The deploy fails with the following exception:     """
"MULE-12868","Bug","sdk",5,"DslElementModel should communicate default group values","""DslElementModel should communicate default group values"""
"MULE-12866","Bug","Modules: HTTP",1,"HTTP Stream Response: remove switch","""HTTP Stream Response: make stream response false by default  HTTP Request - http stream response  currently is true by default  make it false by default    """
"MULE-12863","Bug","Modules: WS Consumer",3,"WS Consumer errors are hidden in the stacktrace","""When WS consumer throws a connectivity testing error, you need to search the stacktrace for the actual cause of the error, instead of seeing the error in the first error message description.    In the following example, the real cause of the error is: """"The provided WSDL [https://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl] is RPC style, RPC WSDLs are not supported""""    {code:none}  org.mule.runtime.api.exception.MuleRuntimeException: java.lang.RuntimeException: org.mule.runtime.api.lifecycle.LifecycleException: Could not perform connectivity testing for config ‘Web_Service_Consumer_Config’  org.mule.runtime.api.exception.MuleRuntimeException: java.lang.RuntimeException: org.mule.runtime.api.lifecycle.LifecycleException: Could not perform connectivity testing for config ‘Web_Service_Consumer_Config’   at org.mule.runtime.core.api.util.ClassUtils.withContextClassLoader(ClassUtils.java:852)   at org.mule.runtime.config.spring.LazyMuleArtifactContext.initializeComponent(LazyMuleArtifactContext.java:121)   at org.mule.runtime.config.spring.LazyMetadataService.initializeComponent(LazyMetadataService.java:121)   at org.mule.runtime.config.spring.LazyMetadataService.getMetadataKeys(LazyMetadataService.java:52)   at com.mulesoft.agent.services.metadata.MuleAgentMetadataService.lambda$getMetadataKeys$0(MuleAgentMetadataService.java:55)   at com.mulesoft.agent.services.metadata.MuleAgentMetadataService.withMetadataService(MuleAgentMetadataService.java:126)   at com.mulesoft.agent.services.metadata.MuleAgentMetadataService.getMetadataKeys(MuleAgentMetadataService.java:55)   at com.mulesoft.agent.external.handlers.metadata.MetadataRequestHandler.lambda$getMetadataKeys$0(MetadataRequestHandler.java:121)   at com.mulesoft.agent.util.ResponseHelper.response(ResponseHelper.java:88)   at com.mulesoft.agent.external.handlers.metadata.MetadataRequestHandler.getMetadataKeys(MetadataRequestHandler.java:119)   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:498)   at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)   at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:151)   at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:171)   at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:152)   at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:104)   at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:387)   at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:331)   at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:103)   at org.glassfish.jersey.server.ServerRuntime$1.run(ServerRuntime.java:271)   at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)   at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)   at org.glassfish.jersey.internal.Errors.process(Errors.java:315)   at org.glassfish.jersey.internal.Errors.process(Errors.java:297)   at org.glassfish.jersey.internal.Errors.process(Errors.java:267)   at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:297)   at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:254)   at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1028)   at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:372)   at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:381)   at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:344)   at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:221)   at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:696)   at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1515)   at com.mulesoft.agent.rest.RequestLoggingFilter.doFilter(RequestLoggingFilter.java:95)   at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1486)   at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:519)   at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:138)   at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:564)   at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:213)   at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1097)   at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:448)   at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:175)   at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1031)   at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136)   at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)   at org.eclipse.jetty.server.Server.handle(Server.java:446)   at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:271)   at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:246)   at org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358)   at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:601)   at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:532)   at java.lang.Thread.run(Thread.java:748)  Caused by: java.lang.RuntimeException: org.mule.runtime.api.lifecycle.LifecycleException: Could not perform connectivity testing for config ‘Web_Service_Consumer_Config’   at org.mule.runtime.config.spring.LazyMuleArtifactContext.applyLifecycle(LazyMuleArtifactContext.java:100)   at org.mule.runtime.config.spring.LazyMuleArtifactContext.createComponents(LazyMuleArtifactContext.java:80)   at org.mule.runtime.config.spring.LazyMuleArtifactContext.lambda$initializeComponent$0(LazyMuleArtifactContext.java:129)   at org.mule.runtime.core.api.util.ClassUtils.lambda$withContextClassLoader$10(ClassUtils.java:848)   at org.mule.runtime.core.api.util.ExceptionUtils.tryExpecting(ExceptionUtils.java:176)   at org.mule.runtime.core.api.util.ClassUtils.withContextClassLoader(ClassUtils.java:901)   at org.mule.runtime.core.api.util.ClassUtils.withContextClassLoader(ClassUtils.java:867)   at org.mule.runtime.core.api.util.ClassUtils.withContextClassLoader(ClassUtils.java:847)   ... 55 more  Caused by: org.mule.runtime.api.lifecycle.LifecycleException: Could not perform connectivity testing for config ‘Web_Service_Consumer_Config’   at org.mule.runtime.core.lifecycle.AbstractLifecycleManager.invokePhase(AbstractLifecycleManager.java:143)   at org.mule.runtime.core.lifecycle.DefaultLifecycleManager.fireStartPhase(DefaultLifecycleManager.java:59)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationProvider.lambda$start$4(LifecycleAwareConfigurationProvider.java:105)   at org.mule.runtime.core.api.util.ExceptionUtils.tryExpecting(ExceptionUtils.java:176)   at org.mule.runtime.core.api.util.ClassUtils.withContextClassLoader(ClassUtils.java:901)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationProvider.start(LifecycleAwareConfigurationProvider.java:104)   at org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded(LifecycleUtils.java:189)   at org.mule.runtime.config.spring.LazyMuleArtifactContext.applyLifecycle(LazyMuleArtifactContext.java:98)   ... 62 more  Caused by: org.mule.runtime.core.api.DefaultMuleException: Could not perform connectivity testing for config ‘Web_Service_Consumer_Config’   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationInstance.testConnectivity(LifecycleAwareConfigurationInstance.java:217)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationInstance.start(LifecycleAwareConfigurationInstance.java:164)   at org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded(LifecycleUtils.java:189)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationProvider.startConfig(LifecycleAwareConfigurationProvider.java:189)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationProvider.lambda$null$3(LifecycleAwareConfigurationProvider.java:107)   at org.mule.runtime.core.lifecycle.AbstractLifecycleManager.invokePhase(AbstractLifecycleManager.java:130)   ... 69 more  Caused by: org.mule.runtime.core.retry.RetryPolicyExhaustedException: Connectivity test failed for config ‘Web_Service_Consumer_Config’   at org.mule.runtime.core.retry.policies.AbstractPolicyTemplate.execute(AbstractPolicyTemplate.java:83)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationInstance.testConnectivity(LifecycleAwareConfigurationInstance.java:215)   ... 74 more  Caused by: org.mule.runtime.api.connection.ConnectionException: Connectivity test failed for config ‘Web_Service_Consumer_Config’   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationInstance$1.doWork(LifecycleAwareConfigurationInstance.java:193)   at org.mule.runtime.core.retry.policies.AbstractPolicyTemplate.execute(AbstractPolicyTemplate.java:57)   ... 75 more  Caused by: org.mule.runtime.api.connection.ConnectionException: The provided WSDL [https://graphical.weather.gov/xml/DWMLgen/wsdl/ndfdXML.wsdl] is RPC style, RPC WSDLs are not supported   at org.mule.service.soap.client.SoapCxfClientFactory.getIntrospecter(SoapCxfClientFactory.java:60)   at org.mule.service.soap.client.SoapCxfClientFactory.create(SoapCxfClientFactory.java:38)   at org.mule.extension.ws.internal.connection.SoapClientConnectionProvider.connect(SoapClientConnectionProvider.java:135)   at org.mule.extension.ws.internal.connection.SoapClientConnectionProvider.connect(SoapClientConnectionProvider.java:48)   at org.mule.runtime.core.internal.connection.ConnectionProviderWrapper.connect(ConnectionProviderWrapper.java:59)   at org.mule.runtime.core.internal.connection.ErrorTypeHandlerConnectionProviderWrapper.connect(ErrorTypeHandlerConnectionProviderWrapper.java:60)   at org.mule.runtime.core.internal.connection.ConnectionProviderWrapper.connect(ConnectionProviderWrapper.java:59)   at org.mule.runtime.core.internal.connection.LifecycleAwareConnectionProviderWrapper.connect(LifecycleAwareConnectionProviderWrapper.java:61)   at org.mule.runtime.core.internal.connection.CachedConnectionHandler.createConnection(CachedConnectionHandler.java:95)   at org.mule.runtime.core.internal.connection.CachedConnectionHandler.getConnection(CachedConnectionHandler.java:86)   at org.mule.runtime.core.internal.connection.DefaultConnectionManager.testConnectivity(DefaultConnectionManager.java:163)   at org.mule.runtime.core.internal.connection.DefaultConnectionManager.lambda$testConnectivity$1(DefaultConnectionManager.java:146)   at org.mule.runtime.core.internal.connection.DefaultConnectionManager.doTestConnectivity(DefaultConnectionManager.java:153)   at org.mule.runtime.core.internal.connection.DefaultConnectionManager.testConnectivity(DefaultConnectionManager.java:129)   at org.mule.runtime.module.extension.internal.runtime.config.LifecycleAwareConfigurationInstance$1.doWork(LifecycleAwareConfigurationInstance.java:188)   ... 76 more      org.mule.tooling.ui.modules.core.metadata.notifications.DataSenseJobNotificationPopup$MoreInfoSelectionAdapter.widgetSelected(DataSenseJobNotificationPopup.java:232)    org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:249)    org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)    org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)    org.eclipse.swt.widgets.Widget.sendEvent_aroundBody2(Widget.java:1501)    org.eclipse.swt.widgets.Widget$AjcClosure3.run(Widget.java:1)    org.eclipse.rcptt.tesla.recording.aspects.RecordingAspect.ajc$around$org_eclipse_rcptt_tesla_recording_aspects_RecordingAspect$2$2f127892proceed(RecordingAspect.aj:94)    org.eclipse.rcptt.tesla.recording.aspects.RecordingAspect.ajc$around$org_eclipse_rcptt_tesla_recording_aspects_RecordingAspect$2$2f127892(RecordingAspect.aj:118)    org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1501)    org.eclipse.swt.widgets.Widget.sendEvent_aroundBody4(Widget.java:1524)    org.eclipse.swt.widgets.Widget$AjcClosure5.run(Widget.java:1)    org.eclipse.rcptt.tesla.recording.aspects.RecordingAspect.ajc$around$org_eclipse_rcptt_tesla_recording_aspects_RecordingAspect$1$bd9fb3e7proceed(RecordingAspect.aj:39)    org.eclipse.rcptt.tesla.recording.aspects.RecordingAspect.ajc$around$org_eclipse_rcptt_tesla_recording_aspects_RecordingAspect$1$bd9fb3e7(RecordingAspect.aj:82)    org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1513)    org.eclipse.swt.widgets.Widget.sendSelectionEvent_aroundBody10(Widget.java:1574)    org.eclipse.swt.widgets.Widget$AjcClosure11.run(Widget.java:1)    org.eclipse.rcptt.tesla.recording.aspects.RecordingAspect.ajc$around$org_eclipse_rcptt_tesla_recording_aspects_RecordingAspect$10$4cdd93e9proceed(RecordingAspect.aj:256)    org.eclipse.rcptt.tesla.recording.aspects.RecordingAspect.ajc$around$org_eclipse_rcptt_tesla_recording_aspects_RecordingAspect$10$4cdd93e9(RecordingAspect.aj:277)    org.eclipse.swt.widgets.Widget.sendSelectionEvent(Widget.java:1568)    org.eclipse.swt.widgets.Link.textView_clickOnLink_atIndex(Link.java:793)    org.eclipse.swt.widgets.Display.windowProc_aroundBody28(Display.java:6051)    org.eclipse.swt.widgets.Display$AjcClosure29.run(Display.java:1)    org.eclipse.rcptt.tesla.swt.aspects.EventFilterAspect.ajc$around$org_eclipse_rcptt_tesla_swt_aspects_EventFilterAspect$1$602baf3eproceed(EventFilterAspect.aj:17)    org.eclipse.rcptt.tesla.swt.aspects.EventFilterAspect.ajc$around$org_eclipse_rcptt_tesla_swt_aspects_EventFilterAspect$1$602baf3e(EventFilterAspect.aj:19)    org.eclipse.swt.widgets.Display.windowProc(Display.java:6038)    org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)    org.eclipse.swt.widgets.Widget.callSuper(Widget.java:227)    org.eclipse.swt.widgets.Widget.mouseDownSuper(Widget.java:1135)    org.eclipse.swt.widgets.Widget.mouseDown(Widget.java:1127)    org.eclipse.swt.widgets.Control.mouseDown(Control.java:2624)    org.eclipse.swt.widgets.Display.windowProc_aroundBody24(Display.java:5733)    org.eclipse.swt.widgets.Display$AjcClosure25.run(Display.java:1)    org.eclipse.rcptt.tesla.swt.aspects.EventFilterAspect.ajc$around$org_eclipse_rcptt_tesla_swt_aspects_EventFilterAspect$1$602baf3eproceed(EventFilterAspect.aj:17)    org.eclipse.rcptt.tesla.swt.aspects.EventFilterAspect.ajc$around$org_eclipse_rcptt_tesla_swt_aspects_EventFilterAspect$1$602baf3e(EventFilterAspect.aj:19)    org.eclipse.swt.widgets.Display.windowProc(Display.java:5668)    org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)    org.eclipse.swt.widgets.Widget.callSuper(Widget.java:227)    org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2140)    org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2402)    org.eclipse.swt.widgets.Display.windowProc_aroundBody24(Display.java:5797)    org.eclipse.swt.widgets.Display$AjcClosure25.run(Display.java:1)    org.eclipse.rcptt.tesla.swt.aspects.EventFilterAspect.ajc$around$org_eclipse_rcptt_tesla_swt_aspects_EventFilterAspect$1$602baf3eproceed(EventFilterAspect.aj:17)    org.eclipse.rcptt.tesla.swt.aspects.EventFilterAspect.ajc$around$org_eclipse_rcptt_tesla_swt_aspects_EventFilterAspect$1$602baf3e(EventFilterAspect.aj:19)    org.eclipse.swt.widgets.Display.windowProc(Display.java:5668)    org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)    org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5226)    org.eclipse.swt.widgets.Display.applicationProc(Display.java:5375)    org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)    org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)    org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3703)    org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1121)    org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)    org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1022)    org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:150)    org.eclipse.ui.internal.Workbench$5.run(Workbench.java:693)    org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)    org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:610)    org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:148)    org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:138)    org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)    org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)    org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)    org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)    org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)    sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    java.lang.reflect.Method.invoke(Method.java:498)    org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:673)    org.eclipse.equinox.launcher.Main.basicRun(Main.java:610)    org.eclipse.equinox.launcher.Main.run(Main.java:1519)    org.eclipse.equinox.launcher.Main.main(Main.java:1492)    {code}"""
"MULE-12862","Bug","sdk",3,"Communicate Nullsafe defaultImplementation in the ExtensionModel","""Communicate Nullsafe defaultImplementation in the ExtensionModel"""
"MULE-12858","Enhancement Request","sdk",8,"Implement Parameter Options Resolver in Tooling Client's Side","""Implement Parameter Options Resolver in Tooling Client's Side    Whatever is done for Metadata"""
"MULE-12857","Enhancement Request","sdk",8,"Implement Parameters Options Resolver in Mule's Side","""*Implement Parameters Options Resolver in Mule's Side*    This implies:  * The creation of a {{Parameter Options Resolver Service}} (similar to the metadata one)  ** Take care about the lazy version """
"MULE-12856","Enhancement Request","sdk",13,"Implement Parameters Options Resolver in SDK's Side ","""*Implement Parameters Options Resolver in SDK's Side*  This implies:  * Create proper annotations  * Create proper interfaces  * Create mechanism (reuse the ones in Metadata) no execute the resolving.  * Expose this mechanism through ExtensionComponent for Operations and sources and in the same way as {{ConfigurationProviderMetadataAdapter}} does for Configs and Conn Providers"""
"MULE-12874","Bug","sdk",3,"Split XmlHints in a two annotations, one for Parameter and one for Types","""XmlHints currently has three parameters: allowInlineDefinition, allowReferences and allowTopLevelDefinition    `allowReferences` only make sense for parameters while `allowTopLevelDefinition` only make sense for types. We can see they are two faces of the same coin, viewed from different sides.  A parameter can allow references only if it's type allows to be defined as a topLevel element.    We should split in two annotations with the same name but different package and target type to better guide our users on when does each option apply:    'org.mule.runtime.extension.api.annotation.param.dsl.xml.XmlHints':         - target FIELD and PARAMETER        - allowInlineDefinition, allowReferences    'org.mule.runtime.extension.api.annotation.type.dsl.xml.XmlHints':         - target TYPE        - allowInlineDefinition, allowTopLevelDefinition    *This _will_ break connectors code, but should have no impact in its final DSL*"""
"MULE-12871","Enhancement Request","sdk",5,"A config should not be considered as dynamic if a static expression is used","""*A config should not be considered as dynamic if a static expression is used*  * If a connection/configuration uses the expression: {{#\[\{ key : 'val1', key2 : 'val2'\}\]}} as the value of a parameter, where the expression is not event dependent, the configuration should be considered as a static one. """
"MULE-12895","Bug","Tooling Client",2,"Tooling Client fails to resolve transitive dependencies/extension models","""Tooling Client fails to resolve transitive dependencies/extension models.   When trying to serialize a app declaration with WSC or HTTP it fails with:    Caused by: org.mule.runtime.api.exception.MuleRuntimeException: Failed to serialize the declaration for the artifact [null]: The Extension [Sockets] is not present in the current context   at org.mule.runtime.config.spring.dsl.model.internal.DefaultArtifactDeclarationXmlSerializer.serializeArtifact(DefaultArtifactDeclarationXmlSerializer.java:144)   at org.mule.runtime.config.spring.dsl.model.internal.DefaultArtifactDeclarationXmlSerializer.serialize(DefaultArtifactDeclarationXmlSerializer.java:74)   at org.mule.tooling.client.internal.artifact.DefaultArtifactSerializationService.toXml(DefaultArtifactSerializationService.java:63)   ... 126 common frames omitted  Caused by: java.lang.IllegalArgumentException: The Extension [Sockets] is not present in the current context   at org.mule.runtime.extension.api.dsl.syntax.resolver.DefaultImportTypesStrategy.lambda$null$0(DefaultImportTypesStrategy.java:38)   at java.util.Optional.orElseThrow(Optional.java:290)   at org.mule.runtime.extension.api.dsl.syntax.resolver.DefaultImportTypesStrategy.lambda$getImportedTypes$1(DefaultImportTypesStrategy.java:38)   at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321)   at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)   at java.util.Iterator.forEachRemaining(Iterator.java:116)   at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)   at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)   at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)   at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)   at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)   at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)   at org.mule.runtime.extension.api.dsl.syntax.resolver.DefaultImportTypesStrategy.getImportedTypes(DefaultImportTypesStrategy.java:36)   at org.mule.runtime.extension.internal.dsl.syntax.XmlDslSyntaxResolver.<init>(XmlDslSyntaxResolver.java:113)   at org.mule.runtime.extension.api.dsl.syntax.resolver.DslSyntaxResolver.getDefault(DslSyntaxResolver.java:75)   at org.mule.runtime.config.spring.dsl.model.internal.DefaultDslElementModelFactory.lambda$new$1(DefaultDslElementModelFactory.java:33)   at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321)   at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)   at java.util.Iterator.forEachRemaining(Iterator.java:116)   at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)   at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)   at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)   at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)   at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)   at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)   at org.mule.runtime.config.spring.dsl.model.internal.DefaultDslElementModelFactory.<init>(DefaultDslElementModelFactory.java:33)   at org.mule.runtime.config.spring.dsl.model.DslElementModelFactory.getDefault(DslElementModelFactory.java:39)   at org.mule.runtime.config.spring.dsl.model.internal.DefaultArtifactDeclarationXmlSerializer.serializeArtifact(DefaultArtifactDeclarationXmlSerializer.java:96)   ... 128 common frames omitted"""
"MULE-12894","Task","Modules: WS Consumer",1,"Fix OpenSAML dependencies in Soap Service","""OpenSAML appears to not be used anymore in the Soap Service so we should remove the dependency along with the transitive ones."""
