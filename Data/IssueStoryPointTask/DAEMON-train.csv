"issuekey","type","components","storypoint","title","description_text"
"DAEMON-5","New Feature","appcd-core",13,"appcd: JSON response filtering","""All the ability to filter JSON responses based on criteria from a dispatcher path.    For example, requests to `/appcd/status/system` would return only the system information:    """
"DAEMON-1","New Feature","appcd-core",13,"appcd: Integrate hook system into appc daemon","""The appc daemon needs to provide a evented hook system for plugins to use services to use and expose functionality to other services.    The hook system is based on the concepts of the hook system in the Titanium CLI. The main differences are the new hooks system will be based on ES6 promises.    The event names should follow the convention of """"module:foo.bar""""."""
"DAEMON-28","New Feature","appcd-plugin-amplify",13,"@appcd/plugin-amplify: Authentication service","""The AMPLIFY platform appcd plugin will use the amplify-platform-sdk to perform authentication. This service will also automatically refresh access tokens."""
"DAEMON-18","Story","appcd-plugin-amplify",13,"@appcd/plugin-amplify: AMPLIFY platform daemon plugin","""The AMPLIFY Platform appcd plugin (@appcd/plugin-amplify) is responsible for authentication. It contains services authenticating against Axway ID and retrieving, refreshing, and invalidating access tokens.    This plugin eventually will also contain the entitlements service."""
"DAEMON-11","New Feature","appcd-core",8,"appcd: Support for --config and --config-file options","""It would be useful if the appcd cli supported a {{\-\-config}} and {{\-\-config\-file}} options for the """"start"""" and """"restart"""" commands."""
"DAEMON-10","New Feature","jdklib",5,"jdklib v2","""jdklib is responsible for detecting the installed Java development environment.    jdklib needs to expose the new detect friendly interface, namely separating the search paths from the actual detection code."""
"DAEMON-4","New Feature","appcd-core",13,"appcd: Add analytics facilities","""The appc daemon needs to provide a mechanism for services and the daemon itself to generate analytics events. These events are then sent to the Appcelerator cloud so that the products can be improved. Analytics payloads must be anonymous.    Analytics payload will include:  * Machine ID  * Session ID  * Timestamp  * Operating system  * CPU architecture (32/64-bit)  * Number of CPUs  * Total system memory  * Installed appcd plugin info  * appcd configuration  * Event name  * Event type (action, error, etc)  * Event metadata    All events must be persisted to separate files disk prior to sending to the cloud. Only one process can send an event at any given time.    The endpoint will be https://api.appcelerator.net/p/v2/partner-track. As a reference, here's Appc CLI's analytics library: https://github.com/appcelerator/appc-platform-sdk/blob/master/lib/analytics.js.    Appc Daemon's guid:  * Production: ea327577-858f-4d31-905e-fa670f50ef48  * Preprod: 14c84daf-b01e-486c-96d3-b8f66da44481"""
"DAEMON-2","New Feature","appcd",13,"appcd: Add support for distributable Node executable","""The appc daemon needs the ability to lock down the Node.js version so that native modules can be pre-compiled. It currently has a placeholder for running a specific Node executable.    The Node executable will be downloaded from the registry server. Both 32 and 64-bit Node executables will be available. The required Node.js version will be the latest LTS version, currently 4.4.3. This will most likely change to 6.2.0 LTS October 2016."""
"DAEMON-13","Improvement","appcd-core",3,"appcd: Fix source/user agent support","""For analytics, the daemon records the client's """"user agent"""". This feature is currently implemented, but it's named """"userAgent"""" which was determined to be misleading.    We need a better term to describe this feature and a way to describe a client type, description, and version, possibly as a string instead of an object.    NPM has a user agent string that looks like {{npm/2.15.1 node/v4.4.3 darwin x64}}."""
"DAEMON-3","Improvement","ioslib",8,"node-ios-device: Re-run node-pre-gyp if binding doesn't exist","""node-ios-device v0.9.0 uses node-pre-gyp. When it is npm installed, node-pre-gyp downloads the pre-compiled binary. However, if the system Node.js version is changed, then node-pre-gyp needs to be re-run. In order for this to work, node-pre-gyp must be executed synchronously."""
"DAEMON-6","New Feature","node-appc",13,"appcd: Filesystem watcher","""androidlib, ioslib, jdklib, and windowslib need a filesystem monitoring library that can be notified when a specific path changes.    Node has a built-in {{fs.watch()}} function which works fine on Linux and Windows, but doesn't work well on OS X where it doesn't report the correct file path. This can be fixed by using the {{fsevents}} module.    The {{chokidar}} module comes close to solving this need, but I discovered two blocking bugs: one with watching paths that do not exist and one with nested paths. It also currently has 39 open issues, some of which are a little scary sounding. Additionally, {{chokidar}} uses {{readdirp}} which apparently has performance issues due to all of the file stating."""
"DAEMON-32","Bug","jdklib",1,"Windows: jdklib v2 - If you move your JDK while running jdklib.watch(), then ""TypeError: Path must be a string"" error is returned","""*Details:* On Windows, if you move your JDK while running jdklib.watch(), then {{TypeError: Path must be a string}} error is returned.    *Notes:* This is not reproducible with JDK on Mac.    *Steps to reproduce:*  # Make sure you are using Node 4.X.X on Windows  # Clone and run {{npm install}} on https://github.com/appcelerator/jdklib  # Symlink to the above built jdklib v2  # Run this Node script:    # Find your JDK and move it    *Actual:*  {{TypeError: Path must be a string}} error is returned:      *Expected:* No errors should be returned while watching the JDK."""
"DAEMON-33","Bug","androidlib",1,"Windows: androidlib v2 - If you call androidlib.detect(), then an empty array is returned for the results","""*Details:* If you make a androidlib.detect(), then an empty array is returned for the results.    *Notes:*  * This does not appear on Mac.  * ANDROID_SDK environment variable is set.  * Android SDK tools and platform-tools are set in the PATH.    *Steps to reproduce:*  # Make sure you are using Node 4.X.X  # Clone and run {{npm install}} on https://github.com/appcelerator/androidlib/tree/v2; make sure it's v2 branch  # Symlink to the above built androidlib v2  # Run this Node script:      *Actual:* An empty array appears for SDK.      *Expected:* There should not be an empty array for SDK."""
"DAEMON-30","Bug","appcd-core",5,"appcd status: Display the correct status if the daemon is not running","""If the Appc Daemon is not running and you run {{appcd status}}, it outputs:        It should output a more readable error for both """"report"""" and """"json"""" output modes."""
"DAEMON-29","New Feature","appcd-core",5,"appcd status: Add support for --json option","""The {{appcd status}} command needs to support outputting the status in a human readable """"report"""" format as well as JSON format.    Currently only the JSON output is supported."""
"DAEMON-31","Improvement","appcd-core",5,"Allow for multiple requests over the same WebSocket connection","""Currently the Appc Daemon only allows a single request over a single WebSocket connection. This encourages clients to establish multiple simultaneous connections. This is technically unnecessary.    The Appc Daemon should not close the socket when a request ends, but rather send a """"request closed"""" message and let the client determine if it should close the connection.    Be sure to update the wiki page under the """"Node.js Client"""" section: https://wiki.appcelerator.org/display/Daemon/Appcd+Client."""
"DAEMON-35","Improvement","appcd-core",5,"appcd-core: Replace ""pidusage"" with ""process.cpuUsage()""","""The daemon uses a NPM module called """"pidusage"""" to monitor the CPU usage, but this is no longer necessary since Node 6 includes a built-in {{process.cpuUsage()}} function. https://nodejs.org/dist/latest-v6.x/docs/api/process.html#process_process_cpuusage_previousvalue    Aside from removing a dependency, it's going to be more efficient to use Node's built-in {{process.cpuUsage()}} because """"pidusage"""" relies on file I/O and spawning {{ps}} and {{wmic}}."""
"DAEMON-36","Bug","node-appc",13,"node-appc: fs watch doesn't properly handle symlinks","""The filesystem watch function doesn't properly handle symlinks. It doesn't check if a file/directory is a symlink.    The problem is when there's a symlinked directory to a parent directory or a directory that is being watched.    The fs watcher needs to detect a symlinked directory, then watch the real path, not the symlink. We still need to track the symlink directory, but it needs to make sure that changes to the real path are propagated to the watcher of the original path."""
"DAEMON-39","New Feature","Tooling",13,"appcd: Create 'package' task for top-level gulp file","""The appcd daemon is made up of the bootstrap, core, a bunch of micro packages, and a bunch of plugins. While each of these can be published individually to NPM, it might be better to generate a pseudo """"appcd"""" package that combines all of the appcd-* {{package.json}} files together.    This would save hundreds of MB of hard drive space.    Furthermore, we may want to take it a step further and declare the bootstrap, core, micro packages, and plugins as """"bundledDependencies"""" and include them in the package. This would allow us to only publish """"appcd"""" to npm instead of dozens of modules every release. This would also make locking down versions much easier."""
"DAEMON-50","New Feature","appcd-response",5,"appcd-response: Add i18n system","""The Appc Daemon currently does not have any sort of i18n facilities unlike the Titanium CLI. This should be solvable using a logger middleware and a gulp task to generate the i18n files."""
"DAEMON-47","Improvement","Tooling",2,"Remove dependency on 'optional-dev-dependency'","""As a way to deal with dependency management, appcd uses """"optional-dev-dependency"""", specifically when the plan was to publish each micro-package as a separate NPM module. However, with the introduction of the {{gulp package}} task and the use of yarn links, there's no need for the """"optional-dev-dependency"""" module anymore."""
"DAEMON-46","Improvement","General",2,"appcd-*: Replace use of 'temp' module with 'tmp'","""In an attempt to standardize on a temp directory/file library, ensure we are using the tmp (https://www.npmjs.com/package/tmp) module."""
"DAEMON-45","New Feature","appcd-http",8,"appcd-http: Add unit tests","""The appcd-http package has some unit tests, but code coverage is lacking."""
"DAEMON-44","New Feature","appcd-http",8,"appcd-http: Port implementation from prototype","""Add the webserver and router from prototype to the appcd-http library."""
"DAEMON-43","New Feature","Tooling",5,"Create CI script","""The Appc Daemon needs a Jenkinsfile script that:    * Installs Node 7.6.0 or newer  * Installs NPM  * Installs Yarn  * Clone appc-daemon repo  * Runs: {{yarn}}  * Runs: {{gulp check}}  * Runs: {{gulp coverage}}  * Runs: {{gulp package}}  * Generates report from """"check"""" output, """"coverage"""" output, and package output and also includes build information  * Stores the report in some cloud-based data store    See https://github.com/appcelerator/client-generator/blob/master/Jenkinsfile for an example. Also see https://github.com/appcelerator/jenkins_dsl/blob/master/jobs/appc_cli.groovy.    -To build the bundled distribution which includes all NPM dependencies, we will need to kick off a Jenkins job on multiple slave Jenkins machines to bundle platform specific bundles. Each Jenkins slave would run {{gulp package-bundle}} instead of {{gulp-package}}, then upload the resulting tarball to Axway's Artifactory server (and possibly also S3 as a backup). We need 5 Jenkins slaves: OS X (64-bit), 64-bit Windows, 32-bit Windows, 64-bit Linux, and 32-bit Linux.-    The platform specific bundling has been moved to DAEMON-77.    The report generation has been moved to DAEMON-78."""
"DAEMON-42","New Feature","appcd-http",2,"appcd-http: Add default served root","""appcd-http needs a default served root just in case one is not specified when a web server is started."""
"DAEMON-41","Improvement","appcd-nodejs",8,"appcd-nodejs: Add unit tests","""Need to create unit tests for appcd-nodejs."""
"DAEMON-40","Bug","appcd-nodejs",5,"appcd-nodejs: Need to download signed node executable on macOS","""Downloading the node executable in the tarball is not signed and shows a dialog if the firewall is enabled, which is going to be often. Instead, we need to download the pkg installer and manually extract the node executable."""
"DAEMON-53","Improvement","Tooling",2,"Root coverage task should not stop on failures","""When running {{gulp coverage}} in the root, we should run each package's coverage tests and continue even if one or more fail, then at the very end do the {{process.exit(1)}}."""
"DAEMON-52","Improvement","Tooling",3,"Start/restart daemon when watching in dev mode","""To speed up development, it would be nice if the gulp watch task would restart the daemon when it detects a file has changed and has rebuilt the packages."""
"DAEMON-51","Improvement","appcd-dispatcher",5,"appcd-dispatcher: Add Koa middleware function","""Instead of having the daemon patch web requests into the dispatcher, just have the dispatcher return a Koa middleware that allows appcd-dispatcher to just do the routing."""
"DAEMON-55","Improvement","Tooling",8,"appcd: Add Retire.js to the 'gulp check' task","""The {{gulp check}} currently only checks NSP for security issues. It is also desired to use Retire.js (https://retirejs.github.io/retire.js/). We need to add Retire.js to the {{gulp check}} task and update the JSON results.    It is preferred to use Retire.js programmatically instead of subprocessing it, though I'm not sure if that's feasible.    Also note that Retire.js and NSP overlap and it would be ideal to unify the results and eliminate duplicates."""
"DAEMON-58","Improvement","appcd-core",2,"appcd-core: Bump Node version to 8.x (when it is released)","""We want to bump the Node.js version of appcd-core's {{package.json}} to the latest v8.x LTS release once it ships in October 2017.    In addition, the following dependencies must also be updated to take advantage of the new features of Node 8:    * appcd-http: koa-bodyparser@4.0.0"""
"DAEMON-57","New Feature","appcd-config|appcd-config-service",5,"appcd: Add support to config handler to change settings at runtime","""The config handler currently only returns the config. The handler should also support a """"data"""" payload to change the daemon's config at runtime.    Note that only a single config setting can be changed per call. Use the path to determine what is being changed. HTTP methods can be used to determine how the key should be changed. The handler returns the new value. Use the status code to determine if successful.    The appcd CLI is responsible for persisting the settings to the user's config file {{~/.appcelerator/appcd/config.json}}. The daemon does not modify the config file. The appcd CLI will validate the config change, then persist it to disk. After that, it will check if the daemon is running and attempt to change it at runtime. If the daemon is not running or it is running and the setting is changeable during runtime, then everything succeeds. If the daemon is running and the change is rejected, then the CLI will alert the user that the daemon must be restarted for the setting to take effect. If the CLI as a TTY, it can prompt to restart the daemon. Note that the CLI should also support a {{\-\-no\-prompt}} flag and a {{\-\-auto\-restart}} flag.    h4. Examples:    h5. Getting a value:        h5. Setting a value:        h5. Deleting a value:        h5. Array examples:        Delete will remove the entire value.    """
"DAEMON-60","Improvement","appcd-dispatcher",8,"appcd-dispatcher: Add ServiceDispatcher unit tests","""The {{ServiceDispatcher}} needs some unit test love."""
"DAEMON-64","New Feature","appcd-http",13,"appcd-http: Need a unified response object","""Right now HTTP responses require a status and body. However we will want to specify a response using a code that looks up the appropriate message and sets the actual response status and body.    We also want this response object to handle the content type.    This does not apply to requests for data. This only applies to requests like subscribing or registering something where we have a real message that can be internationalized."""
"DAEMON-63","New Feature","Tooling",3,"Move dependency-map.json into each package's package.json","""The {{dependency-map.json}} is a file that maps micro-package dependencies together so they can be linked with yarn. The problem is this file is becoming exceedingly large. It's time to break it up and put each package's dependencies in their {{package.json}}. Note that this is not the same as NPM dependencies, so we may need a {{appcd-depenedencies}} property in the {{package.json}}."""
"DAEMON-62","New Feature","appcd-response",13,"appcd-response: Create base error object with messages integration","""There are several errors being thrown around inside the Appc Daemon and we need a unified error object that can pull i18n strings by code or by message."""
"DAEMON-61","New Feature","appcd-response",13,"appcd-response: Create unified message and code library","""With error codes all over the place, we need a central place to store them. We also have a need for i18n. So, appcd-response can fulfill both requirements."""
"DAEMON-65","Improvement","appcd-response",3,"appcd-response: Improve i18n API","""appcd-response handles single strings only. It will probably be handy to create {{\_\_()}} and {{\_\_n()}} functions to expose the i18n engine for single strings and pluralized strings.    Strings are stored in a {{messages/<locale>/strings.json}} file where the key is the English text and the value is the translated text. We should just follow https://github.com/mashpie/i18n-node and allow the value to be an array where the first element is the singular string and the second element is the plural string."""
"DAEMON-67","Bug","appcd",5,"appcd: Logcat crashes daemon","""Running {{appcd logcat}} causes the daemon to have a bad day."""
"DAEMON-69","New Feature","appcd",5,"appcd: Implement subscription requests from appcd CLI","""{{appcd exec}} currently only supports dispatching """"call"""" requests. It does not support """"subscribe"""" requests. {{appcd exec}} needs a {{\-\-subscribe}} flag.    When the {{\-\-subscribe}} flag is set, it will pass a """"type"""" of """"subscribe"""" with the request, then the {{appcd exec}} command will need to properly not exit until the connection is closed or the {{fin}} event is emitted."""
"DAEMON-70","New Feature","appcd-core",2,"appcd-core: Drop priviledges and set uid/gid if root","""In Node, you can only change the user id if Node is launched as root. If the user launching the daemon is root, it would be essential that root privileges be dropped as soon as possible during the daemon initialization.    To check if the daemon is being run as root, check if {{process.getuid() === 0}}. If the uid is zero, then get the uid/gid from in the config and call {{process.setuid()}} and/or {{process.setgid()}}. If there is no uid/gid in the config or the uid/gid is invalid, then the daemon should fatal error and exit.    Note that this only applies to macOS and Linux."""
"DAEMON-72","New Feature","appcd-config|appcd-core",5,"appcd-core: Support for user-defined config file","""The daemon needs to support a user-defined config file. This file should live at {{~/.appcelerator/appcd/config.json}}.    This user-defined config file overrides the default config defined by the Appc Daemon.    This user-defined config file is written whenever a setting is changed via {{appcd config}} or a request to {{/appcd/config}}."""
"DAEMON-77","New Feature","Tooling",1,"appcd: Extend CI process to create platform-specific bundles","""The current Jenkinsfile introduced by DAEMON-43 runs check and coverage tasks, then bundles the daemon distribution without NPM dependencies. DAEMON-56 introduces a {{gulp package-bundle}} that will run {{npm install}} and re-package the daemon distribution tgz file.    This ticket is to add the {{gulp package-bundle}} to the CI process where it is executed on the following 5 Jenkins slave machines:    * macOS  * 64-bit Windows  * 32-bit Windows  * 64-bit Linux  * 32-bit Linux    The resulting tgz file is to be uploaded as an artifact of the CI job."""
"DAEMON-79","New Feature","appcd-subprocess",5,"appcd-subprocess: Add IPC support","""We need the ability to set up an IPC channel with a spawned process.    The way this will work starts by passing a {{ipc: true}} in the dispatcher request payload. This will cause the spawn to force the connection use file descriptor 3 as an IPC channel.    The caller receives the subprocess descriptor: {{ctx.proc}}. It extends an event emitter, so you can listen for {{""""message""""}} and send using {{ctx.proc.send()}}."""
"DAEMON-80","Improvement","appcd-agent",5,"appcd-agent: Implement processing monitoring","""We need to extract the CPU and memory monitoring from the appcd-core and move it into a new appcd-monitor package. The {{StatusMonitor}} along with the plugin host will be able to use appcd-monitor to retrieve process stats.    The goal is to feed these stats into appcd status and telemetry payloads."""
"DAEMON-82","Improvement","appcd-fswatcher",8,"appcd-fswatcher: Add ""depth"" support for recursive watching","""Recursive fs watching works good... perhaps a little too good. When it recursively watches a directory, it has to walk the directory and watch every single descendant. This takes a bunch of resources and slow to initialize. Sometimes the only thing you are interested in is just a couple directories deep. It would best if the FSWatcher could watch only to a certain depth."""
"DAEMON-84","New Feature","appcd-request",8,"appcd-request: Add http request library","""The daemon core needs an http client service. This will tie directly into the dispatcher and use the appcd config for determining proxy settings."""
"DAEMON-87","New Feature","Tooling",1,"Generate yarn.lock in distribution tarball","""When the distribution tarball is packaged, it consolidates all NPM dependencies into the top-level package.json and removes devDependencies from ALL appcd package.json files. All of the appcd-* packages are included in the tarball in the {{node_modules}} directory and declared as {{bundledDependencies}}.    This ticket is to generate a {{yarn.lock}} file for all non-appcd-* dependencies and their dependencies. There are many ways to do this, but the best for ease and performance is to simply merge the {{yarn.lock}} files from every appcd-* directory."""
"DAEMON-86","New Feature","appcd-nodejs",3,"appcd-nodejs: Update to use appcd-request for HTTP requests","""When appcd-nodejs downloads Node.js, it needs to take into account proxies and other network settings. Instead of using {{request()}}, it instead should use the provided request service in {{appcd-request}}."""
"DAEMON-85","New Feature","appcd-request",8,"appcd-request: Implement request service","""The daemon needs a centralized network library that exposes a service for making HTTP requests and takes into account network settings such as proxy settings."""
"DAEMON-88","New Feature","appcd-core",1,"appcd-core: Add heartbeat to WebsocketSession","""Currently there is no mechanism to detect if the Websocket client is borked. This can be accomplished using a ping/pong heartbeat.    Clients opt-in by setting the {{x-heartbeat}} HTTP header. When set, the {{WebsocketSession}} will send a {{""""ping""""}} event every 30 seconds to the client. The client has 5 seconds to respond with a {{""""pong""""}}, otherwise the connection is closed by the server."""
"DAEMON-89","Improvement","Tooling",8,"Migrate to Lerna.js","""I've been resisting the urge to jump to Lerna.js fearing it won't handle some of the edge cases, but once the daemon is released, managing and coordinating all the package releases is going to become more complicated.    Need to understand Lerna's support for Yarn since we depend on {{yarn check}}. npm 5 does not yet support {{node_module}} integrity checks.    Need to figure how to use Lerna.js and configure package dependencies. We will also probably ditch {{gulp}} (which isn't a bad thing) in favor of NPM scripts and a {{scripts}} directory. Everything in {{appcd-gulp}} will be moved to the {{scripts}} directory.    The hope is this will give us a more manageable repo, faster builds, coordinated publishing, and removes the dependency on a globally installed {{gulp}}."""
"DAEMON-92","New Feature","appcd-logger",5,"appcd-logger: Implement default logger","""The Appc Daemon uses {{snooplogg}} for logging, but {{snooplogg}} contains a pretty large 19MB file. To reduce the amount of disk space needed (around 270MB) and to consolidate default logger config settings, it makes sense to introduce an {{appcd-logger}} package."""
"DAEMON-94","New Feature","appcd-telemetry",1,"appcd-telemetry: Switch over to appc-platform-sdk analtyics","""The Appc Daemon uses its own analytics code in {{appcd-telemetry}}. {{appc-platform-sdk}} also has an analytics library. It makes sense that there should be a single analytics library, however {{appc-platform-sdk}}'s implementation is not used by any other product (e.g. not battle tested) and is missing a few key features that {{appcd-telemetry}} supports such as sending telemetry at set intervals instead of at the end of the process.    So, we need to determine if this ticket should even be worked on in the first place. If yes, then update {{appc-platform-sdk}} to be daemon friendly and update {{appcd-telemetry}} to use {{appc-platform-sdk}}."""
"DAEMON-93","New Feature","appcd-core",5,"Persist logs to disk","""The daemon needs to persist the log to disk. We can do this pretty easily by introducing a listener to the logger and writing the data to a log file. Every time the daemon is started, a fresh log file is created in {{~/.appcelerator/appcd/log}}.    We still need to determine a few things:  * Should we rotate old logs? Keep last 5 logs? gzip older logs?  * How should we handle log files that could potentially be huge?    The log messages should be streamed as objects containing metadata such as timestamps, etc. This structure should be preserved when written to disk."""
"DAEMON-95","New Feature","appcd-plugin-system-info",13,"appcd-plugin-jdk: Implement JDK service","""The {{appcd-plugin-jdk}} needs to expose a service that detects the JDK, via {{jdklib}}. The {{jdklib}} specifics are to be implemented by DAEMON-10."""
"DAEMON-96","New Feature","appcd-detect",13,"appcd-detect: Port over detect engine from node-appc v2","""The amazing detect engine lives in node-appc v2 and needs to be ported over to an appcd-detect package. The major change involves using the {{/appcd/fswatch}} instead of the old (buggy/incomplete) fs watcher."""
"DAEMON-97","New Feature","appcd-detect",8,"appcd-detect: Wire up Windows Registry library","""The {{DetectEngine}} has the necessary plumbing to poll the Windows Registry for paths to watch, however the actual call to query the registry is commented out until a solution is dropped in.    We need to select a library that allows us to query the registry. In the past, we've used {{winreg}}, but it requires a bit of abstraction to make it nicer to work with. Need to investigate the offerings in NPM and perhaps find a solution that allows us to listen to registry changes."""
"DAEMON-98","Bug","appcd-detect",5,"appcd-detect: watch tests do not exit","""h5.Description    On Windows running the unit tests they appear to 'hang' in a certain place, namely the appcd-detect unit tests and the {{watch()}} describe and the {{should redetect after initial detection}}. skipping that test allows the suite to run through and the process exit fine"""
"DAEMON-100","Improvement","jdklib",8,"appcd-plugin-jdk: JDK 9 is not detected","""h5.Description    JDK 9 has changed the registry key of Windows to {{HLKM\Software\JavaSoft\JDK}}. This needs to be added to [here|https://github.com/appcelerator/appc-daemon/blob/7d3c1dcb3766b7c8157fd68bcd07c1e51f658909/plugins/appcd-plugin-jdk/src/jdk-info-service.js#L158-L159]     Couple notes    - CurrentVersion returns 9, for JDK 8 it was 1.8  - jdklib currently fails to recognise JDK 9, it errors due to a missing JVM library, the jre folder no longer exists it seems. Will file a separate ticket for that  - There is no 32-bit JDK distributed https://stackoverflow.com/questions/46356345/can-java-9-run-on-a-32-bit-os but it can be built, we might not need to support detecting 32-bit if it is not distributed officially"""
"DAEMON-99","Bug","appcd-plugin",5,"appcd-plugin: Plugin host spawns a new console window on Windows","""h5.Description    On Windows when calling to a plugin (for example appcd exec /jdk/latest/info) a new node console window is spawned. This window then stays open until it's either killed by a user or the daemon is stopped. This could be problematic as it means that spawned plugins can pretty much die at the whim of a user.      I'm not sure whether it's fully possible to suppress the window however, recent PR into node might add that behaviour though https://github.com/nodejs/node/pull/15380"""
"DAEMON-102","Bug","appcd",2,"appcd exec --subscribe is not printing data payloads","""When running {{appcd exec /appcd/status --subscribe}}, it doesn't display any of the events despite there being a ton in the daemon log."""
"DAEMON-101","Bug","appcd-plugin",2,"appcd-plugin: Active request counter not decrementing for reloaded external plugin","""Somehow it's possible to make a request to an external plugin using {{appcd exec /<path>}}, then modify the plugin so that it is stopped, yet the active requests counter is not decremented. It's unlikely, but possible, that the request is actually still active after the plugin is stopped."""
"DAEMON-103","Bug","appcd",5,"""appcd start"" should not exit until the daemon has actually finished starting","""When running {{appcd start}}, it will spawn the appcd-core, but then exits with a success code. It doesn't wait for the daemon to actually initialize and load the plugins.    We need the start functionality to listen for an IPC message signalling the daemon is ready to go."""
"DAEMON-105","Bug","appcd-core",5,"config: Able to set a sub-key for keys that should not allow subkeys","""h5.Description    Calling something like the below will set a key on the property even though the key is a boolean in the JSDoc, this occurs on master and my appcd config PR branch        """
"DAEMON-109","Bug","appcd-plugin",2,"appcd-plugin: Calling <plugin-name>/latest does not return the expected info","""h5.Description    When calling {{appcd exec /jdk/latest}} it returns {{404 [object Object]}} it should print the plugin info to the console. It looks like the call is going through the error handler of the request made in the exec command    """
"DAEMON-106","Improvement","appcd-dispatcher",5,"appcd-dispatcher: Create a DataServiceDispatcher class","""There are several services that have very similar functionality where there's a single observable data store that is exposed via a {{ServiceDispatcher}} that supports filtered results and subscriptions. It would super handy (and ingenious) to introduce a {{DataServiceDispatcher}} that takes care of all this boilerplate."""
"DAEMON-116","Improvement","appcd-core|appcd-default-plugins",2,"appcd-default-plugins: Create a pseudo package","""We need a package that the appcd-core can look at to load all the default appcd plugins such as the android, ios, jdk, and windows plugins."""
"DAEMON-117","Improvement","appcd-detect",5,"appcd-detect: Improve code coverage","""Since the appcd-detect refactor, code coverage dropped mainly due to the improved error handling and advanced path watching."""
"DAEMON-119","Improvement","appcd-plugin-windows",3,"appcd-plugin-windows: Allow time interval for detections to be set by user","""h5.Description    Currently the intervals in the Windows plugin are hard-coded, it would be nice to allow a user to specify these themselves if they need to. Something like {{appcd config set appcd-windows-plugin.intervals.devices 5000}} for example. Then the plugin would need to also query the config to see if this is set    More context here https://github.com/appcelerator/appc-daemon/pull/111#discussion_r149122916"""
"DAEMON-122","Bug","appcd-plugin",3,"appcd-plugin: Prerelease versions are not loaded by version ranges","""h5.Description    *This is expected imo but filing for discussion*    If I version my plugin as {{0.1.0-0}} then executing {{appcd exec /myplugin/0.1.X/}} or {{appcd exec /myplugin/^0.1.0/}} will not find my plugin. Executing {appcd exec /myplugin/^0.1.0-0/}} will. This is because semver will never view a prerelease as valid in a non-prerelease version range.    /latest will work, and will load the prerelease version         This is important as it makes how we version things problematic. If we do prereleases then if consumers decide to call with 0.1.X or similar, then they will never get prereleases plugins, and we don't want them calling latest as that will just lead to problems"""
"DAEMON-123","Improvement","appcd-plugin-windows",2,"appcd-plugin-windows: Only wireup lookups when certain condition are met","""h5.Description    As Chris pointed out, it doesn't make much sense to do the detection of devices, emulators etc. if we don't have any visualstudios. We should probably do a VS detection, and then wireup everything else if we find some.    We should also probably only do this if we're actually on Windows too"""
"DAEMON-124","Bug","Tooling",8,"""gulp check"" no longer works properly since switching to workspaces","""Since Yarn workspaces have been enabled, {{gulp check}} is no longer working properly. It checks to see what is installed in the package's {{node_modules}} instead of the top-level workspace {{node_modules}}. Since it doesn't find a particular dependency installed, it says every package is not installed.    While fixing this, we should also make it more parallel so that it can compute the security and package update checks at the same time.    We may also need/want to come up with a more robust way of checking integrity. {{yarn check --integrity}} doesn't work well with Lerna."""
"DAEMON-127","Improvement","appcd-plugin",1,"appcd-plugin: Show more plugin system details","""We need to add more information to the plugin system's status object that is returned when we run {{appcd status --json}} such as the plugin scan paths."""
"DAEMON-126","Improvement","appcd-plugin-genymotion",5,"appcd-plugin-genymotion: Add support for custom deployed directory path","""h5.Description    As it is possible to support changing the deployed genymotion directory we should look into making the lookup of the deployed directory consider this path. On Windows we can query the registry for it (under HCKU\Software\Genymobile\Genymotion), I'm not sure how to find it on OSX and linux. we should also add a config setting called genymotion.deployed just incase it is not possible to find on non-Windows"""
"DAEMON-125","Improvement","appcd-core",1,"WebSocketSession: Allow msgpack to be disabled","""We should add the ability per connection to disable msgpack responses."""
"DAEMON-135","Bug","appcd-detect",8,"appcd-detect: First change rescan emits new event eventhough nothing changed","""When the detect engine is watching a folder where something changes, it triggers a rescan. The first time the rescan is done, the results are merged into the observable model and even though nothing has changed, it will emits an event. It should only emit an event when A) something of interest happens and B) the result has actually changed."""
"DAEMON-134","Improvement","appcd-plugin-android",3,"Android Plugin: Sort NDKs and assign default","""Currently the list of detected Android NDKs is not ordered and no default NDK is selected. This is only an issue if you have more than one NDK."""
"DAEMON-133","Improvement","appcd-plugin-android",3,"Android Plugin: Sort SDKs and assign default","""Currently the list of detected Android SDKs is not ordered and no default SDK is selected. This is only an issue if you have more than one SDK."""
"DAEMON-132","Improvement","appcd",8,"appcd logcat: Add support for a filter","""It would be useful to allow a filter to be passed into {{appcd logcat}} that would only display messages where the message namespace matched the specified filter."""
"DAEMON-131","Improvement","appcd",1,"appcd logcat: Add support for --save <file>","""It would useful if the {{appcd logcat}} command supported a {{--save <file>}} option to save the contents of the log buffer to a file."""
"DAEMON-130","Improvement","appcd",5,"appcd dump: Dump config, status, and log to file or stdout","""It would be helpful to introduce an {{appcd dump}} command that dumps the config, status, and log to a file. This would make bug reporting much, much easier."""
"DAEMON-129","Bug","appcd-plugin-android",13,"Android Plugin: Populate emulator target, api level, and sdk using default Android SDK","""To get the Android emulator's target, api level, and sdk name, we need to pass in an SDK for it to pull those bits of info. The problem is there could be more than one SDK. The Android plugin needs to select the best SDK starting with the one in specified in the config, then pass it into {{getEmulators()}}."""
"DAEMON-128","Bug","appcd-fswatcher",8,"appcd-fswatch: Recursive watching does not appear to work","""In all of my recent testing, recursive filesystem watching does not appear to work regardless of whether a depth is set."""
"DAEMON-140","Bug","appcd-plugin-ios",2,"system-info doesn't return ios information","""Start daemon, load http://localhost:1732/system-info/1.x/info. {{ios}} is {{null}}.  Plugin status:      appcd exec /ios/latest/info returns {{Cannot read property 'value' of null}}  appcd --debug:   """
"DAEMON-138","Bug","appcd-gulp",3,"appcd-gulp: Coverage tests blow up when --trace-deprecation is set","""When trying to get a bit more info about unhandled rejections, Node.js has a flag that can be passed in called {{\-\-trace\-deprecation}}. The idea would be to add this to the {{gulp test/coverage}} task and then we'd see it in the CI logs.    However, when this flag is set, for some reason {{nyc}} blows up because it can't load {{mocha-jenkins-reporter}}. But the rub is {{nyc}} is not supposed to load it. The {{mocha-jenkins-reporter}} is an argument to {{mocha}}, not {{nyc}}.    When adding {{\-\-trace\-deprecation}} and running {{gulp coverage}}, we get the following error:        We can fix that by applying the following patch:        But then we run into a problem where {{mocha-jenkins-reporter}} is expecting a {{mocha}} runner object and {{nyc}} doesn't pass one in.        I believe that {{mocha-jenkins-reporter}} should remain an argument to {{mocha}} and not {{nyc}} and that we need to figure out why {{nyc}} is sniping the {{\-\-reporter}} arg to mocha. Maybe it's doing a blind scrap on {{process.argv}}?"""
"DAEMON-137","Bug","appcd-gulp",3,"appcd-gulp: Local directories are baked into source maps","""The build system uses babel to transpile and generate the source maps. One of the args is the {{sourceRoot}} which is set to an absolute path. This absolute path gets baked into the generated files which is undesirable.    Need to see if we can do relative paths. If that doesn't work, perhaps we need rewrite all of the generated source maps."""
"DAEMON-145","Bug","appcd-plugin-system-info",1,"Subscribe on /system-info/1.x/info doesn't work","""*Problem Description:*    When we subscribe on {{/system-info/1.x/info}} changes - Appcd should publish the changes if any changes in iOS devices, Android devices, Xcode changes, etc.    *To Reproduce:*    # appc appcd exec /system-info/1.x/info/ --subscribe  # Now connect iOS device    *Actual:*  No changes    *Expected:*  Return system-info with the iOS device    Note: {{appc appcd exec /system-info/1.x/info/ios/devices --subscribe}} is working fine  """
"DAEMON-143","Bug","appcd-plugin-system-info|ioslib",1,"iOS simulators are missing in the system-info - intermittent issue","""*Problem Description:*    Can't find the simulators in the /system-info/1.x/info. However, it's an intermittent issue.    *To reproduce:*  # Run sudo npm install appcelerator@4.2.11-2 -g  # Run appc use 7.0.0-master.11  # Run appcd appcd start  # Run appc appcd exec /system-info/1.x/info    *Versions:*  Appcelerator Daemon, version 1.0.0-2  CLI 7.0.0-master.11    Please find the attached system-info  [^system_info2.txt]  and  [^appcd_status_1.0.0-2.txt]   """
"DAEMON-142","Bug","androidlib",2,"system-info doesn't show android info","""I'm using appcd 1.0.0-2 and can't see the android info when I execute {{appc exec /system-info/1.x/info}}    Please find the attached appcd status and system_info files  """
"DAEMON-141","Bug","appcd-plugin-ios|ioslib",5,"Appc Daemon is crashing the terminal and studio ","""*Problem Description:*    MacOS terminal is getting crashed If you start a daemon from a terminal and leave for some time. And, I can't even start a studio due to resource unavailability - it just crashes while launching it.                    Studio crash log:  https://gist.github.com/kolipakakondal/904a50e1031a500e74ee526ec54ea423  """
"DAEMON-159","Bug","appcd-plugin",3,"appcd-plugin: Can't [force] stop a plugin that's starting","""It's possible for a plugin to be started, but activate() to be hung waiting for an unresolved promise. In this case, you can't stop the plugin until it starts.    We should allow plugins to be stopped if the plugin is started, but not activated.    We should allow plugins to be force stopped regardless if it's started, starting, or stopping."""
"DAEMON-158","Bug","appcd",1,"Querying iOS devices results with ""Cannot find module 'plist' ""","""*Description*  Running the command """"appc appcd exec /ios/latest/info/devices""""  errors out with a message cannot find plist    *Steps to reproduce*  1. Install CLI 7.0.0-master.23  2. Start the daemon with """"appc appcd start""""  3. Connect an iOS devices and check that it's recognized eg. appc ti info  4. Run the command """"appc appcd exec /ios/latest/info/devices""""    *Actual result*  This result is seen:  Failed to load plugin: Cannot find module 'plist'    *Expected Result*  An output showing some details about the iOS device that is connected. No errors should be seen."""
"DAEMON-157","Improvement","appcd",1,"appcd: Suppress banner when run through appc","""h5.Description    It was raised that the double banner when running {{appc appcd}} shouldn't happen, we should suppress this, I think we can use the APPC_ENV environment variable to do so, alternatively we could have the CLI push a {{--no-banner}} flag but I prefer the former"""
"DAEMON-156","Improvement","appcd",3,"appcd: Auto import config settings from Titanium CLI","""It would great to be able to import the Titanium CLI config into the appcd user's config in {{~/.appcelerator/appcd/config.json}}.    Mappings would be as such:    * {{android.adb.port}} (Number) -> {{android.adb.port}} (Number)  * {{android.executables.aapt}} (String) -> {{android.executables.aapt}} (String)  * {{android.ndkPath}} (String) -> {{android.ndk.searchPaths}} (Array<String>)  * {{android.sdkPath}} (String) -> {{android.sdk.searchPaths}} (Array<String>)    The list goes on and on... https://wiki.appcelerator.org/display/guides2/Titanium+CLI+Options.    Here's the unmaintained list: https://wiki.appcelerator.org/display/CLI/CLI+Config+Settings."""
"DAEMON-155","Bug","ioslib",1,"ios info is null due to ""Failed to load plugin: Cannot find module 'plist' ""","""I can't see ios info in the  {{appc appcd exec /system-info/1.x/info --json}}    *To reproduce:*  # Run appc use 7.0.0-master.22  # appc appcd exec /system-info/1.x/info --json  # Verify ios info - it's null    Please find the attached appcd dump file. """
"DAEMON-154","Bug","appcd",2,"JSON Strings should be wrapped in double quotes","""json strings are coming in single quotes but it should be in double quotes.    *To reproduce*  # Run {{appc appcd exec /system-info/1.x/info --json --no-banner}}  # Valdiate the output here https://jsonformatter.curiousconcept.com     Studio json parser validation is failing due to this.  """
"DAEMON-153","Bug","appcd",2,"appcd: appcd start --debug should respect a --no-colors flag","""h5.Description    Writing up a guide on how to provide information when reporting issues. Noticed that appcd start --debug --no-colors still logs in colour, would be nice if the debug logs provided by people didnt have the escape codes.    h5.Steps to repro    # appcd start --debug --no-colors    h5.Actual    Colours    h5.Expect    No colours"""
"DAEMON-151","Bug","ioslib",1,"Spawning the ios plugin through appc cli errors with cannot find module plist","""h5.Description      ioslib has a missing dependency which causes an error when distributed in the cli due to the legacy bundling style used.    h5.Steps to reproduce    # {{appc use 7.0.0-master.23}}  # {{appc appcd start && appc exec /ios/latest/info}}    h5.Actual    Error cannot find plist    h5.Expected    No error, environment info returned"""
"DAEMON-148","Bug","appcd-plugin-android",1,"Android emulators missing target, api-level and sdk-version information","""*Problem Description:*  Android emulators are missing target, api-level and sdk-version information - which is available in the ti info and also used in the studio     And also, it doesn't have SDK, NDK and targets information    *To reproduce:*  # appc use 7.0.0-master.19  # appc appcd exec /system-info/1.x/info/android   # Verify android emulator information    *Actual:*  No api-level,sdk-version and target in the emulator    *Expected:*  We should have all the information which is provided in the ti info    Please find the attached android info file  [^android_info.json]   """
"DAEMON-147","Improvement","appcd",2,"appc status: Hide windows-Plugin for unix / macOS machines","""When running {{appcd status}}, the following (red) line occurs:    It's not an issue because I am not running on Windows, but it would be """"UX friendly"""" to either hide it on the mac or just say """"Not available"""" like Studio does for the Windows SDK."""
"DAEMON-166","Bug","appcd-plugin-android",8,"appcd-plugin-android: Plugin activation hangs if no Android SDKs are found","""If the system does not have any Android SDKs, the detect engine will return an empty array, however since it is initialized to an empty array, there's no change and thus no notifications and the detection hangs.    The fix requires a check if the results are empty, then resolve the SDK detection. However in doing this, it exposed a timing bug with NDK detection."""
"DAEMON-163","Bug","androidlib|appcd-plugin-android",2,"Windows OS:  /system-info/1.x/info command is not responding","""/system-info/1.x/info command hangs on the windows machine. It's an intermittant issue.    Looks like it's getting into recursive loop on """"Detecting devices info"""""""
"DAEMON-162","Bug","appcd-plugin-windows|windowslib",3,"Windows system-info: 10.0 SDK emulators are not shown","""Windows Phone SDK 10.0 emulators are missing in the windows system-info.  """
"DAEMON-161","Bug","appcd-plugin-windows",1,"Windows: Visual Studio path is incorrect in the system-info","""Visual studio path is incorrect in the windows system-info path    *Actual:*  C: /ProgramFiles(x86)/MicrosoftVisualStudio14.0/    *Expected:*  C:\Program Files (x86)\Microsoft Visual Studio 14.0      Same goes for the Windows Phone SDK path    *Actual:*  C: \ProgramFiles(x86)\MicrosoftSDKs\WindowsPhone\v8.1\    *Expected:*  C:\Program Files (x86)\Microsoft SDKs\Windows Phone\v8.1  """
"DAEMON-160","Bug","appcd-plugin-ios|ioslib",5,"ioslib: Versioning of package on npm is causing issues","""h5.Description    *I know this isn't really a proper ticket but I needed somewhere to dump this*    Currently the ioslib version being pulled in is ioslib@2.0.0-beta.3 based off the version range of ^2.0.0-8. This (surprisingly to me) is correct in semver land and 2.0.0-beta.3 is considered to be greater than 2.0.0.-10 https://runkit.com/ewanharris/5a0e34d8e7d5da001228faf7    So currently we're borked and need a way out, here's the possible solutions, in no order.    # Bump ioslib to become ioslib@2.0.0-beta.4, replacing 2.0.0.-10  # Change the appcd-plugin-ios dependency to next, stay like this  # Change the appcd-plugin-ios dependency to next, ask npm nicely to remove ioslib@2.0.0-beta.3 (I dont see why they wouldnt), then eventually move back to ^2.0.0-10 version ranges.  # Release ioslib@2.0.1-0, move appcd-plugin-ios to ^2.0.1-0    I vote for 3 or 4 with an added sprinkle of promising to never do -beta.X on npm packages again :)"""
"DAEMON-169","Bug","appcd-plugin-ios",3,"Issues with Xcode info returned","""Couple of issues found in the Xcode information returned when querying """"appc appcd exec /ios/latest/info""""    1. Any Xcode that is not present in the /Applications is not returned    2. The latest xcode in the system is returned as default even after switching to another xcode for default.   Check the attached """"appcd.txt """" for output of running the """"appc appcd exec /ios/latest/info"""" and the """"appcCLI.txt"""" for output running """"appc ti info -t ios""""    The Xcode in downloads folder was made default but daemon output returns the latest code in /Applications as the default and does not list the Xcode in /downalods """
"DAEMON-168","Bug","ioslib",1,"appId is missing in the provisioning profiles","""appId is missing in the provisioning profiles"""
"DAEMON-167","Bug","androidlib",13,"Android and Genymotion emulators are empty","""Android and Genymotion emulators are shown empty on the latest daemon 1.0.0-12    Please find the attached files"""
"DAEMON-173","Bug","appcd-plugin-windows",8,"windowslib: EBUSY error on wptool executable","""h5.Description    When running appcd exec /system-info/1.x/info/ it seemed to be taking longer than usual to return, checking the logs I saw the below, I think it's possible that two detect processes are attempting to build wptool at the same time. We apparently deal with this inside windowslib but it seems to be flaky, it might be wise to stagger the detects to allow one to build before the other runs    I've had trouble reproducing this in an appc cli build fwiw        h5.Steps to reproduce    # Remove wptool.exe from windowslib/bin folder  # Start the daemon {{[appc] appcd start}}  # Query system info {{[appc] appcd exec /system-info/1.x/info/}}    h5.Actual    Plugin hangs, windows error above shown in logs    h5.Expected    No hang"""
"DAEMON-171","Improvement","appcd",2,"appcd: Stop any running daemon instances post npm install","""After installing the Appc Daemon, the post install script should use the just installed Appc Daemon code to stop so that the new code will be run."""
"DAEMON-170","Improvement","appcd-default-plugins|appcd-plugin-android|appcd-plugin-genymotion|appcd-plugin-ios|appcd-plugin-jdk|appcd-plugin-system-info|appcd-plugin-windows",13,"Move plugins out of appcd-daemon repo into separate repos","""Once Appc Daemon 1.0.0 ships, we should move the plugins out of the {{appcd-daemon}} repo and into separate repos. This will allow each plugin to be versioned independently of each other and the Appc Daemon core.    Also move {{appcd-default-plugins}} into a separate repo so that we can add/remove plugins without having to publish a new appcd."""
"DAEMON-176","Improvement","appcd-plugin-genymotion|appcd-plugin-ios|appcd-plugin-jdk|appcd-plugin-system-info|appcd-plugin-windows",2,"Plugins: Pickup the imported values from the titanium config","""h5.Description    DAEMON-156 implemented importing the ti config, so lets implement it into the plugins. We should also watch the config for these values so we rescan if they get set"""
"DAEMON-182","Improvement","androidlib",5,"androidlib: Addons with a manifest.ini not detected","""At some point, Android SDK add-ons moved away from {{source.properties}} files and to a {{manifest.ini}} file. We need to support both."""
"DAEMON-181","Improvement","appcd-config",8,"appcd-config: Figure out how to set metadata for non-appcd config settings","""We currently do not have plugins define metadata for plugin specific config options. Plugins do not have access to the main config object, thus they cannot directly add metadata.    One solution would be for the plugin system to read a plugin specific metadata config and merge it into the main config."""
"DAEMON-179","Bug","androidlib",8,"Android NDK is blank in system-info ","""The android info fetched using """"appc appcd exec /android/latest/info"""" returns Android NDK as blank.    Attached is the android output returned by appcd and appc cli"""
"DAEMON-178","Bug","appcd",1,"Sync ""appc ti config"" with the ""appc appcd config"" ","""How and when do we sync {{appc ti config}} settings to {{appc appcd config}} - so that when studio is working with Appc Daemon it can only look for {{appc appcd config}}    Since everybody is trained to work with {{appc ti config}} and they might configure android.sdkPath, sdk.selected,etc., and expect they will be picked up directly in the studio    Any thoughts around it?  """
"DAEMON-185","Bug","appcd",1,"Unable to stop the daemon ","""Unable to stop the daemon using {{appc appcd stop}}. It's an intermittent issue - doesn't have all the time. However, it doesn't have any impact on the studio for 5.0 release.    """
"DAEMON-184","Bug","windowslib",5,"windowslib: Unable to build wptool project on a machine where the username contains spaces","""h5.Description    *This isn't a new bug, just exposed by how we decided to expose appcd*    One of my machines has a space in the name, this causes an error when building the wptool executable and we're not in the temp dir, we need to escape the project path correctly"""
"DAEMON-189","Bug","androidlib",3,"System-info doesn't have newly created Android AVD","""System-info doesn't have newly created android AVD. I've created a new android AVD from the studio and it appeared in the ti info but not in the appcd system-info.    Please find the attached files.   [^appcd_dump_master44.json]    [^appcd_systeminfo_master44.json]    [^appc_tiinfo_master44.json] """
