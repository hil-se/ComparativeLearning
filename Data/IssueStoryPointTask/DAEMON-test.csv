"issuekey","type","components","storypoint","title","description_text"
"DAEMON-260","Bug","androidlib",5,"Android configuration issues with the Studio 5.1.0","""Hi all.  I am having issues with Studio on my Mac. It seems to randomly not know that I have Android SDKs installed.  It worked last week.  Just this morning, I start up studio and on the dashboard I see that Android is ready to go.  Then an few seconds later it changes to grayed out and the button says download.  I click download and run the install - when I do it recognizes that I already have some versions of the SDK installed.  But once through the install process, the problem still exists.  I have been doing this all morning.  An interesting point is that one of the times I did this process, it worked and I saw the emulators that I have always had available in Studio.   Also note that the preferences pane in Studio sometimes shows that it has found the SDKs and the emulators dropdown is populated, but most of the time it looks like the attached screenshot.  Any help would be greatly appreciated as I am unable to do Android mobile demonstrations and I have several in the near future.  Thanks in advance."""
"DAEMON-263","Improvement","appcd-core",2,"appcd-core: Add AMPLIFY CLI version to telemetry","""Add AMPLIFY_CLI env var to the telemetry payload."""
"DAEMON-265","Improvement","appcd-plugin",3,"appcd-plugin: Expose services in plugin info","""Wouldn't it be cool if plugin info included a list of service endpoints!?"""
"DAEMON-267","Improvement","appcd-core",1,"Investigate possibility of bi-directional websocket requests","""."""
"DAEMON-266","Bug","appcd",8,"appcd exec doesn't properly handle streamed responses","""There is an issue where non-subscription based responses are not being terminated when finished. The problem stems from the {{WebSocketSession}} not properly sending a {{fin: true}} on the last message and the client not handling the last message in the request."""
"DAEMON-270","Bug","appcd",5,"Appcd Deamon not working ","""*Steps To Reproduce:*  1.Run  appcd command in terminal    *Expected:*  Daemon should be restarted   *Actual:*  The daemon refuses to start and throws error  An uncaught exception was thrown!  Cannot destructure property `filesize` of 'undefined' or 'null'.  Cannot destructure property `filesize` of 'undefined' or 'null'.  *Note1:*  For me when I changed the cli to 7.0.9 ,it worked fine.  *Note 2:*  For Josh Quick ,this happens with CLI v7.0.9 also and he tried with node v8.9.3 and v10.15.0  â€‹ It also causes Appc Studio to beach ball forever"""
"DAEMON-272","Improvement","appcd-subprocess",5,"appcd-subprocess: Remove HTTP source check","""The {{SubprocessManager}} has a false security measure where only requests from internal routes and plugins and requests from WebSockets can spawn commands. Requests from HTTP are forbidden.    Since WebSockets requests are essentially HTTP requests, there's no point blocking HTTP requests. The daemon's web server listens on localhost only, so there's no way for an outside actor to spawn a command.    To make things worse, the check to see if the source is indeed """"http"""" is broken. It checks if {{ctx.request.source}} is """"http"""" when it should be checking {{ctx.source}}.    This restriction is pointless and does not work. It should just be removed."""
"DAEMON-271","Bug","appcd-dispatcher",5,"Error streaming object responses to HTTP clients","""When a request is made to a service from an HTTP client, such as {{curl}}, that streams an object response, the dispatcher context's response stream is eventually piped into Koa's HTTP server's response stream which expects streamed chunks to be either strings or buffers. When an object is streamed, an error is thrown.    The solution is to stringify the object before it gets piped to the server response."""
"DAEMON-273","Improvement","appcd-plugin",8,"appcd-plugin: Tunnel messages missing dispatcher context props","""Plugins run in a child process and communicate with a parent process using an IPC-based tunnel. However the tunnel does not translate over the {{headers}} and {{source}} from a {{DispatcherContext}} instance.    Instead of passing the {{DispatcherContext}}'s {{request}} property, the tunnel needs to step up one level and pass the {{headers}}, {{path}}, {{request}} (formerly """"data""""), and {{source}}."""
"DAEMON-274","Improvement","appcd-config|appcd-config-service|appcd-plugin",8,"appcd-config: Added support for config layers to be used by plugins","""Plugin configs are loaded and mixed with the global config, but it's merged at a global level and once merged, remains merged until the daemon is stopped. It also doesn't namespace the plugin configs.    To solve this, {{appcd-config}} needs the ability to define config layers. There is a default root layer, but then each registered config file from plugin is a new layer. These plugin config layers are namespaced so that they don't conflict.    Note that this does not affect the user-defined config which overlays everything."""
"DAEMON-275","Improvement","appcd-gulp",5,"appcd-gulp: Add Node.js 12 babel conf","""Node.js 12 ships with V8 that supports new JavaScript features that do not require transpilation. Among the new features are class fields.    Node 12 also has support for modules, though this may be a larger scope than simply removing ES6 module transpilation."""
"DAEMON-276","Improvement","appcd-winreg|windowslib|winreglib",5,"Deprecate appcd-winreg","""Now that {{winreglib}} is done, there is no need for {{appcd-winreg}}, so mark the npm package as deprecated and update the following packages to use {{winreglib}} instead:  * {{appcd-detect}}  * {{appcd-response}}  * {{appcd-machine-id}}"""
"DAEMON-277","Improvement","appcd-plugin",2,"appcd-plugin: Remove appcd-winreg in appcd-plugin@4.0.0","""{{appcd-winreg}} is deprecated and plugins should either migrate to {{winreglib}} or explicitly depend on {{appcd-winreg}}."""
"DAEMON-278","Improvement","windowslib",1,"windowslib: Add ability to get remote device info","""Microsoft made a handy API we should use: https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/device-portal-api-core."""
"DAEMON-280","Improvement","appcd-default-plugins",13,"appcd-default-plugins: Bundle multiple plugin versions","""Now that there are multiple major versions of appcd plugins, we need figure out a way to ship them. Some tools depend on v1, others on v2. We need both.    Ideally plugins would be installed via the AMPLIFY Package Manager, but we're not quite there yet. So, it makes sense to use {{appcd-default-plugins}} as the package.    The appcd plugin system does support a nested plugin directory scheme, but this is incompatible with {{node_modules}}. So we'll likely need a pre-publish task that organizes the files appropriately and efficiently."""
"DAEMON-281","Bug","appcd-plugin",8,"appcd-plugin@1.4.0 is not compatible with daemon@1.x","""h5.Description    appcd-plugin@1.4.0 is causing plugins to error on startup when using appc daemon 1.x (the appc cli). I have not got any useful logs for this yet. I have rolled back the latest tag for appcd-plugin to 1.3.0 to prevent new users having any issues    cc [~cb1kenobi]"""
"DAEMON-282","Bug","appcd-plugin-ios|ioslib",5,"iOS: Daemon fails to detects iOS 13 simulators","""h5.Description    When using appcd 1.1.3 the ios plugin fails to detect iOS 13 simulators installed via xcode 11. This is fixed in ioslib 3 (and the upcoming v2 of appcd-plugin-ios) but we need to cherry pick the ioslib changes back to v2 to ensure appcd 1.1.3 works for ios 13/xcode 11 release"""
"DAEMON-283","Bug","ioslib",2,"Daemon reports iOS Simulator listing as only 9.3 devices with multiple Xcode's, sim versions installed","""I'm trying to test debugger changes within Studio around iOS 13. However, the simulator listing displayed shows the list of 9.3 simulators only.    I have Xcode 10.3 and 11 beta 6 installed. 11 beta 6 is selected.    The JSON info object returned by the daemon only has the 9.3 iOS simulators listed within it. (though the Xcode listings shows 12.4 and 13.0 in it's sim/sdk version listings)    As a result, trying to launch to any of the listed simulators ends up failing (around Xcode 10.3 Eula not being accepted - which is presumably related to Xcode 11 being the selected/used one).    Here's the result of running {{ti info}}:  """
"DAEMON-284","Bug","appcd-core",8,"Fix offline support","""The daemon doesn't work as expected without an Internet connection. Problems arise with installing default plugins and sending telemetry info. There may be other areas."""
"DAEMON-285","Bug","appcd-plugin",13,"Unsubscribe in external plugin service dispatcher not called when forcefully closing connection","""Canceling a subscription to a service dispatcher in external plugins won't properly trigger the cleanup logic since the plugin isn't notified about the end of response stream like it is happening in internal plugins.    *Steps to reproduce the behavior*  # Open a subscription to any internal plugin, e.g. {{appcd exec /appcd/status/system/memory --subscribe}}, and then cancel the subscription by CTRL+C  # Notice that the subscription will be properly cleaned up as indicated by the following logs:    # Now, do the same for an external plugin, e.g. run {{appcd exec /titanium/latest/sdk --subscribe}} and then cancel the subscription by CTRL+C  # No subscription cleanup is done as you can see in the following logs      *Actual behavior*  Subscriptions in external plugins are not properly cleaned up and a service dispatchers {{onUnsubscribe}} and {{destroySubscription}} are not being called.    *Expected behavior*  A subscriptions cleanup logic is properly being executed for external plugins."""
"DAEMON-287","Improvement","appcd-response",5,"Remove winreglib dependency from appcd-response","""appcd-response is used by several packages such as appcd-subprocess which is used by non-appcd projects. appcd-response needs to detect the locale in order to display the appropriate message. On Windows machines, the locale is retrieved from the Windows Registry.    Previously, appcd-response@1.x uses appcd-winreg (now deprecated) which in turned used winreg to simply spawn the {{reg.exe}} command and query the registry.    When appcd-winreg was sunset, it was replaced with the new winreglib, a native Node.js addon. Now when a non-appcd project uses something like appcd-subprocess, it will depend on winreglib and that complicates install issues for specific environments such as Atom plugins on Linux.    The solution here is to replace appcd-response's winreglib dependency with two simple {{spawnSync()}} calls."""
"DAEMON-288","Bug","appcd|appcd-nodejs",8,"SIGINT triggered in core process","""When a process spawns {{appcd start}}, then that process is interrupted via CTRL-C (aka SIGINT), then the core daemon process receives the SIGINT also and shutsdown. The daemon should not be receiving the SIGINT."""
"DAEMON-306","Bug","ioslib",8,"iOS info missing watch info in simRuntimes with the cli 7.1.2-master.6","""When testing via studio the watch simulators were not shown when using Appc CLI 7.1.2-master.6. It works fine with older appc cli builds.  Running the command """"appc appcd exec /ios/latest/info"""" noticed that the simRumtimes are missing the info related to watch."""
"DAEMON-307","Bug","appcd-default-plugins",5,"Plugins not installed if access denied to yarn links directory","""If the yarn links directory exists, but access is denied, it blows up and the daemon does not properly install any plugins.        Reading the yarn links directory is an optional check and thus we simply need to gracefully handle access and continue to install the plugins."""
"DAEMON-308","Bug","appcd-plugin",8,"Plugin manager telemetry doesn't wait for initialization","""The {{PluginManager}} scans the initial plugin paths and then enables telemetry. The problem is detecting the plugin schemas is async and the {{PluginManager}} constructor does not properly block the enabling of telemetry events.    This behavior is leading to events unnecessary telemetry events being generated during start for each plugin."""
"DAEMON-309","Story","appcd-plugin",13,"Add appcd plugin API version","""The Appc Daemon's plugin system allows plugins to specify which appcd version they are compatible with, however we have to ship new plugins for each major plugin version whenever we bump the appcd major version regardless if the plugin system actually changed.    Since the plugin system rarely changes, we shouldn't couple plugins with the appcd version, but rather a separate plugin API version.    For example, the iOS appcd plugin 1.x is compatible with every appcd version, but iOS appcd plugin 2.x requires appcd version 3.x because of changes to appcd-detect that is passed into each plugin."""
"DAEMON-310","Bug","appcd-plugin-android",8,"@appcd/plugin-android: Fails to start with Error: Recursively watching root is not permitted","""H5.Description    When attempting to start the android plugin I'm getting the below error, this works fine on CLI  7.1.2 (plugin version 1.3.0/appcd version 1.1.3) and CLI 8.0.0-master.4 (plugin version 1.5.2/appcd 3.1.0) (note are we not choosing to lock down plugin versions per default-plugin release, this re-introduces the risk that we had previously worked to eliminate)        h5.Steps to reproduce    1. Install appc cli 8.0.0-master.5 from preprod  2. Start the daemon {{appc appcd start}}  3. Call the android endpoints {{appc appcd exec /android/1.x/info}} and {{appc appcd exec /android/2.x/info}}    h5.Actual    Above error    h5.Expected    No error, android info should be returned"""
"DAEMON-313","Story","androidlib|appcd|appcd-plugin-android|appcd-plugin-genymotion",13,"Remove Genymotion","""The time has come to remove support for Genymotion. The Android emulator has matured and thanks to advances in virtualization technology, it is quite fast. Secondly, Genymotion is not free and it's not like they ever gave us any licenses. Thirdly, we don't want to maintain a second emulator technology, especially one that has only does x86 emulation and often causes incompatibility issues with Titanium native modules.    1. Remove the [code|https://github.com/appcelerator/appc-daemon/blob/bf20fec94c74e055e4359a8e123539054c4cb228/packages/appcd-core/src/server.js#L482-L486] in appcd-core that copies the Genymotion config from the Titanium CLI's config to the appcd config. Bump minor.    2. Deprecate [@appcd/plugin-genymotion|https://github.com/appcelerator/appcd-plugin-genymotion].    3. Remove all references to Genymotion and VirtualBox in [@appcd/plugin-android|https://github.com/appcelerator/appcd-plugin-android]. Bump major.    4. Remove all references to Genymotion in [@appcd/plugin-system-info|https://github.com/appcelerator/appcd-plugin-system-info]. Bump major.    5. Remove all references to Genymotion and VirtualBox in [@appcd/plugin-titanium|https://github.com/appcelerator/appcd-plugin-titanium]. Bump major.    Since we're removing data from the info, this is breaking change and everything (except appcd itself) must have a major version bump."""
"DAEMON-316","Story","docs",8,"Docs: Generate release notes","""Each appcd package has a changelog, but there's no high-level release notes that consolidates the changelogs. It would be beneficial to have a tool that pulled determined Appc Daemon releases and merge the release notes per version."""
"DAEMON-315","Story","docs",5,"Docs: Appc Daemon releases with plugin API, Node versions","""Document Appc Daemon releases and their plugin API versions.    For the meantime, this can go in the markdown docs in the repo."""
"DAEMON-314","Improvement","appcd",5,"Add plugin API version to appcd status","""It would be helpful if the appcd status also displayed the plugin API version."""
"DAEMON-317","Improvement","Titanium CLI",8,"Titanium CLI: Call latest major version of Titanium appc plugin","""The Titanium appcd plugin ships with the Titanium CLI as well as the Appc Daemon default plugins (which is going to change). If the Titanium CLI references @appcd/plugin-titanium@1.1.0, but the default plugins references v1.2.0, then the Titanium CLI should call 1.2.0, not 1.1.0.    To solve this, simply call the major version:    """
"DAEMON-322","Improvement","androidlib",8,"androidlib: NDK side-by-side support","""*Summary:*  As of 2019, Google introduced a new NDK """"side-by-side"""" feature which allows you to install multiple NDK versions under the Android SDK directory. All new NDK versions are downloaded to the side-by-side directory and it replaces the old """"ndk-bundle"""" directory.    *Example:*  The folder structure appear as follows on macOS...  {{~/Library/Android/sdk/ndk/19.2.5345600}}  {{~/Library/Android/sdk/ndk/20.1.5948922}}  {{~/Library/Android/sdk/ndk/21.0.5935234}}  {{~/Library/Android/sdk/ndk/21.0.6113669}}    There will be an """"ndk"""" directory under the """"Android/sdk"""" directory. Each subdirectory under """"ndk"""" will be the version number of the installed NDK.    *Old Behavior:*  Before the NDK side-by-side feature existed, Android Studio used to install the NDK under the Android SDK directory as shown below. Updating the NDK version used to replace the old version. Android Studio no longer installs to this directory.  {{~/Library/Android/sdk/ndk-bundle}}    *To be done:*  The CLI should search for the installed NDK directory in the following order.  # The """"ANDROID_NDK"""" environment variable, if set.  # The newest NDK side-by-side version subdirectory, if available.  # The """"ndk-bundle"""" directory."""
"DAEMON-319","Story","appcd-core",2,"appcd-core: Upgrade to latest Node.js 12 LTS release","""While the daemon supports Node 10, we should update the core to Node 12 so that we can use the latest features such as workers.    Node.js doesn't gain us much as far as removing Babel transpilation. We could switch over to ES modules, but we still need to transpile for dynamic imports and optional chaining. We probably cannot remove Babel until Node 14 goes LTS in late 2020."""
"DAEMON-328","Story","appcd-plugin",3,"appcd-plugin: Registered plugins not sorted when retrieving status for semver range","""When getting the status of a plugin where the version is a semver range, it will scan all plugins for a match by name and version. The order of the registered plugins is whichever order they were loaded. The list of plugins must be sorted in order to deterministically find the plugin.    If you have @appcd/plugin-titanium v1.6.0 and v1.8.1 installed, getting the status for {{^1.6.0}} should return v1.8.1.    """
"DAEMON-326","Story","appcd-plugin-titanium",8,"@appcd/plugin-titanium: Add terminal session server with discovery endpoint","""The Titanium CLI needs bi-directional communication with the Titanium plugin, however the Appc Daemon dispatcher is not capable of supporting true bi-directional data flow, but rather just single request, multi-part responses.    To work around this, we need the Titanium CLI to locate the Appc Daemon, start it, ensure the Titanium appcd plugin is registered, and call a terminal discovery endpoint. From there, the Titanium CLI will connect to the terminal session endpoint via a WebSocket."""
"DAEMON-330","Bug","appcd-default-plugins",8,"Lerna cannot find Yarn when installing default plugins on Windows","""appcd-default-plugins can find Yarn, but Lerna cannot. Probably a bug that is easily reproducible on a clean Windows machine as a dev machine likely has Yarn already installed.    System is running Node.js 10.13.0. Appc Daemon core is running Node.js 10.16.3.        This ticket may moot with the new plugin management command (DAEMON-311) and the upgrade to Yarn 2 (DAEMON-318)."""
"DAEMON-329","Bug","winreglib",8,"node_winreglib.node is not a valid Win32 application","""User installs Appc Daemon 3.2.0 with Node.js 10.13.0. When the daemon starts up, the Windows plugin cannot load winreglib:        Note that winreglib uses N-API and is compatible with Node.js 10.2.0 and newer and that the Appc Daemon 3.2.0's core runs Node 10.16.3.    This might be a Windows-only issue as Windows is general the only platform in which plugins are installed at daemon install time, Mac/Linux run into permission issues and have to resort to installing plugins at runtime. This behavior will change in DAEMON-311"""
"DAEMON-331","Bug","appcd",1,"Windows - Android: ""No Android SDKs were found under the specified location"" ","""When trying to create an application in Appcelerator Studio the following message can be seen in the application creation screen. """"No Android SDKs were found under the specified location"""".    When doing an {{appc appcd status}} from the CLI the following can be seen in the plugins section:       """
"DAEMON-332","Bug","Appc CLI|appcd-default-plugins",5,"appcd-default-plugins: Yarn and Lerna not found from Appc CLI on Windows","""appcd-default-plugins locates lerna and yarn by their {{.cmd}} bin script. However, since the Appc CLI package is built on a Linux machine, npm doesn't create the {{.cmd}} files and thus is not able to find them.    While appcd-default-plugins would have no problem resolving the lerna and yarn bin scripts directly, {{lerna bootstrap}} calls {{yarn}} and expects the shell (e.g. cmd.exe) to locate the {{.cmd}} file and run it. So, we need the {{.cmd}} files.    Adding the {{.cmd}} files to the Appc CLI package when it's being built is probably too much work, instead we can to generate them using the same {{bin-links}} package npm uses."""
"DAEMON-334","Story","appcd",3,"appcd: Drop support for Node 8 and older","""Node 8 is no longer in maintenance after Dec 31, 2019 and npm dependencies are starting to depend on Node 10 as a minimum.    In Daemon 4.0, we need to bump the minimum supported Node version to {{>=10.2.0}}.    We choose 10.2.0 so that we get N-API 3 needed by native deep dependencies."""
"DAEMON-337","Improvement","Tooling",13,"Add multiple platform and Node.js testing to Jenkinsfiles","""The Appc Daemon has the ability to run unit tests on all platforms and multiple Node.js versions, however, no other product does. We need a new function added to our internal Jenkins {{pipeline-library}} that adds test matrix ability and normalize the various Jenkinsfiles into a single standard solution that should work for most cases."""
