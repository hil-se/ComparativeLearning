"issuekey","type","components","storypoint","title","description_text"
"ALOY-1295","Bug","Models",5,"Windows: App crashes when calling fetch() method on a collection bound to a view","""REPRODUCTION:  Create a new Alloy project and overwrite the files with the versions from the attachment.  Run the project in the Windows emulator.    RESULTS:  The app crashes with the following error:      OTHER INFO:  Comment out the Alloy.Collections.book.fetch() method in the app/controllers/index.js file and the application runs fine.  """
"ALOY-1297","Bug","XML",3,"Cannot use localized strings for AlertDialog ButtonNames in XML","""Create a new Alloy project and overwrite the files with the one in the attached ZIP file.  Run the project.    RESULTS:  The dialog displays the localize function and not the value.  See attached screenshot.    OTHER INFO:  Works fine in the TSS."""
"ALOY-1299","Bug","Tooling",3,"Cannot build a new project for iOS due to missing appicons","""Cannot build to iOS simulator or device. Error shown during build for missing appicons.    This is a regression as the issue does not occur on 4.1.0.GA    Steps to Reproduce:  1. Create a new titanium project  2. Build it for iOS simulator or device    Actual Result:  An error is shown      Expected Result:  The project should build successfully for iOS"""
"ALOY-1300","Bug","Tooling",3,"iOS: Assets Catalog inconsistency between Alloy and Classic","""Comparing the folders *Assets.xcassets* in the generated build folder between a classic and alloy project, the alloy *AppIcon.appiconset* and *LaunchImage.launchimage* contains inconsistent images, even though the file naming convention is correct. See attached images for comparison.    h4. Steps to reproduce  1. Create a ti classic project: ti create  2. enter project folder  3. Create Alloy: alloy new  4. Compile Alloy: alloy compile --config platform=ios  5. Build project: ti build -p ios -I 9.0    h4. Expected result  images in assets catalog should be consistent    h4. Actual result  appicon-60@2x.png and appicon-60@3x.png is different from the rest  Default-Landscape-736h@3x.png and Default-667h@2x.png and Default-Portrait-736h@3x.png is different from the rest    *Note*: because of this, appc run is seeing the same issue."""
"ALOY-1627","Bug","Tooling",5,"Breakpoints not working on alloy apps","""Sprint noticed their their break points aren't working on conditions in their alloy apps. I've been able to verify this with my own testing on a fresh application. To clarify (âžœ == break point):        h3. Steps to reproduce  1. Create a new alloy app within Appcelerator Studio  2. Add the above if statement with a breakpoint on the conditoin  3. Run in debugging mode    h3. Expected  The code pauses on the if statement and doesn't call console.log()    h3. Actual  The code is ran as if the breakpoint isn't there. """
"ALOY-1302","Improvement","Tooling",5,"Alloy needs to have a consistent behavior with Ti on App Icons","""See related ticket. Currently the behavior in managing the app icons is different. This ticket has to address and make them consistent.  With the related ticket, a DefaultIcon.png WILL BE copied into the project's root when {{alloy new}} is run.    h4. Test cases APPC CLI :  A. Brand new project via Appc. *appc new* *appc run -p ios*  B. *appc run -p ios -T dist-adhoc*  C. Scenario where DefaultIcon.png (use attached [^DefaultIcon.png] in ticket), and ALL icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] exists, but are different from DefaultIcon.png. (This is the situation when a user decide to IGNORE the DefaultIcon.png and have his very own other icons). *appc run -p ios*  D. Scenario where DefaultIcon.png is missing, but ALL icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] exists. (This is the situation when a user updates an existing project to the latest SDK). *appc run -p ios*  E. Scenario where DefaultIcon.png is missing, but SOME icons described [here|http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens] are missing. (This is the situation when a user updates an existing project with missing icons to the latest SDK). *appc run -p ios*    h4. Expected Results:  A. Build success. See inside build->iphone->Assets.xcassets and see these files [^defaultContent.png]  B. Build success. See inside build->iphone->build->Products->Release-iphoneos->SGIcon.app->Show Package Content, there's the iTunesArtwork.png and iTunesArtwork@2x.png  C. Build success. User's icons should be prioritized over the use of DefaultIcon.png. See inside build->iphone->Assets.xcassets and see these files [^withDefaultAndAllIcons.png]  D. Build success. See inside build->iphone->Assets.xcassets and see these files [^defaultContent.png]  E. Build Fail. See error prompt       h4. Actual Result:  A. Build success. But the content of build->iphone->Assets.xcassets is inconsistent. [^appcdefaultContent.png] In tooling, we have to remove all the existing icons in the Resources folder so that DefaultIcon.png can do it's job.  """
"ALOY-1304","Improvement","XML",3,"Alloy: Support Node text for TextField and TextArea","""The following sample and attached screenshot shows that {{TextArea}} and {{TextField}} do not support using node text to set the {{value}} property.        This is in line with [documentation|http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_XML_Markup-section-35621528_AlloyXMLMarkup-PropertyMapping] so not a bug, but a feature request."""
"ALOY-1305","Bug","Tooling",1,"deepclean.js syntax error in line 17: missing semicolon;","""Upgraded to Appcelerator Studio 5 and changed the tiapp.xml for the app (I have been in the process of developing for several months now targeted for iOS/iPad) to use Titanium SDK 5.0.0 GA.    Experienced the following issue any time I try to build the app (iOS app for iPad 2):    deepclean.js regenerates itself and results in a missing semicolon.    This is traceable to a syntax error in the GitHub source code    https://github.com/appcelerator/alloy/blob/12310dda3b987292ee1bbbbcfdd129af6b6c5cfc/hooks/deepclean.js    I have not enough experience with the platform to know how to proceed in resolving this issue.    """
"ALOY-1308","Bug","Tooling",0,"iTunesArtwork is being copied into Resources/iphone instead of project root","""The iTunesArtwork and iTunesArtwork@2x files are being copied from the assets/iphone directory into the Resources/iphone directory when actually they should be copied in to the project root."""
"ALOY-1313","Improvement","Tooling",5,"Add ""bugs"" URL to package.json","""Adding a URL to the location of where """"bugs"""" are filed makes it easier for developers.    """
"ALOY-1315","Story","Tooling",3,"Update out-of-date Alloy dependencies.","""There are a number of out-dated Alloy dependencies, we should update them to the latest stable versions.    {quote}  """"colors"""" can be updated from 0.6.0-1 to 1.1.2 (Installed: none, Latest: 1.1.2)  """"pkginfo"""" can be updated from 0.2.2 to 0.3.0 (Installed: none, Latest: 0.3.0)  """"commander"""" can be updated from 0.6.1 to 2.8.1 (Installed: none, Latest: 2.8.1)  """"wrench"""" can be updated from 1.3.9 to 1.5.8 (Installed: none, Latest: 1.5.8)  """"jsonlint"""" can be updated from 1.5.1 to 1.6.2 (Installed: none, Latest: 1.6.2)  """"uglify-js"""" can be updated from 2.4.15 to 2.4.24 (Installed: none, Latest: 2.4.24)  """"source-map"""" can be updated from 0.1.9 to 0.5.1 (Installed: none, Latest: 0.5.1)  """"moment"""" can be updated from 2.7.0 to 2.10.6 (Installed: none, Latest: 2.10.6)  """"node.extend"""" can be updated from 1.0.10 to 1.1.5 (Installed: none, Latest: 1.1.5)  {quote}"""
"ALOY-1314","Bug","Titanium SDK",1,"Alloy: Remove alpha channel from DefaultIcon.png","""Xcode does not accept app icons with alpha channel in it, please remove the alpha channel for DefaultIcon.png"""
"ALOY-1316","New Feature","XML",2,"Support use of $.args.* in any XML attribute or TSS property","""We now support using {{$.args}} in XML {{if=$.args.foo}} attributes. However, it would be very useful if you could use it as value of any attribute, as well as value in TSS.    The following should then result in a Window containing a label that says _bar_:    *index.xml*  {code:xml}  <Alloy>   <Window class=""""container"""">    <Require src=""""foo"""" foo=""""bar"""" />   </Window>  </Alloy>  {code}    *foo.xml*  {code:xml}  <Alloy>   <Label text=""""$.args.foo"""" />  </Alloy>  {code}    Currently this compiles to:    {code:javascript}      $.__views.foo = Ti.UI.createLabel({          text: """"$.args.foo"""",          id: """"foo""""      });  {code}    If you try to use {{$.args.foo}} in TSS it will fail to compile with:    {code}  [ERROR] Expected """"Alloy"""", """"L"""", """"Ti"""", """"Titanium"""", """"WPATH"""", """"["""", """"false"""", """"null"""", """"true"""", """"undefined"""", """"{"""", comment, end of line, number, string or whitespace but """"$"""" found.  {code}"""
"ALOY-1317","Bug","XML",5,"Alloy: Default top-level ID doesn't take if-attribute into account","""While ALOY-851 is said to be fixed, the following:    {code:xml}  <Alloy>      <TabGroup if=""""Alloy.Globals.requiredVersion"""">    <Require src=""""list"""" />    <Require src=""""apis"""" />    <Require src=""""console"""" />   </TabGroup>     <Window if=""""!Alloy.Globals.requiredVersion"""">    <Label>This sample requires Titanium 5.1 or later</Label>   </Window>    </Alloy>  {code}    still compiles to:    {code:javascript}      if (Alloy.Globals.requiredVersion) {          var __alloyId11 = [];          $.__views.__alloyId12 = Alloy.createController(""""list"""", {              id: """"__alloyId12""""          });          __alloyId11.push($.__views.__alloyId12.getViewEx({              recurse: true          }));          $.__views.__alloyId14 = Alloy.createController(""""apis"""", {              id: """"__alloyId14""""          });          __alloyId11.push($.__views.__alloyId14.getViewEx({              recurse: true          }));          $.__views.__alloyId16 = Alloy.createController(""""console"""", {              id: """"__alloyId16""""          });          __alloyId11.push($.__views.__alloyId16.getViewEx({              recurse: true          }));          $.__views.index = Ti.UI.createTabGroup({              tabsBackgroundColor: """"white"""",              tabsTintColor: Alloy.CFG.brandPrimary,              tabs: __alloyId11,              id: """"index""""          });          $.__views.index && $.addTopLevelView($.__views.index);      }      if (!Alloy.Globals.requiredVersion) {          $.__views.__alloyId17 = Ti.UI.createWindow({              backgroundColor: """"#fff"""",              barColor: Alloy.CFG.brandPrimary,              navTintColor: """"#FFF"""",              translucent: false,              titleAttributes: {                  color: """"#FFF""""              },              id: """"__alloyId17""""          });          $.__views.__alloyId17 && $.addTopLevelView($.__views.__alloyId17);          $.__views.__alloyId18 = Ti.UI.createLabel({              text: """"This sample requires Titanium 5.1 or later"""",              id: """"__alloyId18""""          });          $.__views.__alloyId17.add($.__views.__alloyId18);      }  {code}    which shows that the negative condition does not give the ID """"index"""" to the window, which it should."""
"ALOY-1319","New Feature","XML",5,"Support CardView in XML","""Titanium SDK 5.1.0 introduces a new view container for Android called CardView.  http://appcelerator.github.io/appc-docs/latest/#!/api/Titanium.UI.Android.CardView    We should support it in XML and implicitly set the namespace to Ti.UI.Android.    Example XML of sample in API docs:  """
"ALOY-1318","New Feature","Themes",5,"DefaultIcon(-platform).png should be theme-able","""The new {{/DefaultIcon.png}} which has platform specific versions at {{/DefaultIcon-<platform>.png}} should be theme-able via Alloy.    We probably need a similar approach as with {{i18n}} and {{platform}} since we can't overwrite the {{DefaultIcon.png}} in the project root, so we have to do it at build-time.    - https://github.com/appcelerator/alloy/pull/662/files#diff-ddbdb7300fa15590afdfee9246ac61fcR327  - https://github.com/appcelerator/alloy/pull/662/files#diff-6487ccfa4909144bbc33134e4d85bdddR159    Kindly pointed out by [~jasonkneen]:  https://twitter.com/jasonkneen/status/654326054488834048"""
"ALOY-1320","Bug","Styling",5,"Styles not applied when an element uses another namespace","""When an Alloy view element uses another namespace styles are no longer applied. When you set {{ns}} to the default {{Ti.UI}} it still works, but any other value will not.    *index.xml*    {code:xml}  <Alloy>      <Window>          <View />          <View ns=""""Ti.UI"""" />          <View ns=""""Ti.UI.Android"""" />      </Window>  </Alloy>  {code}    *index.tss*    {code}  'View': {   backgroundColor: 'red'  }  {code}    *Compiled code*    {code:javascript}      $.__views.__alloyId0 = Ti.UI.createView({          backgroundColor: """"red"""",          id: """"__alloyId0""""      });      $.__views.index.add($.__views.__alloyId0);      $.__views.__alloyId1 = Ti.UI.createView({          backgroundColor: """"red"""",          id: """"__alloyId1""""      });      $.__views.index.add($.__views.__alloyId1);      $.__views.__alloyId2 = Ti.UI.Android.createView({          id: """"__alloyId2""""      });  {code}"""
"ALOY-1321","Improvement","Samples & Templates",1,"iOS: packaged app icons for new projects needs to be updated","""Since TI SDK 5.0.0, we support app icons resizing, placing them into assets catalog etc, so we should do a clean up on the app icons to reduce the number of warnings being shown now.    1. All app icons should NOT have alpha channel.  2. Remove unsupported app icons.    See current trace when there's no DefaultIcon.png or DefaultIcon-ios.png:      *OR* we can just remove all the ios app icons in the assets folder,  and only have DefaultIcon.png in the root of the project to avoid confusion."""
"ALOY-1323","Bug","XML",3,"Alloy: module-tag in Alloy element effects all controller-views","""The attached app-folder demonstrates that when you use the {{module}} tag on the {{<Alloy>}} tag of one view, this will be applied to *all* other controller-views as well.    1. Compile the app.  2. Open {{Resources/iphone/controllers/testWindow.js}}.  3. Confirm that it has {{(require(""""testModule"""").createWindow || Ti.UI.createWindow)}} for all views as well, while only {{app/views/index.xml}} has has the {{module}} tag.    Found by [~falko]"""
"ALOY-1325","New Feature","XML",8,"Add PreviewContext element to XML views","""Alloy should support the new {{Ti.UI.iOS.createPreviewContext}}.    * A PreviewContext can be added to most views via their {{previewContext}} property.  * The PreviewContext itself has a {{preview}} property which must be assigned a single View.  * The PreviewContext also has an {{actions}} property for one or more actions or action groups.    """
"ALOY-1331","Bug","Runtime",1,"Windows: App crashes with 'Cannot find variable: OS_BLACKBERRY","""h5.Description    When building an Alloy app for Windows Platform the app crashes with the below error      The error originates from [this line in alloy.js|https://github.com/appcelerator/alloy/blob/1fb9878e769c6afee6f46516c08b4708830e26a6/Alloy/lib/alloy.js#L486] and removing the OS_BLACKBERRY check allows the app to launch.        h5.Steps to reproduce     1. Create an Alloy app using {{appc new}}  2. Build the app to Windows Platform using {{appc run -p windows}}    h5.Actual Result     App crashes with the below           h5.Expected result    App should not crash"""
"ALOY-1335","Bug","Styling",5,"Use Alloy's deepExtend to handle conditional on-device style inheritance","""Alloy selectors provide ways to overload style rules based on switches (formFactor, OS, conditional rules, etc.). Say the TSS is somehow:    {code}  ...  """".title-home"""": {   bottom: 4,  },  """".title-home[formFactor=tablet]"""": {   bottom: 8  },  ...  {code}    The generated code will look like:    {code}  Alloy.deepExtend(true, o, {      bottom: 4  });  Alloy.isTablet && _.extend(o, {      bottom: 8  });  {code}    If this works fine with most of the properties, this is particularly annoying with font or nested properties. For instance,     {code}  """".title-home"""": {   font: {    fontFamily: """"Delius-Regular"""",    fontSize: 11   }  },  """".title-home[formFactor=tablet]"""": {   font: {    fontSize: 22   }  },  {code}    will result in the font name being simply ignored on tablets, as {{_.extend()}} is not a deepExtend method. We're lucky, Alloy provides a {{deepExtend()}} implementation which we may want to use. I therefore propose to switch from {{_.extend()}} to Alloy's {{deepExtend}} implementation. This will allow much more efficient ways of integrating complex graphical interfaces, with style inheritances all across the app:    {code:xml}  <Label class=""""fonticon icon-row-right icon-arrow-md icon-arrow-right white"""" />  {code}    All styles are merged deeply, and it becomes unnecessary to repeat over and over the font name.    I _know_ that this change may break many tests, but I strongly believe that this behavior is the right way styles _should_ work, in the sake for development efficiency."""
"ALOY-1340","Bug","Tooling",3,"Alloy selective compilation broken since ALOY-1332","""Since [this commit|https://github.com/feons/alloy/commit/25855c1f342eecf6cb6e69dca007d05ebde1771b#diff-ddbdb7300fa15590afdfee9246ac61fcR177], Alloy's selective compilation is broken since the {{Resources}}'s {{alloy.js}} file gets replaced each and every time the alloy compile command is called.    Instead, the fix should look if there's a file restriction, and not replace {{alloy.js}} if this restriction does not affect this file.    This is particularly problematic when using some compilation watcher (aka. tishadow + grunt-tishadow), which look for changes in the {{Resources}} folder to re-launch the app. With the current change, the app will be refreshed using a template-based {{alloy.js}} file (not a recompiled one)."""
"ALOY-1342","Improvement","Samples & Templates",1,"Sample Todo App TextField text color to black","""Community PR: https://github.com/appcelerator/alloy/pull/702"""
"ALOY-1341","Improvement","I18N",2,"Add Arabic lang to builtin MomentJS","""Community PR: https://github.com/appcelerator/alloy/pull/741  {quote}  Arabic Saudi Arabic is the common use from GCC countries, Yemen, Egypt and Sudan.  Also using Arabic number Ù¡ Ù¢ Ù£ Ù¤ Ù¥ Ù¦ Ù§ Ù¨ Ù© instead of English  {quote}"""
"ALOY-1345","Bug","XML",3,"iOS Attributed Strings are not showing","""h6.Issue Description  Using Attributed String for label in Alloy, it is not showing up in iOS. Where as the same is working properly for Android and in classic.     h6.Steps to reproduce  //Alloy   # Create a new simple project application in alloy  # Open the index.xml view  # Add the next Label:     # Open the index.tss Style   # Add the next style:     # Run    // Classic (Working project)  # Create a new cassic default application project  # Open the app.js file  # Replace the content with the next code:    # Run"""
"ALOY-1346","Improvement","Samples & Templates",1,"Controller template should no longer declare args variable","""Since Alloy 1.6.0 (by ALOY-1092) the compiled controllers [have the following line|https://github.com/appcelerator/alloy/blob/master/Alloy/template/component.js#L20]:        Still, our [template for new controllers|https://github.com/appcelerator/alloy/blob/master/Alloy/template/controller.js] has:        Clearly this is no longer needed. The template can be emptied and the availability of {{$.args}} should be documented. I'll create a separate TIDOC ticket for that."""
"ALOY-1353","Bug","Titanium SDK",5,"Annotation doesn't appear in only Alloy Map","""I followed this example:    http://docs.appcelerator.com/platform/latest/#!/api/Modules.Map-method-createAnnotation    but if i create the map with Alloy, the map is ok but the annotation doesn't appear. With this example (no Alloy) all work well:    http://docs.appcelerator.com/platform/latest/#!/guide/iOS_Map_Kit    i think there are a bug with annotation in Alloy."""
"ALOY-1350","Bug","Tooling",0,"Warning on compile: moment construction falls back to js Date","""Alloy spits out a Moment.js warning on compile and a long stack trace on debug-level:        Source (but there's probably more):  https://github.com/appcelerator/alloy/blob/master/Alloy/utils.js#L572    PS: We fixed same issue for 360 in APPTS-6100"""
"ALOY-1352","Improvement","Builtins",3,"Alloy: add support for xhigh on iOS in measurement builtin","""{{dpToPX}} and {{pxToDP}} methods of the measurement module should support HD Retina iOS    https://github.com/appcelerator/alloy/blob/master/Alloy/builtins/measurement.js"""
"ALOY-1351","Bug","Tooling",3,"Generating `Resources/alloy.js` from template is not required when selective compile","""Community PR: https://github.com/appcelerator/alloy/pull/751    When compiling only app/alloy.js, generating Resources/alloy.js from template is not required.  Because Resource/alloy.js is not user's code but builtin code. So when compiling specific controller and alloy.js only, Generate Resource/alloy.js should be skipped.    \\  h5. Reproduce steps  # delete all file of Resources folder.  # run : alloy compile -q ios --config file=app/alloy.js  # you can check compiling result on Resource  {{Resources/iphone/alloy.js}} is generated from template  But {{Resources/iphone/alloy.js}} is not optimized. It has uncompiled CONSTANT such as OS_MOBILEWEB. it makes undefined error on runtime.    """
"ALOY-1358","New Feature","XML",3,"Support Ti.UI.iOS.BlurView in XML","""With TIMOB-20176 resolved for the 5.4.0 SDK, the Alloy version shipping with CLI 5.4.0 should include support for {{Ti.UI.iOS.BlurView}} in XML.    The view must be added to an ImageView."""
"ALOY-1357","New Feature","XML",5,"Support Ti.UI.iOS.MenuPopup in XML","""With TIMOB-5812 resolved for the 5.2.0 SDK, Alloy should support this in XML for the version to be included in Unified CLI 5.2.0.    See classic API at:  http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.iOS.MenuPopup    The view is not added to any parent and wants a list of strings as items, just like an OptionDialog"""
"ALOY-1356","New Feature","XML",3,"Add support for LivePhotoView under Ti.UI.iOS namespace","""With TIMOB-19666 resolved for 5.2, the Alloy version shipping with the 5.2 CLI should support defining the {{Ti.UI.iOS.LivePhotoView}} in XML."""
"ALOY-1360","New Feature","Tooling",3,"Allow baseController as attribute of Alloy xml tag","""As a developer,  I want to add an attribute of """"baseController"""" to the root Alloy xml tag in an Alloy Controller,  So that I can define the baseController of a new controller without having to create a .js file.          Added PR:  https://github.com/appcelerator/alloy/pull/761  """
"ALOY-1361","Bug","XML",3,"Destroy calling off on variables that may be undefined","""If you have an Alloy component that uses databinding and has conditional code defined in the xml, the destroy function is not taking into consideration the fact that the component may be undefined before calling the `off` function.    Alloy xml:     {code:xml}              <TableViewRow id=""""trainer_row"""" layout=""""composite"""" class=""""listitem_row"""" hasChild=""""true"""" onClick=""""$.togglePicker"""" if=""""$.args.editmode"""">                          <View height=""""50"""" top=""""0"""" layout=""""composite"""" touchEnabled=""""false"""">                              <Label text=""""Trainer"""" class=""""listitem_settings_name"""" touchEnabled=""""false"""" />                              <Label text=""""{mymodel.trainer_name}"""" class=""""listitem_settings_value_haschild"""" touchEnabled=""""false"""" />                          </View>                          <Picker id=""""trainer"""" width=""""350"""" height=""""150"""" visible=""""false"""" onChange=""""$.onChange"""" top=""""40"""">                              <Column dataCollection=""""trainer"""">                                  <Row title=""""{name}"""" value=""""{id}"""" />                              </Column>                          </Picker>                      </TableViewRow>  {code}    Generated code:     {code:javascript}    if ($.args.editmode) {           // ------ only showing relevant code  ------             var __alloyId287 = Alloy.Collections[""""trainer""""] || trainer;          __alloyId287.on(""""fetch destroy change add remove reset"""", __alloyId288);          }        exports.destroy = function() {          __alloyId281.off(""""fetch destroy change add remove reset"""", __alloyId282);          __alloyId293.off(""""fetch destroy change add remove reset"""", __alloyId294);          __alloyId314.off(""""fetch destroy change add remove reset"""", __alloyId315);          __alloyId330.off(""""fetch destroy change add remove reset"""", __alloyId331);   Alloy.Models.mymodel.off(""""fetch change destroy"""", __alloyId346);      };    {code}    In this case, `__alloyId281` is actually undefined because it was declared and a value assigned inside the conditional if block.      This is a pretty serious issue as I believe the error that occurs is stopping the other (existing) `off` functions from being called and causing a memory leak.    """
"ALOY-1368","Bug","Models|XML",5,"Complex data binding for individual model doesn't work with transform() method","""The complex data binding introduced by ALOY-443 does not work if the model has a {{transform()}} method:        Compiles to:    {code:js}      var __alloyId13 = function() {          $.__alloyId2.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[""""foo""""] : _.template(""""<%=user.foo%>"""", {              user: Alloy.Models.user.toJSON()          });          $.__alloyId3.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[""""foo""""] : _.template(""""the <%=user.foo%>"""", {              user: Alloy.Models.user.toJSON()          });          $.__alloyId4.title = _.isFunction(Alloy.Models.user.transform) ? Alloy.Models.user.transform()[""""foo""""] : _.template(""""<%=user.foo%> - <%=user.bar%>"""", {              user: Alloy.Models.user.toJSON()          });      };  """
"ALOY-1476","Story","Testing",5,"Travis does not test against known good generated code because it targets Linux only","""While working on ALOY-1474 and local tests I ran into 355 failures to match against known good generated code, while Travis didn't fail at all.    After submitting https://github.com/appcelerator/alloy/pull/775 I noticed Travis logs don't mention the tests against the known good generated code at all:        while locally it fails:        I also saw this test only runs on darwin:  https://github.com/appcelerator/alloy/blob/master/test/specs/compile.js#L173    We don't specify an OS:  https://github.com/appcelerator/alloy/blob/master/.travis.yml    Which seems to make Travis to only test on Linux:  https://travis-ci.org/appcelerator/alloy/builds/118954721    Unfortunately enabling osx on Travis fails:  https://travis-ci.org/appcelerator/alloy/jobs/118956715    Because of:  https://github.com/travis-ci/travis-ci/issues/2311    Which can be workaround like:  https://github.com/travis-ci/travis-ci/issues/2311#issuecomment-171180704    Which I did:  https://github.com/appcelerator/alloy/pull/775/files#diff-354f30a63fb0907d4ad57269548329e3L1    And now Travis is failing 355 tests on OSX just like local:  https://travis-ci.org/appcelerator/alloy/builds/118959856    I've checked all 355 failures and all were expected because of tests that were not updated for tickets like ALOY-1355, ALOY-1237 and ALOY-1335, so generated new known good code for all."""
"ALOY-1475","Story","Testing",5,"Alloy compile tests should show diff with known good generated code","""Currently when compile tests fail they show:    !Screen Shot 2016-03-28 at 13.06.58.png!    There's two problems with this:    1. It is showing both the message and the stack trace, last is of no use  2. It is not showing what actually is different    I expect it to give:    !Screen Shot 2016-03-28 at 13.06.20.png!"""
"ALOY-1474","Bug","Models",5,"Regression: Model data binding no longer works","""For  ALOY-1369 I changed the interpolation of binding templates:  https://github.com/appcelerator/alloy/pull/769/files#diff-a59a2178e486f81366775c39e5393695R571    As found by [~hazemkhaled] this caused a regression in data binding of models without a transform method:  https://jira.appcelerator.org/browse/ALOY-1254?focusedCommentId=380741&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-380741    Creating test app and fix."""
"ALOY-1478","Bug","Models|XML",5,"Data binding fails when binding string or model attribute name has dash, space or quote","""Alloy data binding can't handle complex bindings strings or model attributes names that contain a dash, space or quotes.    This is in part because of the way it renders the compiled {{\_.template()}} code, but also because of limitations in {{\_.template()}} itself:  http://stackoverflow.com/a/15956433/4626813        *index.js*    {code:js}  var test = {    a: 'a',    'a-b': 'a-b',    'a b': 'a b',    'a""""b': 'a""""b',    """"a'b"""": """"a'b""""  };    Alloy.Models.mymodel.set(test);  Alloy.Collections.mymodel.reset([test]);    $.index.open();  """
"ALOY-1479","Bug","Models",5,"Regression: Model instance data binding no longer works","""Data binding of local model instances throws an exception in Alloy 1.8.3 and 1.8.4 because of [this line change|https://github.com/appcelerator/alloy/pull/769/files#diff-a59a2178e486f81366775c39e5393695L521] to resolve ALOY-1369.    *XML*        *compiled*    {code:js}          $.__alloyId4.text = _.template(""""{$.modelinstance.foo}"""", {              modelinstance: transformed          }, {              interpolate: /\{([\s\S]+?)\}/g          });          $.__alloyId5.text = _.template(""""{$.modelinstance.foo} {$.modelinstance.bar}"""", {              modelinstance: transformed          }, {              interpolate: /\{([\s\S]+?)\}/g          });  {code}"""
"ALOY-1480","Bug","Models",8,"Bug/Regression: Data binding always returns string values","""For ALOY-443 (Alloy 1.5.0) we started to use {{_.template()}} for complex model data binding.    With ALOY-1368 and ALOY-1369 we also adopted this method for complex collection data binding.    Since {{_.template()}} always returns a string, it doesn't work for binding objects, e.g. an attributedString as the attached test case:        h2. Original description    Just tested that, using alloy v1.8.2 and v1.8.5 I was unable to set the `attributedString` property via a `ListItem` template.  Using alloy 1.7.35 everything is working fine.    I attach a simple test project that contains a `ListView` with a template composed by two labels.  On the first label I set the `text` property with a simple model string and on the second one i set the `attributedString`.    For the first label everything is working correctly (as expected) and for the second one is working only using v1.7.35 of alloy."""
"ALOY-1486","Bug","Titanium SDK",5,"iOS, Android: Global styles is not overridden by local styles for orientationModes.","""h6. Description  If we set orientationModes on window in app.tss file portrait, landscape both and any individual tss file only portrait then portrait mode does not work for individual tss.    h6. Steps to reproduce  1. Just create an alloy project.  2. Replace this app.tss and index.tss file,  3. Run this code in device or emulator.  4. Rotate device.  5. It does not stop.      h6. actual behaviour  If device rotate, the app orientation change.  h6. Expected behaviour  Since orientation Modes """"PORTRAIT"""" for the index.tss file so it should be always portrait.    {code:title=app.tss}  """"Window"""": {    orientationModes: [Ti.UI.PORTRAIT,Ti.UI.LANDSCAPE_LEFT,Ti.UI.LANDSCAPE_RIGHT],    backgroundColor: """"red""""  }  """
"ALOY-1492","Bug","Tooling",3,"Fix no such file or directory when doing ""alloy new""","""When creating a new alloy project, the creation process should be more careful when platform template folder doesn't not exist.    h6. Reproduce Step  {{appc new}} titanium app    h6. Expected Output  The app should be created with no error.    h6. Actual Output  {{Error: ENOENT: no such file or directory}} """
"ALOY-1493","New Feature","Models",5,"[Alloy] Alloy sql adapter db_file to be function","""    https://github.com/appcelerator/alloy/pull/788"""
"ALOY-1494","New Feature","XML",3,"iOS: Support Ti.UI.iOS.Stepper in Alloy","""https://jira.appcelerator.org/browse/TIMOB-6305 adds support for the new Stepper UI element on iOS. We should include the alloy-change just from the beginning"""
"ALOY-1495","Improvement","Tooling",0,"Support newer versions of Underscore / Lodash","""{quote}This is different than ticket ALOY-1168: https://jira.appcelerator.org/browse/ALOY-1168{quote}    ALOY-1168 is about replacing the shipped version of underscore.   This ticket is about supporting apps where underscore is replaced by the developer.   I still think that ALOY-1168 should be implemented and I have developed it in a fork (https://github.com/mobilehero/adamantium/tree/feature/underscore-to-lodash), but I am having issues w/ the tests.    Currently, Alloy allows developer to replace the current version of underscore with a different version (or with lodash) by putting the updated underscore.js file in the directory: /app/lib/alloy.    However, the issue is that the code that Alloy generates for a controller that uses databinding, references the old version of _.template.       There are probably several different ways this could be solved to support both old and new versions of Underscore.   One might be to check the version of underscore.  I think the function was changed in 1.7.0.    Let me know if you think there is a workable solution and I can create a PR and tests for it.  Thanks!!    """
