"issuekey","type","components","storypoint","title","description_text"
"CLOV-1584","Suggestion","Ant Tasks",1,"Add additional logging for <clover-setup>/<files> element","""Currently, when <clover-setup> contains a <fileset> element, Clover prints information about included/excluded files (on a verbose logging level).    In <clover-setup> we can also use a similar <files> element - but there's no logging for it. Add logging on a verbose level."""
"CLOV-1588","Suggestion","Ant Tasks",5,"Integrate Clover with JUnitParams","""The JUnitParams (https://github.com/Pragmatists/junitparams) is much more convenient way to parameterize tests instead of using JUnit's 4.10 @Parameterized annotation. """
"CLOV-1597","Sub-task","Instrumentation",1,"Set instrumentLambda=none as a default value for instrumentation","""This is a temporary workaround thanks to which java8 code will always compile, at the cost that lambdas are not measured. User will be still able to enable lambda instrumentation, but this will be a conscious decision, so seeing compilation errors should be less surprising.     Scope: CloverInstr, ant, maven, idea, eclipse, grails plugins."""
"CLOV-1596","Bug","Instrumentation",13,"Use heuristics to solve JDK8 Stream compilation errors","""Spike in which a problem with Java8 streams will be attacked as it seems that using stream() is very popular and the most probably it causes the majority of compilation problems with Clover's lambdaInc().    Scope: focus on streams only.    Out of scope: attacking a generic problem of method signatures with a mixture of functional and non-functional arguments. """
"CLOV-1595","Bug","Grails Plugin",3,"Clover does not work with Grails 2.4.4","""When developers use """"./grailsw run-app"""" it gives the following error.     """
"CLOV-1603","Bug","Test Optimization",1,"CloverOptimizedTestNGSelector does not add ""clover-optimized"" group to TestNG @Before and @After annotations","""In order for Clover to optimize a TestNG test suite, we have to use the {{CloverOptimizedTestNGSelector}} listener, and restrict TestNG to only run the """"clover-optimized"""" group, as in:      The problem with this is that TestNG's {{@Before}} and {{@After}} annotations ({{@BeforeMethod}}, {{@AfterClass}}, etc) will not be run, because they are not part of the """"clover-optimized"""" group.    I have a workaround, which is to qualify all such annotations with {{alwaysRun=true}}, but this is pretty ugly.    A possible solution is for {{CloverOptimizedTestNGSelector}} to implement {{IAnnotationTransformer2}} and override [transform( IConfigurationAnnotation, Class, Constructor, Method )|http://testng.org/javadoc/org/testng/IAnnotationTransformer2.html#transform%28org.testng.annotations.IConfigurationAnnotation,%20java.lang.Class,%20java.lang.reflect.Constructor,%20java.lang.reflect.Method%29], automatically adding the """"clover-optimized"""" group to all non-tests."""
"CLOV-1606","Bug","Instrumentation",3,"Java8: method reference to a non-static method fails to compile","""{quote}  *NOT REPRODUCIBLE*  {quote}    In this code sample:    {code:java}  return map.entrySet().stream()     .collect(Collectors.toMap(      Map.Entry::getKey,      e -> e.getValue().getAverage()     ));  {code}    the Collectors.toMap() takes a """"Map.Entry::getKey"""" method reference as input argument. However, the getKey method is not static.     Wrapping it by Clover's lambdaInc() method leads to a compilation error like this:                      *Possible workarounds ??*    1) Disable instrumentation of expression-like lambda functions (method references are treated as expression-like lambda) - use instrumentLambda=""""block"""" or """"none"""".    2) Wrap such method reference with ///CLOVER:OFF and ///CLOVER:ON keywords, e.g.:        3) Use a variable with a non-static method reference or change to a lambda expression.        """
"CLOV-1605","Suggestion","Ant Tasks|Maven plugin",1,"Replace clover.licenseLocation by maven.clover.licenseLocation","""While it's perfectly fine to have a declaration like this:         and next refer it in maven-clover2-plugin's configuration like this:        it's misleading for users, because in case they would like to pass it via -D parameter or declare in settings.xml without having the <licenseLocation> in maven-clover2-plugin section, it will not work, because the correct property name is 'maven.clover.licenseLocation'. See:    https://docs.atlassian.com/maven-clover2-plugin/latest/setup-mojo.html#licenseLocation      Correct all references in documentation on confluence.atlassian.com, answers.atlassian.com, maven-clover2-plugin source code, tutorial source code.   """
"CLOV-1607","Suggestion","Instrumentation",1,"Java8: don't instrument lambda functions when source < 1.8","""No matter what """"-source"""" value is set, Clover instruments both expression-like and block-like lambdas.     It's a behaviour slightly different from the one we have for e.g.:   * -source 1.3 (it handles 'assert' as not a keyword) or    * -source 1.4 (no 'enums').     Ways to improve it:    1) change Java grammar so that handling lambda functions is optional - only for source >= 1.8; otherwise Clover should throw a parse error      2) or parse lambdas also for source < 1.8 (no parse errors would be thrown, only javac will raise a compilation error), but do not add Clover's instrumentation to it        """
"CLOV-1608","Suggestion","CEP Plugin|CIJ Plugin|Reporting",2,"New colour scheme for a tag cloud and a coverage treemap in the HTML report","""Customers reported that using a single, red color gradient in a coverage tree map and in tag clouds has two drawbacks:   * it's harder to find which code areas require improvement   * seeing always a red color is discouraging  :-)    """
"CLOV-1613","Bug","CEP Plugin",1,"Unable to open generated reports in Eclipse 4.4","""Steps to reproduce:    Open """"Coverage Exploer"""", click """"Run new report ..."""" and create any report. Next click """"View report"""" and select it on a list. Nothing happens in the UI and the """"Error log"""" view shows """"Unhandled event exception"""" entry with a stack trace as follows:        """
"CLOV-1612","Bug","CEP Plugin",1,"Clover fails to generate HTML report for more than one project in Eclipse","""      """
"CLOV-1614","Bug","CEP Plugin",3,"Error when closing Cloud Editor in Eclipse","""Closing the """"Cloud Editor"""" in Eclipse causes that sometimes an exception is thrown and reported in the Error Log:        and           Apparently, it fails in the CTabFolderLayout.computeSize() method:        the 'renderer' is null. This renderer is being set in CTabFolder.init() method and set to null in the CTabFolder.onDispose() method.     It *may* be related with the:     CloudEditor.dispose() which calls removeCoverageChangeListener after the super.dispose()  so a refresh event may come in the meantinme    or    CloudEditor.createPages() which """"hacks"""" the container layout by changing it from FillLayout to GridLayout."""
"CLOV-1617","Bug","Ant Tasks|Groovy",5,"Automatic Clover integration does not work for <groovyc> task","""*Problem:*    Automatic Clover integration in Bamboo does now work for Ant Tasks containing the <groovyc> task.    *Root cause:*    When automatic Clover integration is enabled in Bamboo, it uses Clover's AntIntegrationListener:        This listener listens to Ant's build events and intercepts Ant tasks such as:    <javac>, <java>, <javadoc>, <junit>    However, it does not intercept the <groovyc> one.     Integration with <groovyc> task is performed by the <clover-setup> task, which calls:    {code:java}  GroovycSupport.ensureAddedTo(antProject);  {code}    Note that GroovycSupport implements Ant's BuildListener. However, it cannot be passed via command line, like this:        because the GroovycSupport does not have a default constructor.     *Workaround:*    Call the <clover-setup> from an Ant script. For example, add the following target:    {code:xml}  <target name=""""instrument"""" if=""""with.clover"""">          <!-- we assume that automatic integration is enabled, which adds the '-lib clover.jar' -->          <taskdef name=""""clover-setup"""" classname=""""com.atlassian.clover.ant.tasks.CloverSetupTask""""/> <!-- from the clover.jar -->            <!-- call clover-setup to intercept <groovyc> task -->          <clover-setup/>            <!-- This fake compilation is to cheat the automatic Clover integration, so that it won't display the               """"Clover reports not being generated. No Clover instrumentation was done."""" error message.               We instrument java sources, but through the <groovyc> task; and we need to trick Clover so that it               generates an HTML report at the end. -->          <mkdir dir=""""${target.classes}""""/>          <javac failonerror=""""false"""" srcdir=""""${src.java}"""" excludes=""""**/*"""" destdir=""""${target.classes}""""/>  </target>    <target name=""""compile"""" depends=""""instrument"""">          <groovyc destdir=""""${target.classes}"""" classpathref=""""build.classpath"""" fork=""""yes"""">              <javac source=""""1.7"""" target=""""1.7"""" debug=""""on"""" encoding=""""UTF8"""">              </javac>              <src path=""""${src.java}""""/>              <src path=""""${src.groovy}""""/>          </groovyc>  </target>  {code}    Clover's initialization will occur only if '-Dwith.clover=true' is set. Therefore, modify the Ant Task in Bamboo, for instance:        *Possible fixes:*    1) Add default constructor for GroovycSupport. Pass it as a second '-listener' to ant command in Bamboo.    2) Change the AntIntegrationListener so that it will intercept all <groovyc> tasks as well.  """
"CLOV-1632","Suggestion","Maven plugin",3,"Protect against deployment of instrumented code","""If user calls """"mvn clover2:setup install"""" or """"mvn clover2:setup deploy"""", code instrumented by Clover will be installed to ~/.m2 or deployed to a repository.     This may be not a desired behavior, especially if developer is not aware of it (for instance if someone switches on the automatic Clover integration in Bamboo).    Furthermore, installation may occur not only for """"install"""" or """"deploy"""" phases expressed explicitly in the command line, but it can also happen when a plug-in runs such life cycle (mvn release:perform for instance).     Implement a protection against it - in the clover2:setup check the reactor which phases are about to run and refuse code instrumentation if 'install' or 'deploy' will be called.    This protection shall not be enabled by default, because there may be actually a need to install instrumented code (for instance - multiple build plans using the same local m2 cache or repository to fetch compiled artifacts and we want to measure coverage for all modules).    Enable protection by a flag. e.g.        mvn -Dmaven.clover.repositoryPollutionProtection=true    Expected behavior: fail a build if repositoryPollutionProtection=true and build lifecycle contains 'install' or 'deploy' phases.    *Extra:*    Fail also if artifact contains a custom classifier and clover2:instrument is used (as Maven cannot handle an artifact with two classifiers)."""
"CLOV-1654","Suggestion","Database",5,"as a plugin developer I'd like to have annotations for a package in a Clover database","""Currently, annotations are available for classes and methods only:   * ClassInfo.getModifiers().getAnnotations()   * MethodInfo.getSignature().getAnnotations()    There's nothing like PackageInfo.getAnnotations().     The reason to have this is that _package-info.java_ files may contain annotations (but no executable code). While having this adds no value for Clover instrumentation itself, it could be useful for plugin developers, who would like to read Clover database directly.     For instance, this information could be used to filter classes based on the information stored on a package level. See: https://answers.atlassian.com/questions/12781852/how-to-read-package-annotations-from-clover-db  """
"CLOV-1657","Bug","Groovy",1,"Compiling Groovy code with Clover throws NPE","""Clover fails to integrate with Groovyc task and throws NPE:        *Cause:*    NPE is thrown when Clover cannot find it's AntInstrumentationConfig in project references in an Ant-based build. This can happen when a build calls <ant> or <antcall> tasks without {{inheritrefs=true}} - lack of this property causes that AntInstrumentationConfig is not passed to these calls.    *Workaround:*    Ensure that  {{inheritrefs=true}} is used.   """
"CLOV-1668","Bug","Maven plugin",1,"Clover installs instrumented-jars in local Maven repo, in place of non-instrument ones","""I'm not sure if this has been reintroduced or something else is wrong, since the CLOVKB claims it is not the case: https://confluence.atlassian.com/display/CLOVERKB/Maven+is+deploying+instrumented+jars  (I _am_ using the {{instrument}} goal - followed by {{log}} and {{check}})  In the below, you can see that, e.g., {{target/clover/magnolia-module-diff-1.7-SNAPSHOT-clover-tests.jar}} gets copied to {{.../magnolia-module-diff-1.7-SNAPSHOT-tests.jar}} (without {{-clover}} qualifier!)    This seems to happen for ~all artifacts except the """"main"""" jar. (test jar, assemblies, etc..).    In this case, the situation is saved by the """"real"""" install plugin that gets executed later and overwrites those wrong artifacts. However, if we use the (newish) {{installAtEnd}} feature of the {{maven-install-plugin}}, then this doesn't happen, and we end up with instrumented jars in place of the non-instrumented ones, which has tons of ugly consequences. See for yourself with the snippet:{code:xml}    <build>      <pluginManagement>        <plugins>          <plugin>            <groupId>org.apache.maven.plugins</groupId>            <artifactId>maven-install-plugin</artifactId>            <configuration>              <installAtEnd>false</installAtEnd>            </configuration>          </plugin>        </plugins>      </pluginManagement>    </build>  {code}    Why is Clover installing anything, anyway ? Shouldn't it just _attach_ the instrumented jars (and only those) to the build, and let Maven do the rest ?    """
"CLOV-1667","Suggestion","Scala",20,"as a user I want to see smart names for classes and functions in reports","""The point is that Scala code is being translated to a bytecode containing various """"cryptic"""" names.     For instance, """"overloaded operators"""" have """"$op"""" in method's name.     Think how to reasonably represent methods, functions, inline classes, anonymous functions, case classes, traits etc etc in HTML report at least (XML / JSON are less important).   """
"CLOV-1666","Suggestion","Scala",40,"as a user I want to run test optimization for Scala tests","""It should be possible to perform test optimization for Scala test classes.     Integrations:   * Ant (?)   * Maven   * SBT   * IDEA (?)   * Eclipse (?)  """
"CLOV-1665","Suggestion","Scala",40,"as a user I want to use Clover-for-Scala in Eclipse","""Integration of Clover-for-Scala with Eclipse.    Tasks:   * plug into *.scala text editors   * show scala classes in the 'Coverage Explorer'    * intercept compilation of Scala code    (!) Challenge: simultaneous updates of clover.db by Scalac and Javac (similarly as for Groovy in IDE)    Out of scope:   * test optimization for Scala"""
"CLOV-1664","Suggestion","Scala",40,"as a user I want to use Clover-for-Scala in IntelliJ IDEA","""Tasks:   * integrate with Scala complier in IDEA (using external build process)   * show Scala classes in Cloverage view   * show coverage highlighting in Scala editors    (!) Challenge: simultaneous update of clover.db by Javac and Scalac (similar problem as for Groovy in IDE)    Out of scope:   * test optimization for Scala"""
"CLOV-1662","Suggestion","Scala",5,"as a user I want to see nested functions in reports","""Scala allows to nest functions inside other functions. Enhance existing HTML / XML / JSON reports in such way that we could see such nesting as well.     Some of the required functionality has already been done during implementation of lambda functions for Java 8 (Clover 3.2). Review if all possible nesting combinations are implemented in Velocity templates (method-in-method, class-in-method etc). Affects: table with list of methods for a class, calculation of metrics etc."""
"CLOV-1661","Suggestion","Scala",20,"as a user I want to use Clover with SBT","""Integration of Clover-for-Scala with SBT.    Tasks:   * write build plugin for SBT - equivalent of clover2:setup, shall intercept any scalac calls; shall add clover.jar (clover-scala.jar?) to class paths for compilation and runtime   * write build plugin for SBT - equivalent of clover2:clover, shall generate reports; we may call Clover-for-Ant under the hood    """
"CLOV-1660","Suggestion","Scala",5,"as a user I want to use Clover with scalac ","""Integration of Clover-for-Scala with scalac command line tool.    Tasks:   * shall be easy - plugging via META-INF/services    Checks:   * is it possible to have joint Scala-Java compilation? if yes, then how it works and how to intercept both compilers?  """
"CLOV-1659","Suggestion","Scala",13,"as a user I want to use Clover with maven-scala-plugin","""Integration of Clover-for-Scala with the maven-scala-plugin.     Tasks:   * clover2:setup shall """"connect"""" to the maven-scala-plugin; t.b.d. how - META-INF/services? a plugin point? some properties?   * clover2:clover shall include also *.scala sources    Checks:   * is it possible to have joint Scala-Java compilation (like with joint Groovy-Java)?    Out of scope:   * clover2:instr is out of scope as integration is performed using AST, not source code   * clover2:optimize as test optimization is in another task  """
"CLOV-1658","Suggestion","Scala",5,"Publish Clover-for-Scala prototype","""Tasks:   * request releasing it as open source   * publish plugin's source code on BitBucket,    * prepare and publish documentation on CAC/Clover-for-Scala.    * prepare plug-in developer documentation"""
"CLOV-1672","Suggestion","Ant Tasks",3,"Ensure that Clover JAR is readable by Ant 1.9.0-1.9.1","""Ant 1.9.0/1.9.1 have a bug related with zip64 file handling:    _central directory zip64 extended information extra field's length doesn't match central directory data. Expected length 0 but is 16_    While this bug has been fixed in Ant 1.9.2, it should be still possible to produce such Clover JAR file that it will be readable by buggy Ant versions as well.     Ensure that new Clover 4.0.5 (and further versions) will be compatible."""
"CLOV-1675","Suggestion","Grails Plugin",5,"Grails Clover Plugin compatibility with Grails 2.4.5, 2.5.0","""New Grails versions have been released recently:   * 2.4.5   24/Mar/15   * 2.5   24/Mar/15    Make Grails Clover Plugin compatible with them."""
"CLOV-1679","Bug","Maven plugin",1,"MavenIntegrator shall not add arguments if they are already present in original command","""This applies to:   * build phases    * Clover's properties    Current problems:    1) The """"clean"""" phase can be doubled    For example if original command has:      it becomes:        2) User cannot override default values of Clover properties    For example if a property is already defined:        MavenIntegrator adds a second one with it's own value:        """
"CLOV-1682","Bug","Maven plugin",3,"Repository pollution protection reports a custom classifier under Maven 2.2.x","""*Problem:*    Probably bug in Maven, needs further investigation.     Running """"clean clover2:instrument"""" on a simple project (no additional plugins) with repository pollution protection enabled causes a build failure.        Adding extra logging showed that it fails because a custom 'tests' classifier is used during a build - see XXXXXXXXXX below.         What's interesting, running the same test but with clover2:setup not only does not fails a build (because repository pollution protection does not fail due to custom classifier if no 'clover' is used), but the artifact produced does NOT have the 'tests' classifier:          It affects Maven 2.2.x. Does not occur in Maven 2.1.x or Maven 3.x.     Summarizing, it seems that forking a parallel build life cycle causes that an artefact's classifier changes from empty to 'tests':    * with clover2:instrument:        * with clover2:setup:          *Workaround:*   * use clover2:setup instead of clover2:instrument to avoid forking life cycle or   * use different Maven version or   * disable the protection  """
"CLOV-1683","Suggestion","Grails Plugin",5,"Grails Clover Plugin compatibility with Grails 3.x","""Grails 3 has been released (3.0 GA on 31/Mar/15). It uses the Gradle build tool instead of Gant, thus we may need to have Gradle support as well. It has also various changes in API. Implement support for Grails 3 in the Grails Clover Plugin. """
"CLOV-1743","Bug","Database",2,"OutOfMemoryError while flushing coverage data","""    """
"CLOV-1758","Suggestion","Ant Tasks|CEP Plugin|CIJ Plugin|Grails Plugin|Instrumentation|Maven plugin",20,"Support JDK9 by Clover","""* As per [https://adtmag.com/articles/2015/05/08/oracle-java.aspx|https://adtmag.com/articles/2015/05/08/oracle-java.aspx]    we can expect to have the """"feature complete"""" version before December, 2015.    Clover should be ready till then."""
"CLOV-1761","Suggestion","Integrations",1,"Add support for Eclipse Mars 4.5 version","""Add support for new Eclipse Mars (June 2015)     https://adtmag.com/articles/2015/06/30/eclipse-release-train.aspx"""
"CLOV-1766","Bug","CEP Plugin",2,"Eclipse Mars 4.5 does not load platform:/ resources properly","""Clover uses """"platform:/"""" URIs to load standard Eclipse icons from eclipse-core such as a package icon, a folder icon etc.     Eclipse Mars is buggy and does not always fetch these resources, as a consequence we don't see proper icons on a toolbar.    Fix: bundle new icons in Clover-for-Eclipse plugin and replace """"platform:/"""" references by new icons using local URIs.    Note: try aligning look of new icons with ADG and Clover's HTML reports."""
"CLOV-1775","Suggestion","Maven plugin",3,"Rename maven-clover2-plugin artifactId to clover-maven-plugin","""{panel:title=Decision|titleBGColor=#205081|bgColor=#59afe1}  We are currently working on renaming Maven Clover2 Plugin according to the naming convention recommended by the Apache Maven project.    Due to a fact that this is a major breaking change, forcing customers to modify their POMs, CI build plans etc, it will be done in the nearest major Clover release (currently planned for end of 2015) and appropriate migration guides will be prepared.    New plugin name will be: *clover-maven-plugin*  {panel}    *Problem reported:*    According the Maven's Plugin Naming Convention, Clover's plugin artifactID violates the Apache Maven Trademark. The artifactId should be clover2-maven-plugin. I would even suggest removing the 2 from the artifactId.    [Plugin Naming Convention and Apache Maven Trademark|https://maven.apache.org/guides/plugin/guide-java-plugin-development.html]      *Scope of the change:*    _Before release_     (/) investigate if we can use clover-maven-plugin or must use cloverX-maven-plugin - _will be renamed to clover-maven-plugin_    (/) decide if major Clover release will be numbered 4.1.0 -or 5.0.0- (as per [Semantic Versioning|http://semver.org])   (/) prepare migration message in maven-clover2-plugin pom.xml for versions 4.0.x, similarly as it was done for Clover Core (com.cenqua.clover:clover:3.3.0) - _message added in pom in 4.0.6_   (/) rename maven-clover2-plugin artifactId for 4.1.0 / -5.0.0- , update integration tests   (/) prepare migration guide for Clover 4.1 / -5.0- Release Notes   (/) update Clover's Tutorial (Moneybags bundled in clover-ant.zip) -> see also CLOV-1827    _After release_    See CLOV-1828."""
"CLOV-1776","Bug","Instrumentation",2,"Instrumentation error on certain projects since 4.0.5 build of Clover. ","""Instrumentation error on certain projects since 4.0.5 build of Clover.     Making it a blocker as we can't run Clover on certain projects any longer.     """
"CLOV-1779","Bug","Groovy",3,"Groovy code with Generics throw NPEs","""Starting with Clover version 4.0.1 when running JUnit tests against clover instrumented code I am getting a null pointer exception when attempting to call this method:    {code:java}  // in DateUtil.groovy    static <T extends Date> T copy(T date) {      (T) date?.clone()    }  {code}    It seems like something has changed with the instrumentation. Either of these two other variations of this same code *doesn't* have this problem:    {code:java}    static Date copy(Date date) {      date?.clone()    }      static def copy(def date) {      date?.clone()    }  {code}      Here's the top of the stacktrace:  """
"CLOV-1780","Suggestion","Maven plugin",2,"Add migration message in maven-clover2-plugin POM","""(/) investigate if we can use clover-maven-plugin or must use cloverX-maven-plugin -> it would be great to have just clover- instead of cloverX- to avoid changing a number in future  (?) decide if major Clover release will be numbered 4.1.0 or 5.0.0 (as per Semantic Versioning) -> it may affect whether it will be named clover4- or clover-5  (/) prepare migration message in maven-clover2-plugin pom.xml for versions 4.0.x, similarly as it was done for Clover Core (com.cenqua.clover:clover:3.3.0) -> deliver in Clover 4.0.6, 4.0.7, ...    to be considered:  (x) prepare a fork of the plugin and release under two names since 4.0.6?  (x) add an extra migration warning printed by the clover2:setup / clover2:instr goal?"""
"CLOV-1784","Suggestion","Database|Test Optimization",2,"Extend interfaces to manipulate test optimization","""Interface to manipulate test optimization:  * to reorganize optimized test sets  * to manipulate content the test optimization snapshot file"""
"CLOV-1790","Suggestion","Instrumentation",1,"Rename StatementInfo to ExpressionInfo","""Rename StatementInfo to ExpressionInfo in the API. Java is the odd one out here. Scala, Clojure etc all have expressions as there basic unit of execution. A statement is an expression with no result.   """
"CLOV-1789","Suggestion","Instrumentation",2,"Add possibility to add custom properties for code elements","""Introduce a base interface to ClassInfo, MethodInfo, PackageInfo, FileInfo, StatementInfo, BranchInfo which allows API clients to add arbitrary properties to the model. They values should be raw types, possible Serializable objects too. This should allow instrumentation providers better answer questions Clover may have about the model they've produced.    Something like:    interface CustomInfo   - getProperties(): Map<String, Object>   - setProperty(String, Object)   - getProperty(String)    interface FileInfo extends ..., CustomInfo  interface TypeInfo extends ..., CustomInfo  interface MethodInfo extends ..., CustomInfo  interface BranchInfo extends ..., CustomInfo  interface StatementInfo extends ..., CustomInfo  """
"CLOV-1788","Suggestion","Instrumentation",3,"Make session.enterClass() more language-independent","""Clean up InstrumentationSession.enterClass(..., boolean isInterface, boolean isEnum, boolean isAnnotation) so that it instead takes a LanguageConstruct to indicated what it is which is then embedded in ClassInfo. This divorces this part of the API from Java allowing us to model languages like Scala who have things like traits, singleton objects, etc.    This may require a separate LanguageConstruct-like type (TypeConstruct ?) as it will likely need to be smarter than LanguageConstruct and be able to answer some basic questions Clover may need to ask e.g.        The example above is a bit fake because surely we could determine if a TypeInfo is abstract by traversing it but there may be situations where we need to ask similar questions.  """
"CLOV-1787","Suggestion","Database",1,"Rename ClassInfo to TypeInfo","""ClassInfo is just OK for Java and Groovy (we have classes). But we also have enums, interfaces and annotations! And in other languages we also have closures (Groovy), traits (Groovy, Scala) etc. Thus the name ClassInfo does not suit well for other languages.       Rename ClassInfo to something better. TypeInfo might be better."""
"CLOV-1785","Suggestion","Instrumentation",3,"Extend database format to handle statements and methods in a file","""Allow better modelling of file-level statements and methods so that we can better support languages like Ruby which support top-level scripting constructs.     Example:       Some preparation have been already done for Java 8 (Clover 3.2).    Things to be checked:   * how our code calculates the start/end line/col range for a statement/method outside a class   * how it calculates code metrics for a file having top-level statements/methods   * how it handles exclusion filters (statement/method regexp)   * how it handles nested entities (method-in-method etc)    Things to be implemented:   * take into account these top-level statements/methods in reporting   ** show in XML / HTML / PDF / JSON   ** render lines   ** show in tables etc    Out of scope:   * test optimization    Note:  Looking at how Clojure is written, for any Clojure file there would only ever be one FileInfo containing lots of StatementInfos and MethodInfos but no ClassInfos."""
"CLOV-1794","Suggestion","CEP Plugin",1,"Drop Eclipse 3.6 and 3.7","""* compile against eclipse 4.2  * fix deprecation warnings etc  * remove legacy code (if any)  * bump version numbers in feature name"""
"CLOV-1793","Suggestion","Grails Plugin",2,"Drop Grails 1.3",""" * remove legacy code (if any)"""
"CLOV-1795","Suggestion","Reporting",0.5,"Remove --style from Command line processors","""{{--style}} argument has been deprecated in 4.1.0 it should be removed in next major version 4.2.0.  Scope: * remove HtmlReporter#Style * update docs i necessary * cleanup all TODO CLOV-1795"""
"CLOV-1797","Suggestion","CIJ Plugin",0.5,"Support for IDEA 14.1.5","""It should work but let's be sure.   http://blog.jetbrains.com/idea/2015/09/intellij-idea-14-1-5-update-is-out/"""
"CLOV-1804","Suggestion","CEP Plugin",0.5,"Add support for Eclipse Mars.1","""Eclipse Mars.1 was released on 01.10. Make sure Clover is compatible by:    * smoke testing  * adding new version to Eclipse versions matrix. """
"CLOV-1808","Bug","Instrumentation",1,"StringIndexOutOfBoundsException in CloverStartup.evaluateDaysLeft","""Clover fails to decode the license key. Stacktrace:        """
"CLOV-1817","Suggestion","CEP Plugin",0.5,"Fix colors of test passed / failed / error icons in Eclipse","""Currently we use dark blue color for a failed test. It's not contrast enough compared to the green one.     Furthermore, we use a red background for a """"FAIL"""" status label, which is not consistent. Also, a green background used for a """"PASS"""" label is different from the green dot in the icon.     Current colors used: green-pass, blue-fail, red-error are the same as in Eclipse's JUnit view.    Consider also changing a dot to three different figures to make it accessible for color-blinded people. For instance:   * light green circle - pass   * dark blue triangle - fail   * red square - error  """
"CLOV-1823","Bug","CEP Plugin",0.5,"Test optimization in Eclipse Mars 4.5.1 keeps running one test","""Steps to reproduce:   * rebuild a project, clean database and optimization snapshot   * two times on 'run optimized' button, for the first time it runs all test, for the second time it runs one test (and should none)"""
"CLOV-1825","Suggestion","Maven plugin",0.5,"Add more debug logging for clover2:aggregate","""Currently, it's not known why a project has no child databases and what user can do with it. """
"CLOV-1827","Suggestion","Ant Tasks",1,"Update Clover Tutorial",""" * use source=1.6 instead of 1.4   * download required JARs (build*.xml)   * do not require env.GROOVY_HOME set to 1.7   * rename 'test' to 'test.run'   * remove cloverjunitlib.xml   * convert unit tests to JUnit4   * simplify goals   * use clover-maven-plugin  """
"CLOV-1834","Bug","Instrumentation|Maven plugin",1,"Instrumentation failure of an annotation inside the catch clause","""Clover is failing to instrument below section of java 7 code  This is a perfectly valid java 7 syntax but clover instrumentation fails at @SuppressWarnings(""""unused"""") annotation. """
"CLOV-1835","Bug","Instrumentation",2,"Unicode 0x200B (zero-width whitespace) causes instrumentation failure","""JDK 6 implements Unicode 4.0. In this version of Unicode, the zero-width whitespace character (0x200B) is being treated as a whitespace.    JDK 7 implements Unicode 6.0. In this version of Unicode, the zero-width whitespace has been reclassified to the 'format character' group (other characters in this group are, for example, left-/right- text direction markers).    Thus, Java compiler in JDK 6 allows to use 0x200B as a normal whitespace character, e.g. separating symbols.     The Java compiler since JDK 7 silently ignores the 0x200B, which means that it cannot be used to separate symbols anymore. However you can put this character virtually in any place, e.g.:    {code:java}  void this<200B>Is<200B>MyMethod();  {code}    Clover fails on parsing the 200B character:        *Planned fix:*     * Ignore 200B characters in Java 7+. Treat 200B character as space in Java 6.   * Question: Shall it be based on source level setting or the JDK detected?   * Question: which other control characters needs to be ignored by Clover?   * Question: which other whitespace characters (other than space, \t, \n, \r) shall be recognized by Clover parser?    *Workaround:*    Remove all 200B character occurrences from the source code.   """
"CLOV-1841","Suggestion","Documentation",2,"Prepare feature analysis of JCov tool","""Analyse https://wiki.openjdk.java.net/display/CodeTools/jcov    and publish on https://confluence.atlassian.com/display/CLOVER/Comparison+of+code+coverage+tools    """
"CLOV-1846","Suggestion","CIJ Plugin",1,"IntelliJ Plugin should ask for rebuilding project after changing exclusions","""Currently it doesn't always ask which sometime may lead to {{ClassNotFoudException}}    h2. Preconditions  IntelliJ IDEA with Clover installed     h2. Repro steps  # Clean project and coverage db  # Exclude some class with context menu  # Run tests  # Wait for exception    h2. Expected result  # Clean project and coverage db  # Exclude some class with context menu  # Clover asks user for rebuilding the project. """
"CLOV-1848","Suggestion","CIJ Plugin",0.5,"Add IntelliJ 15.0.2 to test matrix","""Add IntelliJ 15.0.2 to test matrix after it being released. Currently there was RC released. """
"CLOV-1847","Suggestion","CIJ Plugin",2,"IntelliJ Plugin should not use UI thread to generate Cloud report","""Currently Clover generates Cloud report in UI thread, it can take couple of seconds with bigger projects causing whole UI to freeze.     Let's try to move it back to background somehow. """
"CLOV-1856","Bug","CIJ Plugin",0.5,"IntelliJ IDEA plugin with version 4.1.1 shows wrong supported version","""Site for Clover on IntelliJ plugin page indicates Clover 4.1.1 supports Idea 9x however it's not true.   Update plugin.xml to show correct version.     https://plugins.jetbrains.com/plugin/?id=132 """
"CLOV-1855","Suggestion","CIJ Plugin",1,"Drop support for IntelliJ IDEA 11.x","""Scope:  * drop support for IntelliJ IDEA 11.x   * refactor deprecated code  * remove IntelliJ 11.x from test matrix  * update plugin.xml to tell correct minimal version of IntelliJ IDEA which is supported. """
"CLOV-1884","Bug","Ant Tasks",1,"CloverCompilerAdapter should look for Javac.compileList also in super classes","""It may happen that user will wrap or subclass the Apache's Javac field. In such case, Clover won't be able to find and set this field and break the build. The CloverCompilerAdapter should look it up in a class hierarchy.     We can use Apache's FieldUtils for this purpose."""
"CLOV-1951","Suggestion","CEP Plugin",3,"Support Eclipse 4.6 Neon","""Make Clover-for-Eclipse compatible with Eclipse Neon. Problems found so far:    1. Running optimised tests throws an exception (/)        2. Deprecated API (/)    SubProgressMonitor in org.eclipse.core.runtime has been deprecated   ViewerSorter in org.eclipse.jface.viewers has been deprecated   setSorter(ViewerSorter) in StructuredViewer has been deprecated   Main(PrintWriter,PrintWriter,boolean) in Main has been deprecated    3. Code incompatibility (/)    CoverageAnnotationModel is not abstract and does not override abstract method getAnnotationIterator() in IAnnotationModel"""
"CLOV-1956","Bug","Integrations",2,"Fix Ant 1.9.7 double quotes","""Ant prior to version 1.9.7 incorrectly handled arguments containing white space characters (they were being passed as separate arguments). For this reason, we put various paths (e.g. path to a license file) in double quotes.   This has been fixed in Ant 1.9.7. However, as a consequence it does not strip double-quotes now, so paths are interpreted literally - with quotes.  We need a fix on Clover side, but at the same time to keep compatibility with older Ant versions.   Consider adding proper flag for Clover-for-Ant tasks (e.g. """"withQuotes=true"""").  See also:  * BAM-10740  * BAM-17201"""
"CLOV-1953","Bug","Groovy",5,"Clover does not instrument all nodes in Groovy AST","""Problem was reproduced in Groovy 2.4.3 and 2.4.4:    https://answers.atlassian.com/questions/39141626/why-is-clover-showing-green-on-gray    https://answers.atlassian.com/questions/39141622/incomplete-clover-coverage-in-grails-2.5-integration-testing"""
"CLOV-1960","Suggestion","Groovy",8,"Instrument Groovy traits and show code coverage for them","""*Current status*    Groovy 2.3 introduced traits - a code construct for composition of behaviours:   * http://docs.groovy-lang.org/latest/html/documentation/core-traits.html    Currently Clover handles them like an interface - it records the class name in a database but it does not instrument the class, so it shows no code coverage in reports for them.     Side note: Clover's reports by default do not show classes containing no executable code (empty classes, plain enums, interfaces with no default methods, traits) - you can show them by setting [showEmpty=true|https://confluence.atlassian.com/display/CLOVER/clover-report] parameter.    *Proposed improvement*    Instrument Groovy traits like normal classes or enums.     Side note: Groovy 2.5 will probably not introduce interfaces with default methods (like in Java 8).    * http://docs.groovy-lang.org/next/html/documentation/#_interface    *Technical obstacles*    * method '$CLV_R$' is private but should be public in a trait  * method 'com_atlassian_clover.CoverageRecorder $CLV_R$()' must not be static; only fields may be static in a trait  * field '$CLV_R$' is not 'public static final' in a trait  """
