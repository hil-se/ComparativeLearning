"issuekey","type","components","storypoint","title","description_text"
"TIMOB-25731","Bug","Android",1,"Android: Glitch on backgroundColor animation with borderRadius","Background color animation in rounded-angle views changes the color to the rectangle behind the view, but the shape with rounded corners does not animate.    I enclose two comparison videos on iOS and Android.    Example code:          "
"TIMOB-25730","Improvement","Android",1,"Android: Allow SearchBar ""color"" and ""hintTextColor"" properties to be set dynamically","*Summary:*  Add the ability to set the text color and hint text color of a ""Ti.UI.SearchBar"" on Android  The Android ""Ti.UI.SearchBar"" supports undocumented properties ""color"" and ""hintTextColor"" for changing its text field colors. However, these properties can only be set upon creation. We should allow these properties to be set dynamically.    This is especially needed for parity since we're adding this feature on iOS via [TIMOB-10368].    *Note:*  We plan on adding a similar feature to Android's ""SearchView"" in 7.1.0. See: [TIMOB-25668]    *Test Code:*  Once this feature has been implemented, verify that the SearchBar's hint text color is ""blue"" and the entered text is ""red"".      "
"TIMOB-25729","Bug","Hyperloop",5,"Hyperloop: iOS - Unable to load Mapbox using Hyperloop","h5 Issue:   Using steps in Timob-23853 https://jira.appcelerator.org/browse/TIMOB-23853?focusedCommentId=429306&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-429306  customer is unable to load Mapbox and gets error:  ""Couldn't find module: ""  Attached is a screenshot of the error along with the testapp:    [^HyperloopDemo.zip]    !Screen_Shot_2018-01-26_at_1.29.28_PM.png|thumbnail!     you can see the log we get when trying to load the module here:   https://gist.github.com/exclusiveTanim/c47578c227c7e958a34d441311a5c223    Customer has reached out to express urgency for a resolution. "
"TIMOB-25726","Improvement","Android",5,"Android: Ensure device's installed Google Play Services is available/updated on app startup","*Summary:*  The Google Play Services libraries (included with ""ti.playservices"" module) are merely an interface to the installed Google Play Services app/apk. The app must ensure that Google Play Services is installed on the device and that its apk version is greater or equal to the version of the Google Play Services libraries that the app includes... or else the library's APIs will fail or throw an exception.    Google documents the above here...  https://developers.google.com/android/guides/setup#ensure_devices_have_the_google_play_services_apk    *Feature Requirements:*  # The Google Play Services check should be done when the Titanium splashscreen is displayed (ie: TiLaunchActivity.java) and before executing the ""app.js"" script.  # Do not run the check if ""ti.playservices"" module is not included in the app. (In this case, assume app does not use Google Play Services.)  # If Google Play Services is found to be too old or disabled, display an alert asking end-user to resolve it. Keep the end-user on the launcher screen in this case.  # If end-user chooses to update Google Play Services, remain on the launcher screen until the download completes, then proceed on to execute the ""app.js"" script.  # Do not display an alert if the device does not have Google Play installed and proceed to execute the ""app.js"" script. In this case, assume the app is not distributed via the Google Play app store (such as Amazon) or the app is running via an emulator without Google Play installed.  # Add ""tiapp.xml"" boolean property ""ti.playservices.validate.on.startup"" which when set {{false}} will disable this feature. In this case, it is the app developer's responsibility to manage this.    *Note:*  Currently, Titanium's ""ti.playservices"" module purposely uses Google Play Services library versions a few revs old to avoid the failure mentioned above. Once we update a Titanium app to install the newest version of Google Play Services on startup, we no longer have to fear this issue and we can keep the module's libraries up-to-date."
"TIMOB-25733","Bug","Android",3,"Android: View with border larger than screen may fail to appear as of 7.0.2.RC","This warning appeared to me with SDK 7.0.2.v20180123170142 and 7.0.2.v20180125101244 only. So some views do not display, but with SDK 7.0.2.v20180123083830 and below it's working good    [WARN]: View: TiBorderWrapperView not displayed because it is too large to fit into a software layer (or drawing cache), needs 14925600 bytes, only 8294400 available"
"TIMOB-25776","Bug","Android",8,"Android: Cannot use Ti.NFC","Dear all,    I've been playing (or trying to play) with the ti.nfc module for a while.  I'm just throwing there the example TagViewer from the module examples, just a copy and paste of the module and a modification of the tiapp.xml to add the android properties in manifest.    However, when trying to run the project, this warning appears in there:    [WARN] :   android:launchMode should not be used. Ignoring definition from .NfcActivity    And the application doesn't work properly. Am I doing something wrong? Should I change something to allow android:launchMode?    Thanks for your comments.    PD: I've also attached the tiapp.xml the modules folder and the app folder of the project, in case you want to take a look (I tried to attach the whole project, but looks like it is too heavy)."
"TIMOB-25735","Bug","Android",1,"Android: Replace Activity.isDestroyed() with Android 4.1 compatible alternative","The fix for TIMOB-25656 made use of {{Activity.isDestroyed()}} which is an Android 4.2+ method. We need to replace it with an alternative.    *TEST CASE*  - Titanium Application should launch on 4.1 device"
"TIMOB-25736","Bug","iOS",2,"iOS: Question about TabGroup limitations"," We are not able to resize the tab group height, as when we provide both icon and title for tab they are getting stick to each other using circle shape icon. Also we are not able to provide the padding forth icons.    *Test Environments:*    Appcelerator Command-Line Interface, version 7.0.1  Operating System Mac OS X,Version 10.13.2,Architecture 64bit,CPUs  4,Memory 8.0GB   Node.js Version             = 8.9.1   npm Version                 = 5.5.1   Appcelerator CLI 4.2.11   Core Package  7.0.1   Titanium CLI 5.0.14    node-appc Version 0.2.41   Titanium SDK 7.0.1.GA   iOS SDK: 11.1-Simulator iPhone X    *Test Steps:*    1. Open Studio and create a clasic project  2.Paste the resource folder to newly created project  3. Run via simulator . Observe that  both icon and title for tab they are getting stick to each other using circle shape icon.    *Test Output:* [Snapshot| https://s9.postimg.org/3uxpv598v/Simulator_Screen_Shot_-_i_Phone_X_-_2018-01-31_at_15.29.01.png]  "
"TIMOB-25741","Bug","iOS",0,"iOS:Tableview with custom rows becomes blank on search bar OnFocus","Tableview with custom rows becomes blank on search bar OnFocus    *Test Environments:*  Appcelerator Command-Line Interface, version 7.0.1  Operating System Mac OS X,Version 10.13.2,Architecture 64bit, CPUs  4,Memory 8.0GB     Node.js Version             = 8.9.1     npm Version                 = 5.5.1    Appcelerator CLI 4.2.11    Core Package  7.0.1    Titanium CLI 5.0.14    node-appc Version 0.2.41   Titanium SDK 7.0.1.GA  iOS SDK: 11.1-Simulator iPhone X  Xcode 9.1,9.2    *Test Code:*    *index.js*      *index.xml*        *Test Steps:*  1. Create an alloy project  2. Paste the sample code to app folder  3. Run Via simlator  4. Click on searchbar and observe that tableview  becomes blank on search bar OnFocus    *Output*:[Screenshot| https://s17.postimg.org/ouj2zhgwf/Simulator_Screen_Shot_-_i_Phone_X_-_2018-02-01_at_15.01.03.png]"
"TIMOB-25740","Improvement","Android|iOS|Windows",8,"TiAPI: Add support for async/await","We added support for ES6 and later in the latest 7.1.0 changes, which is *awesome*! The only thing missing is the support for using async/await in Titanium code.    Here is an example (taken from my sample-project):  {code:js}    someOtherMethod() {      this._getUserLocation();    }      async _getUserLocation() {      // FIXME: Current throws, work in progress!      const coordinates = await Ti.Geolocation.getCurrentPosition(event => {        return new Promise(resolve => {          resolve(event.coords);        });      });      alert(`Found location! Latitude: ${coordinates.latitude}, Longitude: ${coordinates.longitude}`);    }  {code}  The full sample can be found [here|https://github.com/hansemannn/titanium-es6-sample/blob/master/Resources/src/application.js#L84-L94]. It is throwing an ""Cannot find regeneratorRuntime"" error when calling the method, which looks like a Babel error that occurs when certain transform-plugins are missing.     We use the babel-preset-env, which should already support it by having a dependency on [babel-plugin-transform-async-to-generator|https://www.npmjs.com/package/babel-plugin-transform-async-to-generator] but for some reasons it does not work.     Important to say is also that I may be doing something wrong, so let me know if thats the case!"
"TIMOB-25739","Bug","iOS",2,"iOS 11: Location permissions do not indicate missing ""WhenInUse"" privacy-key","When asking for Location permissions in iOS 11, the following error is shown, even thought my plist already have these keys:          This is the ios part of the tiapp.xml. I've also opened the generated Info.plist file and it looks good.          In order to reproduce the issue, this is an example code, on an normal app, inside app.js (I've also attached the file)            Thanks for having a look"
"TIMOB-25743","New Feature","Windows",5,"Windows: Auto-increment version numbering","We might want to introduce automatic-increment for build number during build due to deployment issues  (See TIMOB-25616 and TIMOB-25017).    Here's some starting point to discuss:    - Do we accept the difference between version numbering in tiapp.xml and actual app? Note that Developers may want to determine specific version number for the release build.  - We could introduce special placeholder like {{<version>1.0.*</version>}} but this may cause breaking change and parity issue between platforms. Do we wan to do like this? Or we could just say ""If you omit the build number, we just automatically increment it behind scenes, only on Windows platform"".  - Do we accept this breaking change regarding new version numbering spec?   - Do we want to enable it by default? Otherwise do we want to introduce new property in tiapp.xml like {{<enable-auto-build-numvering/> or so}}?  - Do we want to introduce this new version numbering spec for other platforms? Do we want to keep parity for it?  - Do we want to make it configurable from Appc Studio? For instance [""Automatically increment"" checkbox in UWP packager|https://docs.microsoft.com/en-us/windows/uwp/packaging/images/packaging-screen5.jpg]  "
"TIMOB-25747","Bug","iOS",5,"iOS: Modal error dialog not shown when using main-thread","When running on main-thread (new default since 7.0.0), the ""red screen of death"" is not shown. This is due to [this commit|https://github.com/appcelerator/titanium_mobile/commit/32dd2c512b18e7cfa6655fb4b57987f45613249a] from the good old 1.x SDK days where we didn't have the ability to run UI on the main-thread.    This ticket should also be used to refactor the error dialog a bit - to include the error reason and make a bit less ugly."
"TIMOB-25749","Bug","Android",2,"Android: Incompatible types: Class<KrollExternalModule>","I'm using 7.0.1, trying to switch to 7.0.2 RC I unable to run it to android and I get this error    error: incompatible types: Class<KrollExternalModule> cannot be converted to Class<? extends KrollSourceCodeProvider>  [ERROR] :        (Class<KrollExternalModule>) Class.forName(className));  [ERROR] :        ^  [ERROR] :  Note: Some input files use unchecked or unsafe operations.  [ERROR] :  Note: Recompile with -Xlint:unchecked for details.  [ERROR] :  Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output  [ERROR] :  1 error  [ERROR] Application Installer abnormal process termination. Process exit value was 1  "
"TIMOB-25748","Improvement","iOS",13,"iOS: Remove TiCore","We deprecated TiCore in SDK 7 and fixed the last issues around using JSCore (proxies not being released, post data not being released, fix debugger). So it's time!"
"TIMOB-25753","Bug","Android",1,"Android: ScrollView ""width"" ignores Ti.UI.SIZE as of 6.3.0","*Summary:*  Setting the ScrollView ""width"" property to ""Ti.UI.SIZE"" will do a ""Ti.UI.FiLL"" instead as of Titanium 6.3.0.  _(This is not an issue with the ""height"" property. Only the ""width"".)_    *Code to Reproduce:*      *Result:*  The above code produces a yellow ScrollView. Note that the ScrollView does not auto-size itself to just fit the ""Hello World"" label as seen in ""Screenshot-Bad.png"".    *Expected Result:*  The ScrollView width should auto-size itself to fit the label as shown in ""Screenshot-Good.png"". This is how it worked in Titanium 6.2.2 and older versions.    *Cause:*  This bug happened when we added ""RefreshControl"" support. Google's Java ""SwipeRefreshLayout"" class does not support the ""WRAP_CONTENT"" setting.    *Recommended Solution:*  Modify Titanium's Java ""TiSwipeRefreshLayout"" onMeasure() method to handle the ""WRAP_CONTENT"" setting ourselves. We're already doing this in the vertical direction and we need to do the same for the horizontal.  https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiSwipeRefreshLayout.java#L76  "
"TIMOB-25757","Bug","Android",3,"Android: Improve proxy getter/setter validation","- The parent proxy of getters and setters is not validated which can cause a crash    *TEST CASE*  {code:js}  Ti.API.bubbleParent; // should not crash  {code}"
"TIMOB-25769","Bug","Android",3,"Android: Allow video-upload in Ti.UI.WebView","If you display a web form in Webview on your app with a File upload, you can't choose a video on Android. (iOS it's OK)."
"TIMOB-25760","Bug","Windows",8,"Windows: Titanium.Network.HTTPClient Location doesn't return the redirected URL","Titanium.Network.HTTPClient Location doesn't return the redirected url in windows.  It works perfectly on iOS and Android.    Sample Code:    var _tmpURL = ""any url that redirects to other url""  var _tmpClient = Ti.Network.createHTTPClient({           onload: function(e)           {                   serverAddressRedirected = _tmpClient.location;     //this should return redirected url but returns the url before redirect                   Ti.API.info(""Location:"" + serverAddressRedirected);                              },          onerror : function(e)            {                 alert(""Error:"" + e.error);            },            timeout: 30000        });        _tmpClient.open(""GET"",_tmpURL);        _tmpClient.send();    "
"TIMOB-25768","Bug","iOS|Windows",8,"Use rollup to avoid circular references with ES6 imports in JavascriptCore","- JavascriptCore does not have full ES6 module support, circular references with {{import}} will cause a stack overflow    *TEST CASE*  {code:js}  // TODO  {code}"
"TIMOB-25767","Bug","Android",3,"Android: Animated views should retain their initial properties","- Animations update the properties of the proxy after a transformation. Out documentation suggests this is not the case (http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.Animation)    {quote}Note that when you animate a view's size or position, the actual layout properties (such as top, left, width, height) are not changed by the animation.{quote}    *TEST CASE*  {code:js}  var win = Ti.UI.createWindow();      view = Ti.UI.createView({          backgroundColor:'red',          width: 100, height: 100,          left: 100,  top: 100      });    win.addEventListener('open', function () {      var animation = Ti.UI.createAnimation({          top: 150,          duration: 1000      });        animation.addEventListener('complete', function () {          // make sure to give it a time to layout          setTimeout(function () {              console.log(`X: ${view.rect.x} == 150, TOP: ${view.top} == 100`);          }, 500);      });        view.animate(animation);    });  win.add(view);  win.open();  {code}"
"TIMOB-25771","Bug","Android",5,"Android: Apps fail to build as of 7.0.2 if system requires proxy to access Internet","*Summary:*  If the developer's system uses a proxy to access the Internet, then Android apps will fail to build as of Titanium 7.0.2.    *Steps to Reproduce:*  # Delete the following folder on Mac, if it exists: ~/.gradle/caches  # Set up the machine to access the Internet via a proxy.  # Configure the proxy settings in Appcelerator Studio via its ""Proxy Setup"" window or via the CLI's ""appc config set proxyServer"".  # Attempt to do an Android build.    *Result:*  The build fails with follow logged errors...      *Cause:*  A new ""gradle"" build step has been added to Titanium 7.0.2 to perform ProGuard and multidexing apps. Gradle is failing to download its module(s) from maven repositories since it is not configured to work through a proxy.    *Recommended Solution:*  Developers currently have to configure Titanium/Appc to use a proxy according to our docs here...  http://docs.appcelerator.com/platform/latest/#!/guide/Using_Studio_From_Behind_a_Proxy  http://docs.appcelerator.com/platform/latest/#!/guide/Appcelerator_CLI_Getting_Started    When the Titanium build system generates the ""gradle-wrapper.properties"" file, it should add the CLI's proxy settings to that gradle property file as well. Gradle documents these proxy settings here...  https://docs.gradle.org/current/userguide/build_environment.html#sec:accessing_the_web_via_a_proxy    *Work-Around:*  Titanium developers can work-around this issue by configuring a global ""gradle.properties"" file with these proxy settings according to the docs here...  https://docs.gradle.org/current/userguide/build_environment.html#sec:accessing_the_web_via_a_proxy    On Mac, the global file goes here...      On Windows, the global file goes here...    "
"TIMOB-25770","Bug","Android",5,"Android: requestThumbnailImagesAtTimes() does not work with remote content","Requesting a thumb from a video payer that has a remote video loaded results in a crash.    Test case:      "
"TIMOB-25775","Bug","iOS",5,"iOS: Cannot get gradient properties after creation","Triggered by TIMOB-9366, a developer might want to receive gradient properties after creating the gradient. Example:  {code:js}  var win = Titanium.UI.createWindow({      backgroundColor:'#fff'  });    var gradient = {      type: 'radial',      startPoint: { x: 50, y: 50 },      colors: [ 'red', 'blue'],      startRadius: '90%',      endRadius: 0  };  var radialGradient = Ti.UI.createView({      width: 100,      height: 100,      backgroundGradient: gradient  });    win.addEventListener('open', function() {    console.log(radialGradient.backgroundGradient.colors.join(', ')); // CRASH!  });    win.add(radialGradient);    win.open();  {code}    This does not only effect the ""colors"" key but also ""startPoint"", ""endPoint"" and ""type""."
"TIMOB-25774","Story","Windows",5,"Windows: Contact request should not block UI thread","Requesting access to contact while {{ContactManager::RequestStoreAsync}} should not block UI thread because permission requesting dialog actually uses UI thread. This causes intermittent application freeze described in TIMOB-23332."
"TIMOB-25780","Bug","Windows",8,"Windows: Ti.Filesystem.File can't handle multilingual filename","{{Ti.Filesystem.File}} can't handle multilingual filename.        Expected: This should write a file with given filename and given content.  "
"TIMOB-25779","Bug","iOS",5,"Foreground Push notification cannot get received when there is ""Content-Available"" in payload","h6.Reproduce  1. Run the following app on iOS device.  https://github.com/sliang0904/SimlpePushCode/blob/master/app.js  2. Click subscribe button to register to channel. And keep the app in foreground.  3. Send push notification from dashboard. But with 'Content-Available' checked. (attached screen shot)  4. Then the app can not get the push notification.  5. But if you put the app in background. Then send same push again. then app can receive the push."
"TIMOB-25778","New Feature","Windows",8,"Windows: Implement Ti.UI.Label.ellipsize","Implement [Ti.UI.Label.ellipsize|http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.Label-property-ellipsize]. It should return {{Number}} value but currently on Windows it returns {{bool}}.   "
"TIMOB-25784","Bug","Windows",3,"Windows: Ti.Geolocation.getCurrentPosition location is not accurate","Test Code :    Test Environment:      Thanks "
"TIMOB-25783","Bug","Windows",3,"Windows: HttpClient.clearCookies freezes app","{{Ti.Network.HttpClient.clearCookies}} hangs. It also doesn't clear the cache.        Expected: App should not freeze and New cookie should be different."
"TIMOB-25785","Bug","iOS",5,"iOS: Sending events that cannot be serialized fail on SDK 7.0.0+","Here is a code :  alloy.js      {code:javascript}  Ti.Gesture.addEventListener('orientationchange', function (e) {      Ti.App.fireEvent('_customEvent', e);  });    Ti.App.addEventListener('_customEvent', function () {});    {code}    This triggers an error on orientation change        "
"TIMOB-25845","Bug","Android",13,"Android: Non-production app builds with modules crash on startup if TLS 1.1 or higher is required for Internet access","Related to https://jira.appcelerator.org/browse/TIMOB-20579    When being connected to a hotspot network, without being logged in into the hotspot (and without having internet connection), I'm not able to open the app, I get following error log:    It's just a normal Appcelerator Titanium app, containing the ti.brightness module. That's might not be the issue, as the error stack shows that it goes wrong when performing network calls.    Android 7 on Samsung Galaxy S8    "
"TIMOB-25791","Bug","Android",2," Android:  getTime issue with 7.0.2 sdk in android","Hi,  There is an issue in the SDK 7.0.2 with the getTime() function in Android.  Issue:-  new Date(""2018-02-20T11:30:00"").getTime() has discrepancy with the old sdk's (  same function is returning different values(milliseconds) in old sdk and new sdk.  1519104600000 - new sdk (7.0.2.GA)  1519126200000 - old sdk (6.3.0.GA)    steps to recreate:-  1)calculate the milliseconds using new Date(""2018-02-20T11:30:00"").getTime() in 7.0.2 and 6.3.0.  2)copy that in check the local time and UTC in http://currentmillis.com.  3) you should see the difference in two SDK's.    Test Code:    "
"TIMOB-25789","Bug","Windows",5,"Windows: HttpClient.onreadystatechange should be called right after ondatastream/onsendstream","HttpClient {{callbackTestForGETMethod}} and {{callbackTestForPOSTMethod}} [unit test|https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/ti.network.httpclient.test.js#L377] shows {{onreadystatechange}} should be called right after {{ondatastream/onsendstream}} event to keep parity with iOS/Android.        Expected: {{finish}} should be printed."
"TIMOB-25788","Story","Windows",8,"Windows: Fix windowsBroken HttpClient tests","In {{ti.network.httpclient.tests}} on our unit tests, we've been skipping some of unit tests for Windows by marking {{windowsBroken}}. Need to make sure what's causing the actual issue and create new ticket when needed. This ticket is to keep track on it. "
"TIMOB-25795","New Feature","Android|Hyperloop",8,"Hyperloop: Android - Expose all missing Android R resource types to Ti.Android.R","We support a couple of Android R resources types in Titanium [already|http://docs.appcelerator.com/platform/latest/#!/api/Titanium.Android.R].     With having Hyperloop these days, we are able to perform powerful Android interactions like the BottomNavigationView, RecyclerView API's. It's convenient to load the views via XML and configure them via colors and strings inside the platform/android/res/ directory. For a concrete use-case, we need to load a {{menu}} resource for the bottom navigation view, which would be {{Ti.Android.R.menu.xxxx}}, but the {{menu}} namespace is not exposed. Therefore, this ticket proposes a tiny change that basically adds all (current) Android R resources types to our resource lookup map, so developers can use the official SDK API's instead of hacking it together like in the example.    Missing properties:  - animator  - bool  - fraction  - interpolator  - menu  - mipmap  - plurals  - raw  - transition  - xml"
"TIMOB-25794","Bug","Hyperloop|Windows",5,"Windows: Adding a hyperloop created UI element to a View crashes the app","h5.Description    *This is a regression from 7.0.2.GA*    When adding a UI element that is created using hyperloop to a Ti.UI.View the app will crash with no logs        h5.Steps to reproduce    1. Add the above code to an existing classic project with hyperloop setup  2. Build for any Windows target  3. Click the view when the app launches    h5.Actual    App crashes    h5.Expected    App should not crash"
"TIMOB-25793","Bug","iOS",5,"iOS: No callback when not granting push notification permission (Apple bug)","Hi,     I am trying to enable push notifications on IOS device and when I grab token I am being asked to provide push notification permission. If I choose not to give it, error callback is not thrown. I copied code directly from Push Notifications Reference Guide:     http://docs.appcelerator.com/platform/latest/#!/guide/Subscribing_to_push_notifications     Here is the code:   ---------------------------------------------------------------------------------------------------------------------------------------------------         ---------------------------------------------------------------------------------------------------------------------------------------------------     Note that deviceTokenError never gets thrown once permission has been granted/revoked.    *Expected Result:* error callback should be fired when not granting push notification permission.  *Actual Result:* error callback never be fired.    Thanks "
"TIMOB-25792","Bug","Android",3,"Android: Scrolling horizontal ScrollView within a vertical ScrollView should disable vertical scrolling","*Summary:*  When scrolling a ""horizontal"" ScrollView within a ""vertical"" ScrollView, it will scroll horizontally until you scroll too far up/down, then horizontal scrolling will be canceled by the parent ""vertical"" ScrollView and it'll only scroll vertically from then on. This is a behavior change that was introduced in Titanium 6.3.0.    The old behavior would block the parent ScrollView from scrolling vertically while scrolling the child horizontal ScrollView. This behavior should be restored. _(This is also the iOS behavior.)_    *Steps to Reproduce:*  # Build/run the below code for Android using Titanium 6.3.0 or higher.  # Start dragging one of the horizontal ScrollViews. (It's the box containing labels.)  # As you drag it horizontally, drag up or down.  # Notice the parent ScrollView will scroll vertically, but you can no longer scroll the child ScrollView horizontally anymore.        *Result:*  Once you drag up or down while scrolling horizontally, the horizontal ScrollView's scrolling is canceled and only the parent vertical ScrollView can be scrolled.    *Expected Result:*  Parent vertical ScrollView should not be scrollable while scrolling a child horizontal ScrollView. This was the old Android behavior. It is also the iOS behavior.    *Cause:*  ScrollViews call the parent view's {{requestDisallowInterceptTouchEvent()}} method when scrolling has started. However, Google's {{SwipeRefreshLayout.requestDisallowInterceptTouchEvent()}} method ignores the request when made by a child view (in this case a {{HorizontalScrollView}}) that does not support nested scrolling. Since it's ignored, the parent ScrollView ends up intercepting and stealing the nested {{HorizontalScrollView}} touch events.  [SwipeRefreshLayout.java#L735|https://github.com/aosp-mirror/platform_frameworks_support/blob/master/core-ui/src/main/java/android/support/v4/widget/SwipeRefreshLayout.java#L735]    *Work-Around:*  You can restore the old behavior by listening to the horizontal ScrollView's ""dragstart"" and ""dragend"" events. In the ""dragstart"" event handler, disable the parent vertical ScrollView. In the ""dragend"" event handler, re-enable the parent vertical ScrollView.      "
"TIMOB-25872","Bug","iOS",8,"iOS: Log-server-port Build Error Masks Real Error","*Description*    When building an iOS app and there is an issue connecting to the iOS log-server, it always output ""Another process is currently bound to port xxxxx"" even if there is another server connection issue such as the port not existing.    *Workaround*    Figure out the real issue by logging the actual error within the sdk itself (at ~/Library/Application Support/Titanium/mobilesdk/osx/7.0.2.GA/iphone/cli/commands/_build.js in the determineLogServerPort function).    *Steps to Reproduce*    1. Create a different type of error with the server. For example, my /etc/hosts file did not have an entry for 127.0.0.1 localhost, so the actual node error was 'ENOTFOUND'.  2. Create a new titanium app with `appc ti new`.  3. Build with appc ti build -p ios    *Actual Result*    Build errors out with following text:      *Expected Result*    More detailed error. I.E. Something like:      Followed by suggested solution. For example if the node error was EADDRINUSE, then you could still use the existing error message. But if it's another error, log accordingly so the user has the best information for solving the issue."
"TIMOB-25810","Bug","Android",13,"Android: ActionBar height won't resize on screen rotation","*Summary:*  The ActionBar on Android won't resize when the device rotates.     [As seen in Material Design guidelines|https://material.io/guidelines/layout/structure.html#structure-app-bar], when a mobile is on landscape, ActionBar's height is 48dp, while on portrait it's 56dp.    Attached is a video demonstrating the issue.    *Steps to reproduce:*  # Position an Android device in portrait.  # Build and run a default Classic app project on that Android device.  # Note the height of the top titlebar.  # Rotate the device to landscape.  # Notice the titlebar height does not shrink. _(This is the bug.)_  # Keep holding the device at landscape and back out of the app.  # Launch the app in landscape form.  # Notice that the titlebar height is smaller upon launch.  # Rotate the device to portrait.  # Notice that the titlebar height has not increased. _(This is the bug.)_  "
"TIMOB-25801","Bug","iOS",8,"iOS: SDK 7.0.2.GA - VideoPlayer playback issues","on iOS titanium SDK 7.0.2.GA once the playback is done the media player fires the complete event (which is correct) and then the stop event (which shouldn't)    also the function stop doesn't stop the playback but rather pauses it.    and the durationavailable event is fired twice the second time an audio/video is played.      "
"TIMOB-25798","Bug","Android",1,"Android: Unnecessary info logs in console when trying to use geolocation methods with no Ti.playservices","h5.Steps to reproduce:  1. Use the code below in your app.js:    2. Make sure you do not have ti.playservices module in your app.  3. Build the app on Android device/emulator. (I saw the logs on Nexus 6P Android 8.0 & Android 4.4.4 emulator).  4. After app launch tap click me button.  5. Allow location permissions.  6. Check the logs.    h5.Actual results:  1. These info logs are seen : https://gist.github.com/lokeshchdhry/bc231d92727852c4a74f8f37e3465d53    h5. Expected results:  1. The info logs should not be logged."
"TIMOB-25797","Bug","Android",2,"Android: Remove unnecessary Google Play Services logs","h5.Steps to reproduce:  1. Use the code below in your app.js:    2. Make sure you do not have ti.playservices module in your app.  3. Build the app on Android device/emulator. (I saw the logs on Nexus 6P Android 8.0 & Android 4.4.4 emulator).  4. After app launch tap click me button.  5. Allow location permissions.  6. Check the logs.    h5.Actual results:  1. These info logs are seen : https://gist.github.com/lokeshchdhry/bc231d92727852c4a74f8f37e3465d53    h5. Expected results:  1. The info logs should not be logged."
"TIMOB-25796","Bug","Hyperloop|Windows",8,"Windows: Adding a hyperloop created UI element to a View multiple times throws an error","h5.Description    Adding a HL created view to a Titanium view multiple times throws the following error            h5.Steps to reproduce    1. Add the above code to an existing classic project with hyperloop setup  2. Build for any Windows target  3. Click the view when the app launches  4. Click the view again a second time    h5.Actual    Error shown above is thrown on the second click    h5.Expected    No error should be thrown"
"TIMOB-25799","Bug","Android",3,"Android: Cannot build titanium project with JDK 1.9","When the system has only jdk 9 installed then the titanium project fails to build for android.    Steps to Reproduce:  1. Create a default alloy project  2. build the project for android from command line ""appc run -p android""    Actual Result:  The project does not build with following error:      Running dexer manually shows the error is actually the following, in the dexer args [here|https://github.com/appcelerator/titanium_mobile/blob/d3cadc1bcecec20650fae421355e4edffa4876dd/android/cli/commands/_build.js#L4225] we need to swap {{'-Djava.ext.dirs=' + this.androidInfo.sdk.platformTools.path,}} to {{'-classpath', this.androidInfo.sdk.platformTools.path}}, I don't believe we need to handle this on a per-version basis as Java 1.8 handles the {{-classpath}} arg just fine    "
"TIMOB-25807","Bug","Hyperloop",1,"Hyperloop - ES6: Cannot find scoped ""this"" methods anymore","When using ES6 in Hyperloop methods, e.g.   {code:js}      var ButtonDelegate = Hyperloop.defineClass('ButtonDelegate', 'NSObject');        ButtonDelegate.addMethod({          selector: 'buttonPressed:',          instance: true,          arguments: ['UIButton'],          callback: (sender) => {               if (this.buttonPressed) {  //              ^-- Here is the issue - it cannot find the declared method                  this.buttonPressed(sender);              }          }      });        var delegate = new ButtonDelegate();        // Not found when being used in ""Hyperloop.addMethod""      delegate.buttonPressed = function(sender) {          alert('Button pressed!');      };  {code}  the {{this.buttonPressed}} method cannot be found, although declared. We use this pattern many times, to assign methods to instances afterwards. If there is a better approach, we should replace the usages in the hyperloop-examples sample app.    *EDIT*: It only seems to be an issue if the delegate is in the same file as its usage. It works fine for other delegates / sub classes like [here|https://github.com/appcelerator/hyperloop-examples/blob/master/app/lib/ios/subclasses/tableviewdatasourcedelegate.js#L9]."
"TIMOB-25805","Bug","Android",1,"Android: appc info show a leading 0 before NDK Path","Current output of {{appc info android}}            with the fix:      "
"TIMOB-25804","Bug","iOS",3,"iOS: Bar Image is not showing properly in iPhone X","Issue: For iPhone X, bar image is not showing properly as like iPhone 8 and other. Always crop top portion.      Steps To Reproduce:  1. Create a new Alloy App.  2. Use the following test code and image then run it on iOS X and iOS 8 for checking the difference.    {code:title=index.xml}  <Alloy>   <TabGroup id=""tabGroup"">    <Tab id=""tab"" title=""My Tab"" icon=""myicon.png"">     <Window barImage = ""/images/relevent-dark-header.png"">           </Window>    </Tab>   </TabGroup>  </Alloy>    {code}    Thanks!"
"TIMOB-25809","Bug","iOS",0,"ES6: Logs do not work anymore","While migrating my [canteen app|https://github.com/hansemannn/studentenfutter-app] to ES6, I noticed that logs (e.g. {{Ti.API.warn}}) do not work anymore. The only logs appearing are:      To reproduce:  {code:js}   var win = Ti.UI.createWindow({     backgroundColor: '#fff'  });    var btn = Ti.UI.createButton({    title: 'Trigger'  });    btn.addEventListener('click', function() {    Ti.API.error('Hello?')  });    win.add(btn);  win.open();  {code}"
"TIMOB-25819","Bug","Android",8,"Android: ScrollView starts at the wrong location if it contains a ListView","When you have a ListView within a ScrollView on Android, sometimes the scroll view starts around the middle of the screen.    e.g.          However changing the ListView into a normal view seems to fix the issue.    In addition, there are times where the above window opens up fine. But most of the time it opens up incorrectly.    Note that this does not happen on iOS.    Tested on:   - Samsung S6 (real device) and    - Nexus 5 emulator (API 19)     with SDK: Titanium 7.0.2 GA    "
"TIMOB-25829","Bug","Hyperloop|iOS",5,"Hyperloop: iOS - CocoaPods 1.4.0 breaks metabase generation","There are [reports|https://github.com/appcelerator/hyperloop-examples/issues/75] that Hyperloop does not work with CocoaPods 1.4.0. We should investigate it and add support for the new version.     [CocoaPods 1.4.0 Change Log|http://blog.cocoapods.org/CocoaPods-1.4.0/]"
"TIMOB-25827","Bug","Windows",5,"Windows: Error thrown when building to emulator with forceUnInstall flag for first time","h5.Description    When building an app for wp-emulator with {{--forceUnInstall}} and the emulator is in a clean state (i.e. no app already installed), then the build will fail because it's trying to uninstall a non-existent app and then doesn't continue on with the install when the uninstall fails        h5.Steps to reproduce    1. Build an application for wp-emulator with the emulator closed (clean state)    h5.Actual    Build fails with above    h5.Expected    Build should not fail"
"TIMOB-25825","Bug","Android",3,"Android: JNIUtil error message on app launch","h5.Description    When an app launches I'm seeing the below error logged to the console, it doesn't look to cause any issues to the app but it might give people a scare when upgrading to 7.1.0. From what I can tell it occurs on any app        h5. Steps to reproduce    1. Create a default app using {{appc new}}/{{ti create}}  2. Build the app for Android    h5.Actual    On app launch the error/warning log above is shown    h5.Expected    No error/warning log"
"TIMOB-25835","Bug","Android",8,"Android: Animation with border radius doesn't works properly","Affects to 7.0.2, 7.1.RC    Animating a view with border radius doesn't works properly. On iOS it works fine.    Check attached demo to see code example.  "
"TIMOB-25832","Bug","Android",3,"Android: Setting Ti.UI.SearchBar ""hintText"" property after creation causes a crash as of 7.0.0","*Summary:*  Assigning a string to {{Ti.UI.SearchBar}} property ""hintText"" after it has been created will cause a crash on Android as of Titanium 7.0.0.    *Steps to reproduce:*  # Build and run the below code on Android.  # Notice the app crashes on startup.        *Recommended Fix:*  When Titanium's ""TiUIText.java"" class reads property {{PROPERTY_HINT_TYPE}} via {{TiConvert.toInt()}}, the code needs to set the default value to {{UIModule.HINT_TYPE_STATIC}} in the following places in the code.  [TiUIText.java#L350|https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUIText.java#L350]  [TiUIText.java#L924|https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUIText.java#L924]    *Work-Around 1:*  Set the ""hintText"" property when creating the {{SearchBar}}, but never afterwards.      *Work-Around 2:*  Set {{SearchBar}} property ""hintType"" to {{Ti.UI.HINT_TYPE_STATIC}}. This is an undocumented feature of {{SearchBar}} but it supports on Android since it internally uses {{Ti.UI.TextField}} within the {{SearchBar}}.    "
"TIMOB-25831","Bug","Windows",3,"Windows Hyperloop: Style CalendarDatePicker Height not working","We are using a Windows.UI.Xaml.Controls.CalendarDatePicker (https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Xaml.Controls.CalendarDatePicker) and we are trying to add some styling.   We are able to set the width doing something like this:     BUT when we try to set the height like this, it's not working:     Any idea?"
"TIMOB-25844","Improvement","Android",5,"Android: Update splash screen and icon","- Update Androids splash screen and icon to match the newer assets on iOS"
"TIMOB-25843","Bug","Android",3,"Android: 7.1.0.RC - Setting data in Ti.UI.TableView does not work as before","*This is a regression from 7.0.2 to 7.1.0*    I have tried 7.1.0.RC    It used to work properly in the past ...  {code:js}  tableData[2] = tableViewSection3;  tableView.data = tableData;      {code:js}  function createTableViewRow(e) {      var rowView = Titanium.UI.createTableViewRow({    height: 120   });      rowView.add(Titanium.UI.createLabel({    text:'Text',   }));      return rowView;  }    var win = Ti.UI.createWindow();    var tableData = [];    var tableView = Titanium.UI.createTableView({   separatorStyle:Ti.UI.TABLE_VIEW_SEPARATOR_STYLE_NONE  });     var tableViewSection1 = Ti.UI.createTableViewSection();  var tableViewSection2 = Ti.UI.createTableViewSection();  var tableViewSection3 = Ti.UI.createTableViewSection();    tableData.push(tableViewSection1);  tableData.push(tableViewSection2);  tableData.push(tableViewSection3);     tableView.data = tableData;     win.add(tableView);    var setData = function(e) {     tableViewSection3.add(createTableViewRow());   tableViewSection3.add(createTableViewRow());   tableViewSection3.add(createTableViewRow());      //tableView.updateSection(2, tableViewSection3);   tableData[2] = tableViewSection3;   tableView.data = tableData;      };    win.addEventListener('open', function(e) {   setData();  });    win.open();  {code}  "
"TIMOB-25842","Bug","iOS",5,"iOS: Cannot remove Ti.App.iOS.handleurl event-listener","In my app Titanium.App.iOS.addEventListener(""handleurl"", iosHandleUrl) can successfully register an event listener for the handle url event. Titanium.App.iOS.addEventListener(""handleurl"", iosHandleUrl) fails to remove the event listener resulting in the iosHandleUrl function being called multiple times in my app, when redirected back to the app from the browser.    To reproduce this I've create a sample project with the following code in index.js        And added the following to the plist in tiapp.xml.    When I launch the app then open a browser and open handleurltest:// the expected behaviour is that ""redirected to app from URL"" should be logged once but the actual behaviour is that it's logged three times.    The app was built against version 6.3.0.GA of the SDK."
"TIMOB-25839","Bug","Android|iOS",8,"TiAPI: Touch event coordinate units do not match between platforms","*Summary:*  The (x,y) units provided by View event's ""touchstart"", ""touchmove"", ""touchend"", and ""touchcancel"" do not match between Android and iOS. Both platforms ignore the ""ti.ui.defaultunit"" property setting in ""tiapp.xml"".    On Android, the touch coordinates are always in ""px"" (ie: pixels).  On iOS, the touch coordinates are always in ""dip"" (aka: ""dp"").    *Steps to Reproduce:*  # Build and run the below code on Android.  # Drag your finger in the gray view.  # Notice that the blue square does *not* correctly following your finger.  # Build and run on iOS.  # Drag your finger in the gray view.  # Notice that the blue square *correctly* follows your finger.  # Change ""tiapp.xml"" property ""ti.ui.defaultunit"" to ""px"".  # Build and run on iOS.  # Drag your finger in the gray view.  # Notice that the blue square does *not* correctly following your finger.  # Build and run on Android.  # Drag your finger in the gray view.  # Notice that the blue square *correctly* follows your finger.        *Work-Around:*  The following will work-around this issue on both Android and iOS...        *Ideal Solution:*  Convert native touch coordinates to use ""ti.ui.defaultunit"" on both Android and iOS. This way views can easily be dragged since their ""x"", ""y"", and ""center"" properties already respect the ""ti.ui.defaultunit"" property.  Note that this would be a breaking change.  "
"TIMOB-25847","New Feature","iOS",5,"iOS: Accessibility support for Dynamic Type","h5. Feature Request:  Trying to use the accessibility options in iOS: Specifically the option to use larger text (Dynamic Type) but the changes are not applied to the app.    Setting the font size to use ""sp"" as unit identifier for the font size which works on Android but not in iOS.   font: {   fontSize: '16sp'   }     In the fontSize documentation it says: ""iOS ignores any unit specifier after the size value.""     when changing font size in accessibility options the alert dialogs have the font size change but nothing else.    Can we implement Dynamic Type support so that font size is also changed within the app? "
"TIMOB-25850","Bug","iOS",0,"iOS: SearchBar doesn't show Bookmark button when set on creation in TableView","When showBookmark is set to true on creation of the searchbar and it is in a TableView, the bookmark button does not show.    *Steps to reproduce issue*  1. Create a new project with the below code  2. Run the project    *Expected Results*  The searchbar has the bookmark button shown    *Actual Results*  The searchbar does not have the bookmark button shown    *Notes*  The bookmark button can be toggled to show it, but the toggle has to be tapped twice, since it thinks it is being shown.  Also, if you just create a searchbar with showBookmark = true, then the button will show. Having the searchbar in the tableview does not show the bookmark button.    *Code*  Classic:  {code:js}  var win = Ti.UI.createWindow();    var searchBar = Titanium.UI.createSearchBar({      showBookmark: true  });    var table = Ti.UI.createTableView({      data: [{          title: ""Toggle Bookmark button""      }],      search: searchBar  });    table.addEventListener('click', function(e){   searchBar.showBookmark = !searchBar.showBookmark;  });    win.add(table);  win.open();  {code}    Alloy:  index.xml  {code:xml}  <Alloy>    <Window>      <TableView>        <SearchBar id=""search"" showBookmark=""true""/>        <TableViewRow onClick=""toggle"" title=""Toggle bookmark button""/>      </TableView>    </Window>  </Alloy>  {code}    index.js:  {code:js}  function toggle() {   $.search.showBookmark = !$.search.showBookmark;  }    $.index.open();  {code}"
"TIMOB-25856","Story","Android|iOS",2,"TiAPI: Explain ""run-on-main-thread"" usage in tiapp.xml","Does somebody explain <property name=""run-on-main-thread"" type=""bool"">true</property> real mean ?    That defult value is true but if I change value to false my app (especially android) working faster and not freeze.    My Project is Alloy Mobile App and shoul I use true? If I use false what problems can arise?"
"TIMOB-25855","New Feature","Android",3,"Android: Add TextArea lines and maxLines support","Add the possibility to set the properties {{lines}} and {{maxLines}} at a TextField.  * https://developer.android.com/reference/android/widget/TextView.html#attr_android:lines  * https://developer.android.com/reference/android/widget/TextView.html#attr_android:maxLines    The TextField will start with the {{lines}} amount of lines and will be extended to {{maxLines}} when pressing the Return key.    "
"TIMOB-25860","Improvement","Android",8,"Update Android Support libraries to 27.1.1","- Update Android Support libraries to version {{27.1.1}} https://developer.android.com/topic/libraries/support-library/revisions.html#27-1-1"
"TIMOB-25859","Improvement","Android",3,"Android: Delay WebView Ti.App.fireEvent() to be fired after page load","*Summary:*  The JavaScript within a WebView's HTML can call {{Ti.App.fireEvent()}} to communicate with the Titanium JavaScript side. It currently fires events immediately. The problem with this is if the listener immediately calls {{WebView.evalJS()}} to communicate back, it'll always timeout on Android if the web page hasn't finished loading yet and the Titanium runtime runs on the main UI thread (the default). This makes it less convenient to use.    *Steps to Reproduce:*  # Build and run attached [^WebViewInteropTest.js] on Android.  # Observe the Android log.    *Result:*  An {{Timeout waiting to evaluate JS}} warning message appears in the log.    *Expected Result:*  The {{evalJS()}} calls should succeed. A countdown message ""Reload in: X"" should appear in the web page, starting from 5. When it counts down to zero, the page should reload.    *Cause:*  The {{WebView.evalJS()}} call will not work until the ""load"" event has been received from the WebView. This is because Titanium injects a ""polling"" script into the web page in the {{WebViewClient.onPageFinished()}} call...  https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/webview/TiWebViewClient.java#L45    This polling script is responsible for fetching/evaluating the script added to the stack by the {{evalJS()}} call...  https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/webview/TiWebViewBinding.java#L151    Since {{evalJS()}} is getting called before the web page has finished loading, the {{evalJS()}} call will always fail with a timeout warning when the Titanium runtime runs on the main UI thread.    *Recommended Solution:*  Queue all {{Ti.App.fireEvent()}} calls made within the HTML and do not fire them until the page has finished loading.    *Work-Around:*  Use the new async version of {{WebView.evalJS()}} that was introduced into 7.5.0. It does not have this issue.  "
"TIMOB-25858","Story","iOS",3,"iOS: Question on how to use ""trackSignificantLocationChange"" with background location update","Hello,     On iOS, when using Ti.Geolocation.trackSignificantLocationChange and dealing with background updates with args.launchOptionsLocationKey we are seeing an issue where after a background update has come in while the app was closed and the next launch of the app hangs on the splash screen. The app must be manually closed in order to get farther than the splash screen.     *Example Code:*  Example app attached.     *To reproduce:*   1. Install app on physical device and choose ""Always"" allow location permission.   2. Force close app with the test switcher   3. Move device until you get a background location update   4. Launch the app and observe the app hang on the launch screen"
"TIMOB-25864","Improvement","Android",1,"Android: Notifications should use default channel on Android 8 if not assigned","*Summary:*  If an Android app targets API Level 26 or higher, notifications will fail to be posted to the status bar on Android 8.0 or higher unless they're assigned a notification channel as documented here...  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Android.NotificationChannel    We should modify notifications to auto-assign them the default notification channel if a channel was not already assigned by the developer. This way, when we modify Titanium to auto-target API Level 26 in the future (see ticket: [TIMOB-25852]), notifications will still work. Avoids a breaking change.    Note that if the app targets API Level 25 or lower, Android 8 will auto-assign the notification the default channel for us.    *Test:*  # Set up ""tiapp.xml"" to target API Level 26 as shown below.  # Build and run the below code on an Android 8 device.  # Tap on the ""Send Notification"" button.  # Verify that the notification was posted to the status bar.    {code:xml}  <ti:app>      <android xmlns:android=""http://schemas.android.com/apk/res/android"">          <manifest>        <uses-sdk android:minSdkVersion=""16"" android:targetSdkVersion=""26""/>          </manifest>      </android>  </ti:app>  {code}    {code:javascript}  var notificationId = 0;  var window = Ti.UI.createWindow();  var button = Ti.UI.createButton({ title: ""Send Notification"" });  button.addEventListener(""click"", function(e) {   var notification = Ti.Android.createNotification(   {    contentTitle: ""Content Title"",    contentText: ""Content Text"",    contentIntent: Ti.Android.createPendingIntent(    {     intent: Ti.Android.createIntent({}),    }),   });   notificationId++;   Ti.Android.NotificationManager.notify(notificationId, notification);  });  window.add(button);  window.open();  {code}    *Recommended Solution:*  This should be implemented similar to the following ""aps_sdk"" library's PR here...  https://github.com/appcelerator/aps_sdk/pull/307    *Note:*  This is not an issue with our ""ti.cloudpush"" module. It already assigns a default channel to the received push notification.  "
"TIMOB-25861","New Feature","LiveView",3,"Liveview: Support transpiling user code ","h5.Description     We added babel transpilation in SDK 7.1.0 (TIMOB-24610), as liveview passes the code to the app we need to introduce a transpilation step there to ensure that the code works as expected. We can pull in node-titanium-sdk to implement this as the information we need to pass down to babel should be available in off the builder property"
"TIMOB-25868","New Feature","Windows",3,"Windows: Implement WebView.onlink callback","h5. description  Costumer is attempting to load a pdf for android using intents with webview.   in the mobile app they are using webview control for displaying the remote web site by binding a URL. The web pages in the web site contains few pdf links. On click of normal hyperlinks, respective web page is being shown in the web view. Whereas, on tapping a pdf links, a blank window is getting opened in Android devices. In iOS it’s working fine and a PDF is showing.    Per Jira WebView cannot disply PDF documents on Android. So they are using intents as a workaround to open the PDF link. The issue is that on click of the pdf link in the web view, they are unable to get the exact PDF url with any of Titanium WebView API methods or events    The customer was able to do it natively and open the PDF's with intents.     h5. Request  The customer wants to know how to get the exact PDF link using the webview API or if there is a workaround they could use.    h5. additional information   attached are two apps. One is a titanium app and one is an android native application.  [titanium app|https://axwaysoftware-my.sharepoint.com/personal/vvazquezmontero_axway_com/_layouts/15/guestaccess.aspx?guestaccesstoken=rsxSxfm51VH5t8MRm7YpDX1bHDfJfDfaycmtpKrlAEE%3d&docid=2_11a957eab95234b6ab84003e12f7b0b41&rev=1]"
"TIMOB-25865","Improvement","Android",3,"Android: Build warning appears when Android build-tools v27 or higher is installed","*Summary:*  In the Android SDK, if you install build-tools version 27.0.0 or higher and then do an Android build via Titanium, then the following warning message will be logged...        Android build-tools 27.x.x so far appears to work fine with Titanium builds. So, this warning is harmless for now. But in the future, Google could make breaking changes to their build-tools and we need to protect against this to help future proof our build system.    *Test:*  # Open Google's ""Android SDK Manager"".  # Make sure the newest 26.x.x build-tools version is installed.  # Make sure the newest 27.x.x build-tools version is installed.  # Do a Titanium Android build.  # Observe the log for the above mentioned warning.    *Cause:*  Titanium currently only supports build-tools version 26.x.x as defined by our ""package.json"" here...  https://github.com/appcelerator/titanium_mobile/blob/master/android/package.json#L25    But the CLI ignores this setting and always uses the newest build-tools version available in the Android SDK instead of using the preferred version defined by our ""package.json"". This is because the linked code below will return a {{""maybe""}} string instead of {{true}} for a version higher than supported version, but it still evaluates as a positive in the {{if}} condition...  https://github.com/appcelerator/node-titanium-sdk/blob/master/lib/android.js#L768    *Recommended Solution:*  CLI should be changed to favor the build-tools version defined in the ""package.json"". A newer version outside of this range should only be selected if no preferred version is installed, in which case, the build-tools warning is desired.    We should not make this change until after updating Titanium's ""package.json"" to support build-tools 27.x.x. This is to avoid a possible breaking change with developers who only have 27.x.x installed. _(Shouldn't cause an issue, but better safe than sorry.)_  "
"TIMOB-25874","Bug","iOS",8,"iOS 11.2: Ti.UI.RefreshControl with Ti.UI.Window.largeTitleEnabled hides spinner","Hi,  I have created a simple navigationWindow in Alloy.  The Window has {{largeTitleEnabled: true}}, inside the window I have a simple listView with a refreshControl.  When I run a Pull to Refresh the spinner is hidden by large-title.  "
"TIMOB-25871","Improvement","iOS",0,"iOS: Add ability to hide back button on NavigationWindow","Natively it is possible to hide the backButton programatically using the hidesBackButton attribute. This is discussed in this StackOverflow question: https://stackoverflow.com/questions/614212/how-to-hide-back-button-on-navigation-bar-on-iphone    We should consider using this property when the user wants to hide the button. "
"TIMOB-25876","Bug","Windows",3,"Windows: Support '@' character in node_modules","- Including {{@babel}} with Titanium Windows projects will cause compilation errors due to the unsupported {{@}} character"
"TIMOB-25875","Bug","Android",13,"Android: Babel rewrites app.js in classic project to generated ES5 code","I noticed that Babel rewrites ES6 code in the app.js of classic projects to ES5 code (by using the generated code). It was noticed while moving [ti.mapbox to ES6|https://github.com/hyperloop-modules/ti.mapbox/pull/2]."
"TIMOB-25873","Bug","Android",2,"Android: Intent - getData(), getAction() always equal to null ","*Issue:*  When I use the deep link for my project and try to access the Ti.Android.currentActivity.getIntent().getData() it always returns null for Ti SDK 6.2.0 and above but If I downgrade the SDK to 6.1.2 then it works fine. It cannot read data from incoming intents.      *Steps to Reproduce*  1. Create a new alloy App and use the following test code  2. Install the app on any android device.   2. Goto the browser and browse to https://uktvplay.uktv.co.uk site.   3. Click on any episodes   4. It will open up the app but getData() is always null but it should return a URL    *Test code:*  - https://gist.github.com/MotiurRahman/ca8cd6c8b2745c870836602dfb6875fe    *Expected Result:* It should return the URL when the App is opened from the deep link.    Thanks!"
"TIMOB-25878","Improvement","Android",2,"Android: Modify ""Ti.Platform.architecture"" to provide consistent results like iOS","*Summary:*  Currently, the {{Ti.Platform.architecture}} property on Android is difficult to use compared to iOS and Windows. It commonly fails to identify the device's architecture by returning ""Unknown"" or returns a difficult to parse string containing version and revision numbers appended to it.    Below is a list of all architecture strings that has been reported to our analytics system:  {code}  'Unknown'  'ARMv7 Processor rev 0 (v7l)'  'ARMv7 Processor rev 4 (v7l)'  'AArch64 Processor rev 4 (aarch64)'  'ARMv7 Processor rev 3 (v7l)'  'AArch64 Processor rev 1 (aarch64)'  'ARMv7 Processor rev 5 (v7l)'  'AArch64 Processor rev 2 (aarch64)'  'AArch64 Processor rev 3 (aarch64)'  'AArch64 Processor rev 0 (aarch64)'  'ARMv7 Processor rev 1 (v7l)'  'ARMv7 Processor rev 2 (v7l)'  'ARMv8 Processor rev 2 (v8l)'  'ARMv7 Processor rev 8 (v7l)'  'ARMv7 Processor rev 10 (v7l)'  'ARMv7 Processor rev 9 (v7l)'  'ARMv7 processor rev 4 (v7l)'  '64-bit ARMv8 Processor rev 0 (v7l)'  'AArch64 Processor rev 13 (aarch64)'  'ARMv7 processor rev 1 (v7l)'  'sc7731 rev 5 (v7l)'  '64-bit ARMv8 Processor rev 1 (v7l)'  'NVIDIA Denver 1.0 rev 0 (aarch64)'  'MT6732 rev 2 (v7l)'  'AArch64 Processor rev 12 (aarch64)'  'ARMv6-compatible processor rev 5 (v6l)'  '6591 rev 4 (v7l)processor'  'ARMv7'  'mtk6580L rev 5 (v7l)'  'ARMv8 Processor rev 4 (aarch64)'  'Qualcomm Snapdragon 800'  'UNIVERSAL5410'  'ARMv7 Processor rev 12 (v7l)'  'MT6592 2.0GHZ (Octa-Core) rev 5 (v7l)'  'ARMv7 Processor rev 3 srev 0x23 (v7l)'  'MTK6580 rev 5 (v7l)'  'ARMv7 Processor rev 2 srev 0x23 (v7l)'  'ARMv7 Processor rev 6 (v7l)'  'S805'  'ARMv8 processor rev 1 (aarch64)'  'UNKNOWN rev 0 (UNKNOWN)'  'ARMv7 Processor'  'Quad-Core ARMv7 Processor'  'ARMv8 Processor rev 5 (v7l)'  'S905'  'ARMv7 Processor rev 5 rev 5 (v7l)'  'ARMv7 processor (v7l)'  'Quadcore Cortex-A71.2GHz rev 5 (v7l)'  'arm'  'MT6592 2.0GHZ rev 5 (v7l)'  {code}    I've tested the following devices and they return the following:  ||Device Name||Returned Architecture String||  |Emulator|Unknown|  |Pixel XL|Unknown|  |Galaxy Tab 3|Unknown|  |Galaxy Nexus|ARMv7 Processor rev 10 (v7l)|  |Galaxy Note 2|ARMv7 Processor rev 0 (v7l)|  |Nexus 4|ARMv7 Processor rev 2 (v7l)|  |Nexus 5|ARMv7 Processor rev 0 (v7l)|  |Nexus 10|ARMv7 Processor rev 4 (v7l)|  |Pixel 2|AArch64 Processor rev 1 (aarch64)|  |Amazon Fire HD 8 (7th gen)|AArch64 Processor rev 3 (aarch64)|    Note that ""Unknown"" is the most commonly reported architecture name in our analytics system. Odds are most of these are coming from Google's Android emulator.    *Cause:*  The {{Ti.Platform.architecture}} property uses our APS library to fetch the architecture name, which attempts to fetch this string from a system file named ""cpuinfo"". This is an undocumented feature that we should avoid. Especially since it's proven to be unreliable and causes ""Unknown"" to be returned.  [APSAnalyticsHelper.java#L339|https://github.com/appcelerator/aps_sdk/blob/195633dd10a37d96ecf52be35c0c712dff5ef331/android/analytics/APSAnalytics/src/main/java/com/appcelerator/aps/APSAnalyticsHelper.java#L339]    *Recommended Solution:*  The APS library's {{getArchitecture()}} method should be changed to fetch architecture via Google's {{android.os.Build}} class using its {{Build.SUPPORTED_ABIS}} and {{Build.CPU_ABI}} constants.  https://developer.android.com/reference/android/os/Build.html    I've tested the above constants on real Android devices and in the emulator. The above always return strings matching the APK's lib folder architecture subfolder names, where the {{*.so}} C/C++ libraries are kept. With the only exception being with the ""x86_64"" being returned by the emulator. For example:  * armeabi-v7a  * arm64-v8a  * x86  * x86_64    *Ideal Solution:*  Android should ideally return the same architecture string types that iOS does. This would make it easier to work with from a portability standpoint. It would also make it easier from an analytics standpoint to identify popular architectures between platforms.    iOS fetches CPU architecture from the APS library here...  [APSUtility.m#L24|https://github.com/appcelerator/aps_sdk/blob/195633dd10a37d96ecf52be35c0c712dff5ef331/ios/support/analytics/APSAnalytics/APSUtility.m#L24]    iOS currently returns the following hardcoded strings:  * x86_64  * arm  * armv6  * armv7  * armv7s  * arm64  * i386    *Work-Around:*  You can use hyperloop to fetch the architecture using the above mentioned Java ""Build"" class constants.  {code:javascript}  // WARNING: You must add ""hyperloop"" module to the project for the below to work.  var buildClass = require(""android.os.Build"");  if (Ti.Platform.Android.API_LEVEL >= 21) {   Ti.API.info(""@@@ Build.SUPPORTED_ABIS[0]: "" + buildClass.SUPPORTED_ABIS[0]);  } else {   Ti.API.info(""@@@ Build.CPU_ABI: "" + buildClass.CPU_ABI);  }  {code}  "
"TIMOB-25877","Bug","Android",2,"Android: ""Ti.Platform.ostype"" wrongly returns ""32bit"" on a 64-bit OS","*Summary:*  The {{Ti.Platform.ostype}} property is currently hardcoded to return ""32bit"" on Android.  [APSAnalyticcsHelper.java#L235|https://github.com/appcelerator/aps_sdk/blob/195633dd10a37d96ecf52be35c0c712dff5ef331/android/analytics/APSAnalytics/src/main/java/com/appcelerator/aps/APSAnalyticsHelper.java#L235]    Now that Titanium supports building Android apps for ARM64, it should return ""64bit"" when running on a 64-bit Android device like how it works for iOS here...  [APSUtility.m#L15|https://github.com/appcelerator/aps_sdk/blob/195633dd10a37d96ecf52be35c0c712dff5ef331/ios/support/analytics/APSAnalytics/APSUtility.m#L15]    *Steps to Reproduce:*  # Build an run the below code on a 64-bit Android device, such as a Pixel XL phone.  # Observe the log for an ""ostype:"" entry.        *Note:*  We had to do something similar for iOS as can be seen here: [TIMOB-18193]    *Recommended Solution:*  Check if array returned by {{android.os.Build.SUPPORTED_64_BIT_ABIS}} contains at least 1 element.  https://developer.android.com/reference/android/os/Build.html#SUPPORTED_64_BIT_ABIS    Note that Google added 64-bit support as of Android 5.0 (aka: API Level 21). So, you can't use Google's {{Process.is64Bit()}} method since it is only supported on Android 6.0 and higher.  https://developer.android.com/reference/android/os/Process.html#is64Bit()  "
"TIMOB-25880","Improvement","Hyperloop|iOS",5,"Hyperloop: Logs should show the actual native class, not ""HyperloopClass"", debug logs should be hidden","A few things:  - We should use proper class description for native classes. This is mainly for the developer experience, because all classes are logged as ""HyperloopClass"" right now, instead of printing the actual class behind the wrapper. This PR will replace {{<HyperloopClass: 0x608000072c80>}} with {{<NSMutableArray: 0x608000072c80>}}  - Internal logs should be removed from public log level, e.g. {{\[HYPERLOOP\] didStartNewContext <KrollContext: 0x608000074140>}}. They do not have any value for a Titanium developer"
"TIMOB-25879","Improvement","iOS",0,"iOS: Create modules in ""dist"" directory (Parity with Android)","This is all about parity and developer experience: Currently, iOS modules are created in the module root. Android uses the ""dist"" directory, which is better for separating it from the actual source code and module configuration."
"TIMOB-25887","Bug","Android",3,"Android: Ti.Geolocation - Exception when calling Ti.Geolocation.hasLocationPermissions()","h5. Issue  Customer's app has an android service to get location data in the background. It is encountering an exception when it calls Ti.Geolocation.hasLocationPermissions():     They are receiving the following error:  {quote}03-19 08:43:48.855 2764 2764 E TiApplication: (main) [6,1875] No valid root or current activity found for application instance   03-19 08:43:48.855 2764 2764 E KrollProxy: (main) [0,1875] Error creating proxy   03-19 08:43:48.855 2764 2764 E KrollProxy: java.lang.NullPointerException: Attempt to invoke virtual method 'android.content.pm.PackageManager android.content.Context.getPackageManager()' on a null object reference   03-19 08:43:48.855 2764 2764 E KrollProxy: at com.google.android.gms.common.zzo.isGooglePlayServicesAvailable(Unknown Source:4)   03-19 08:43:48.855 2764 2764 E KrollProxy: at com.google.android.gms.common.zze.isGooglePlayServicesAvailable(Unknown Source:0)   03-19 08:43:48.855 2764 2764 E KrollProxy: at com.google.android.gms.common.GoogleApiAvailability.isGooglePlayServicesAvailable(Unknown Source:0)   03-19 08:43:48.855 2764 2764 E KrollProxy: at ti.modules.titanium.geolocation.android.FusedLocationProvider$PlayServices.available(FusedLocationProvider.java:184)   03-19 08:43:48.855 2764 2764 E KrollProxy: at ti.modules.titanium.geolocation.android.FusedLocationProvider.hasPlayServices(FusedLocationProvider.java:80)   03-19 08:43:48.855 2764 2764 E KrollProxy: at ti.modules.titanium.geolocation.android.FusedLocationProvider.<init>(FusedLocationProvider.java:61)   03-19 08:43:48.855 2764 2764 E KrollProxy: at ti.modules.titanium.geolocation.GeolocationModule.<init>(GeolocationModule.java:219)   03-19 08:43:48.855 2764 2764 E KrollProxy: at java.lang.Class.newInstance(Native Method)   03-19 08:43:48.855 2764 2764 E KrollProxy: at org.appcelerator.kroll.KrollProxy.createProxy(KrollProxy.java:137)   03-19 08:43:48.855 2764 2764 E KrollProxy: at org.appcelerator.kroll.runtime.v8.V8Runtime.nativeRunModule(Native Method)   03-19 08:43:48.855 2764 2764 E KrollProxy: at org.appcelerator.kroll.runtime.v8.V8Runtime.doRunModule(V8Runtime.java:187)   03-19 08:43:48.855 2764 2764 E KrollProxy: at org.appcelerator.kroll.KrollRuntime.handleMessage(KrollRuntime.java:325)   03-19 08:43:48.855 2764 2764 E KrollProxy: at android.os.Handler.dispatchMessage(Handler.java:102)   03-19 08:43:48.855 2764 2764 E KrollProxy: at android.os.Looper.loop(Looper.java:164)   03-19 08:43:48.855 2764 2764 E KrollProxy: at android.app.ActivityThread.main(ActivityThread.java:6494)   03-19 08:43:48.855 2764 2764 E KrollProxy: at java.lang.reflect.Method.invoke(Native Method)   03-19 08:43:48.855 2764 2764 E KrollProxy: at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)   03-19 08:43:48.855 2764 2764 E KrollProxy: at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)   03-19 08:43:48.855 2764 2764 E JavaObject: !!! OH NO! We tried to grab a Java Object back out of the reference table, but it must have been GC'd, because it's null! Key: 15   03-19 08:43:48.855 2764 2764 I TiAPI : We do not have location permissions. Exiting. {quote}    The exception does not seem to make the service crash, but it doesn't think that it has location permissions (which it definitely does). So they are not getting any location data.     h5. Code to create Android service:       h5. Service Code:   Uses a module to do all the location detection and updating with the back-end service provider.      h5. Additional information   - issue not in SDK 7.0.2   - the WxAlertSubscriptionUpdater module is shared by the app and the service; the app doesn't have this problem when it talks to the Geolocation module   - They have been unable to replicate this problem with a minimal test app; it's possible that a test app is too small to make garbage collection happen? "
"TIMOB-25886","Improvement","Android",5,"Android: Improve Ti.App._restart() performance","Currently, we use an Intent to re-launch our Titanium application when {{Ti.App._restart()}} is invoked. This isn't the best solution as it results in re-launching the application.    Instead, we can terminate all existing acivities and restart the KrollRuntime to reset the Javascript context to a clean state."
"TIMOB-25882","Bug","Android",8,"Android: return event is received twice from Symbol TC55/TC70 scanner","Using the scanner of Symbol TC55/TC70 to send return event results in receiving it twice."
"TIMOB-25881","New Feature","Windows",5,"Windows: Implement WebView.blacklistedURLs","{{WebView.blacklistedURLs}} property is missing as well as {{blacklisturl}} event. "
"TIMOB-25889","Improvement","Android",5,"Android: Emulator builds should not add additional permissions","*Summary:*  When building with deployment type ""development"" (ie: for the Android emulator), the Titanium build system adds the following permissions to the ""AndroidManifest.xml"" file, even if they're not defined in the ""tiapp.xml"" file.  * {{android.permission.ACCESS_COARSE_LOCATION}}  * {{android.permission.ACCESS_FINE_LOCATION}}  * {{android.permission.ACCESS_MOCK_LOCATION}}    The above behavior was intentional and was intended for fast incremental builds with LiveView and the emulator. However, this behavior has been known to cause confusion.    *To-Do:*  In Titanium 9.0.0, we should remove the above behavior. The build system should produce a consistent ""AndroidManifest.xml"" for all deployment types (ie: ""test"", ""development"", and ""production"").    *Note:*  Titanium should still include its default permissions listed below.  * {{android.permission.INTERNET}}  * {{android.permission.ACCESS_WIFI_STATE}}  * {{android.permission.ACCESS_NETWORK_STATE}}  * {{android.permission.WRITE_EXTERNAL_STORAGE}}    If you don't want the above default permissions injected, then you can set the following in your ""tiapp.xml"" file to override this behavior.    "
"TIMOB-25893","Story","Specification",5,"Create Github Issue template","We decided to reopen the ""Issues"" tab as part of opening more to the community. While it is still in an experimental phase and we need to see if developer actually use it properly (mainly no SPAM, no duplicates), we also need to add a template like we do for pull requests to force a certain structure. [Here|https://github.com/stevemao/github-issue-templates] are a few cool ones for inspiration"
"TIMOB-25891","Story","Windows",13,"Windows: Use of deprecated methods in Ti.Media","{{Ti.Media}} uses some deprecated methods that causes compile time warning {{C4973}}.    "
"TIMOB-25890","New Feature","Windows",8,"Windows: Support Hyperloop ES6","ES6 {{import}} doesn't work for Hyperloop Windows because Hyperloop scans {{require}} and generates glue code _before transpile ({{import}} to {{require}}) runs_ at compile time.    "
"TIMOB-25896","New Feature","Android",5,"Android: Add Kotlin language support for modules","*Summary:*  Titanium currently cannot build modules containing {{*.kt}} kotlin language files. We would like to add support for this language in the future.    *Note:*  This can easily be implemented once Titanium supports building with gradle.  https://developer.android.com/kotlin/add-kotlin  "
"TIMOB-25895","Improvement","Windows",8,"Windows: Rename HAL","Apparently Microsoft starts rejecting our {{HAL.DLL}} in WACK (Windows Apps Certification Kit) just because Windows system has {{HAL.DLL}} in system library. We need to rename it in order to pass the cert.      "
"TIMOB-25897","Bug","iOS",2,"iOS: Ti.UI.iOS.Stepper handles ""value"" boundaries incorrect ","We handle allowed values for our Stepper UI element with:  {code:objc}    if (newValue < [[self stepper] maximumValue] && newValue > [[self stepper] minimumValue]) {      [[self stepper] setValue:newValue];    } else {      NSNumber *currentValue = [NSNumber numberWithDouble:[[self stepper] value]];      [self.proxy replaceValue:currentValue forKey:@""value"" notification:NO];      NSLog(@""[WARN] The value passed in must be smaller than the maximum and bigger than the minimum stepper values"");    }  {code}  Which is wrong. It should be newValue <= maximum && newValue >= minimum."
"TIMOB-25905","Bug","Hyperloop",0,"Hyperloop: lib file failed to leave a valid exports object","With the following files: https://gist.github.com/Topener/3a446122e6807732320aed7268395b43    I get the error         Error doesn't occur when using Hyperloop 3.0.3 with TiSDK 7.2.0"
"TIMOB-25911","Bug","Android",0,"Android : Return event of TextField with Ti.UI.RETURNKEY_SEARCH returnKeyType  is not working 7.1.0.GA ","Hi,  We are having issues with return event of TextField in SDK 7.1.0.GA in Android. If the returnKeyType of the TextField is ""Ti.UI.RETURNKEY_SEARCH"", return even is not being triggered. Whereas if the returnKeyType is removed, it is working as expected.  This was working in SDK 6.2.2.GA but not in 7.1.0.GA.    Steps to reproduce:  1. Run the attached project - TestTextField in Android.  2. Click on the TextField in the screen and keyboard will appear.  3. Tap on the search button in the keyboard. Log message in its 'return' event will not be printed in console.  4. Repeat the above steps after removing ""returnType"" of the TextField. Log message('return clicked') will be printed in console    PFA the environment details - tiInfo.rtf  Please let us know if any additional information is required.    Thanks,"
"TIMOB-25910","Bug","Android",5,"Android: Memory leak when using TextFields in TableView rows","h6.Reproduce steps  1. Run the attached simple Alloy app. (Just an Alloy project that opens a modal window which has a TableView with rows containing Textfields. )  2. Click the ""Open Window""   3. Hit the Android ""back"" button to dismiss the window with the tableview textfield rows   4. Repeat steps 2 & 3 repeatedly until you start seeing messages such as the following:     Attached screenshot for that as well."
"TIMOB-25908","New Feature","Windows",13,"Windows: require/import with namespace for Hyperloop","{{require(package_name).class_name}} doesn't work for Hyperloop Windows.        This doesn't work because Hyperloop Windows {{require}} needs _fully qualified class name or enum_ and require against package name is not implemented.  "
"TIMOB-25914","Bug","Windows",1,"Windows: ReferenceError: __ is not defined when building a module where the apiversion does not match","h5.Description    When there is an apiversion mismatch between the SDK and a module then the CLI will error with the below        h5.Steps to reproduce    1. Create a windows module or download an existing one like ti.paint  2. Change the apiversion in the manifest file  3. Build the module using {{ti build -p windows --build-only}}    h5.Actual    Build errors with the above    h5.Expected    Build should not error"
"TIMOB-25913","Bug","Android",5,"Android: Build fails for android with java.time.DateTimeException with java 9.0.4 & crittercism","h5.Steps to reproduce:  1. Build an android app with SDK having fix for java 9 support.    h5.Actual results:  1. The build will fail with error:      h5.Expected result:  1. The build should be successful.  "
"TIMOB-25920","Bug","Android",2,"Android: Build fails if SDK with JDK 9/10 fix is not selected in CLI & tiapp.xml (only if ran from CLI)","I am not sure if this is an issue or its just to be like this due to the architecture of CLI & SDK.  What I am seeing is if I do not have an SDK with the new JDK 9/10 detection fix in both the CLI & tiapp.xml the build fails.     h5.Steps to reproduce:  *A. SDK with jdk 9/10 fix selected in the CLI & 7.1.0.GA in tiapp.xml:*  1. Make sure you have CLI core 7.0.3-master.24 installed which has the jdk  9/10 fix.  2. Create an app with SDK 7.1.0.GA (this will have sdk 7.1.0.GA in the tiapp.xml).  3. Make sure you have the SDK with the jdk 9/10 selected in the CLI.  4. Build for android.  5. Build fails with:      *B. 7.1.0.GA in selected in CLI & SDK with jdk 9/10 fix in the tiapp.xml:*  1. Make sure you have CLI core 7.0.3-master.24 installed which has the jdk  9/10 fix.  2. Select 7.1.0.GA in CLI & have sdk with jdk9/10 fix in tiapp.xml.  3. Build for android.  4. Build fails with:      Expected result:  For A : Probably fail  For B : Probably should not fail with JDK not found error."
"TIMOB-25919","Bug","Android",2,"Android: OptionDialog not firing ""click"" event for cancel button like iOS","h5. Issue:   Customer is having and issue with the ClickEvent of a Ti.UI.OptionDialog in Android. If 'cancel' property is set to an index, clicking that cancel option or clicking outside the dialog doesn't fire the dialog's 'click' event. This is the behavior in SDK 7.1.0.GA whereas it is working fine in SDK 6.2.2.GA.     h5: App:   [^TestInputDialog.zip]     h5. Steps to reproduce:   1. Run the attached project - TestInputDialog in Android.   2. Click on 'Hello World' text. OptionDialog will be displayed.   3. Click on 'Cancel' option in the dialog. Log statement in the dialog's corresponding click event handler will not be displayed in console.   4. Dismiss dialog by clicking outside the dialog. Click event of the dialog will not be triggered   4. Remove 'cancel' property in the dialog options while creating it(line 8 in index.js) and repeat the above steps.   5. Clicking the 'Cancel' option or anywhere outside the dialog will print the log statement. "
"TIMOB-25917","Improvement","Android|TiAPI",3,"Android: Allow picker minDate/maxDate properties to be set dynamically","On iOS it is possible to change the minDate/maxDate on runtime, on Android this is not possible due to TiSDK constraint in the code.     Test code    {code:js}  var win = Ti.UI.createWindow({      title: 'Form',  });    /*  // working  var dp = Ti.UI.createPicker({     type: Ti.UI.PICKER_TYPE_DATE,     minDate: new Date(2018,1,1)  });  */    var dp = Ti.UI.createPicker({     type: Ti.UI.PICKER_TYPE_DATE  });    // not working  dp.setMinDate(new Date(2018,1,1));    win.add(dp);  dp.showDatePickerDialog();  win.open();  {code}    *Observed Behaviour:*  Setting minDate on creation works, adjusting it after doesn't    *Expected behaviour*:   On Android setting minDate/maxDate on runtime (after creation) should work as it does on iOS.    *Community Credit*:  Joren Vos for finding the issue, Michael Gangolf for helping locating the problem/creating test code."
"TIMOB-25923","New Feature","Windows",13,"Windows: More options for Logo / Splash Screen","The package manifest's [VisualElements|https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/appxmanifestschema2013/element-visualelements] supports more options for visual elements such as wide asset in {{DefaultTile}} with scales. Titanium supports few of them. Titanium should be able to provide more flexible way to specify them in any way. See also  [tile and icon assets|https://docs.microsoft.com/en-us/windows/uwp/design/shell/tiles-and-notifications/app-assets#asset-size-tables].  "
"TIMOB-25932","Bug","Android",3,"Android: Cannot build SDK with JDK 10 (missing javah tool)","*Summary:*  If you attempt to build the Titanium SDK (ie: titanium_mobile) with JDK 10 installed, the build will fail due to a missing ""javah"" tool. This tool has been removed in JDK 10.    *Steps to reproduce:*  # Instal JDK 10 if not done already.  # Open the terminal.  # {{cd}} to the {{titanium_mobile/build}} directory.  # Enter: {{node scons.js build android}}    *Result:*  Build fails due to missing ""javah"" tool.    *Work-Around:*  Build with JDK 8 or 9.    *Recommended Solution:*  Remove Titanium's usage of the ""javah"" tool and the {{#include}}'s to the generated headers files. They're not needed.    The generated header files and function prototypes are useless by themselves. We have to create the function implementation ourselves, which we've already done and they're already publicly exported via {{JNIEXPORT}} in their respective C++ files. Since the implementation side already exports the functions, the function prototypes are not needed.  https://github.com/appcelerator/titanium_mobile/blob/master/android/runtime/v8/src/native/JSDebugger.cpp  https://github.com/appcelerator/titanium_mobile/blob/master/android/runtime/v8/src/native/V8Object.cpp  https://github.com/appcelerator/titanium_mobile/blob/master/android/runtime/v8/src/native/V8Runtime.cpp      ----  *Original Description:*  JDK 10 has dropped the {{javah}} tool (http://openjdk.java.net/jeps/313) which is required by our tooling when building the Android platform. We need to use {{javac}}'s {{-h}} flag instead. {{javah}} generated the header files from the compiled {{.class}} files in the jars, however {{javac -h}} used the original {{.java}} files.    We'll likely have to move the header generation out of the native compile step and into the Java compile step. We can do this by specifying the {{nativeheaderdir}} attribute in the {{javac}} task in the {{common.xml}} file. However, the {{nativeheaderdir}} attribute is only supported in ant 1.9.8+ (https://ant.apache.org/manual/Tasks/javac.html) and we ship {{ant}} 1.8.0 with Titanium. The Android build also depends on {{ant-contrib}} and {{ant-nodeps}} which may not be compatible with ant 1.9.8 or newer.    In the meantime, we'll have to use JDK 9 to build the Titanium SDK."
"TIMOB-25931","Improvement","Android",3,"Android: Update Multi-Dex support library","Our current {{android-support-multidex.jar}} is from 2015. We should update it to the latest {{1.0.3}} from March 2018."
"TIMOB-25928","Bug","iOS|TiAPI",1,"iOS: Closing a window with ""tabBarHidden"" property while modal window is open hides TabGroup bar","In a certain flow it is possible to permanently hide the tabbar even though it is not according to spec. It can be recreated using the following flow:    - open window with {{tabbarhidden}} property on true in tab  - open modal window on top of this  - close window with {{tabbarhidden}} property  - close modal window    Now, while the tabbar should be visible again, the tabbar is actually hidden. Only way to re-enable it is to open another window in the tabgroup with the {{tabbarhidden}} property and then manually close it again without the modal present. This seems to trigger a refresh. Below code to reproduce    {code:js}  Ti.UI.backgroundColor = 'white';    var tabGroup = Ti.UI.createTabGroup();  var window1 = Ti.UI.createWindow({      title: 'Window 1'  });  var tab1 = Ti.UI.createTab({      title: 'Tab 1',      window: window1  });    var window2 = Ti.UI.createWindow({      title: 'Window 2'  });  var tab2 = Ti.UI.createTab({      title: 'Tab 2',      window: window2  });    tabGroup.addTab(tab1);  tabGroup.addTab(tab2);    tabGroup.addEventListener('open', doStuff);    tabGroup.open();    // below is test code to reproduce the issue  function doStuff() {      Ti.API.info('START!');      var secondWindow = Ti.UI.createWindow({          tabBarHidden: true,          title: ""2nd window no tabbar""      });        var modalWindow = Ti.UI.createWindow();      var nav = Ti.UI.iOS.createNavigationWindow({          window: modalWindow      });        setTimeout(function() {          // open tabbarhidden window in tabgroup          tab1.openWindow(secondWindow);            setTimeout(function() {              // open modal              nav.open({                  modal: true              });                setTimeout(function() {                  // close tabbarhidden window in tabgroup while modal is open                  secondWindow.close();                    setTimeout(function() {                      // close modal window, now tabbar is gone                      nav.close();                  }, 1000);              }, 1000);          }, 1000);      }, 2500);  }  {code}"
"TIMOB-25939","Improvement","Android",3,"Android: Improve horizontal ScrollView scrolling that is set up with a RefreshControl","*Summary:*  When a horizontal {{ScrollView}} has been assigned a {{RefreshControl}}, it is difficult to scroll it horizontally. While scrolling it horizontally, if you slightly drag your finger up/down, the {{RefreshControl}} will then cancel horizontal scrolling and then steal/intercept all touch events.    *Steps to Reproduce:*  # Build and run the below code on Android.  # Start dragging the {{ScrollView}} horizontally.  # As you drag it horizontally, drag down without lifting your finger from the screen.  # Notice that the {{RefreshControl}} progress circle is being pulled down by your finger.  # As you drag down, attempt to drag horizontally without lifting your finger from the screen.  # Notice that you can no longer scroll the {{ScrollView}} horizontally anymore.        *Expected Result:*  Once you start scrolling horizontally, you should not be able to pull down the {{RefreshControl}} progress circle. It should only allow horizontally scrolling. And if you start dragging vertically, it should only pull down the {{RefreshControl}} and not allow horizontal scrolling of the {{ScrollView}}. It should only be one or the other since it's too difficult for a person to drag perfectly horizontally or vertically.    *Cause:*  This happens because Google's Java {{HorizontalScrollView}} class does not support nested scrolling. Google's {{SwipeRefreshLayout}} ignores a {{requestDisallowInterceptTouchEvent()}} method calls from child views that do not support nested scrolling, which causes it to intercept all touch events once you drag vertically.  [SwipeRefreshLayout.java#L735|https://github.com/aosp-mirror/platform_frameworks_support/blob/master/core-ui/src/main/java/android/support/v4/widget/SwipeRefreshLayout.java#L735]    *Note:*  This is not an issue with a vertical {{ScrollView}} using a {{RefreshControl}}. This is only an issue with a horizontal {{ScrollView}}."
"TIMOB-25937","Improvement","Android",3,"Android: Horizontal TextField scrolling should not be canceled by scrollable parent view","*Summary:*  When a TextField is within a vertical ListView, ScrollView, or TableView... horizontal TextField scrolling will be canceled if you drag your finger too far up/down and the vertically scrolling parent view will steal/intercept all touch events from there. This makes scrolling a TextField difficult.    *Expected Behavior:*  Once horizontal scrolling has started in a TextField, the parent view should no longer be able to scroll vertically until your finger has been released.    *Steps to Reproduce:*  # Build/run the below code on Android.  # Start dragging a TextField horizontally.  # As you drag it horizontally, drag up or down.  # Notice that the TextField no longer scrolls horizontally and you're now vertically scrolling the parent ScrollView instead.        *Notes:*  * A vertical scrolling TextArea does not have this problem since it supports ""nested"" scrolling.  * iOS does not allow horizontal scrolling of a TextField at all while in a vertically scrolling parent, but I don't think we should match this behavior on Android since it makes it less convenient to use.  "
"TIMOB-25936","Bug","iOS",1,"iOS: TableView: Appending row immediately after a section appends them before the section","In a TableView, when appending a row immediately after appending a section, the elements appear in the reverse order (row and then section).    *Steps to reproduce issue*:  1. Create a classic app with the below code  2. Run the app    *Expected Results*:  Each section has 3 rows under it    *Actual Results*:  All of the rows appear first, then the sections    *Notes*:  In the example, you can click on the window to add another section and row that also appear in reverse order.    "
"TIMOB-25935","Bug","Windows",5,"Windows: Ti.Utils.base64decode should ignore line breaks","{{Ti.Utils.base64decode}} should trim trailing line breaks to keep parity with other platforms.        Expected: This should print ""Decoding successful!"""
"TIMOB-25933","New Feature","Windows",8,"Windows: Implement Ti.UI.TextField.padding","[Ti.UI.TextField.padding|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.TextField-property-padding] property is not implemented on Windows.    "
"TIMOB-25944","Bug","CLI",1,"CLI: Block-scoped declaration error when using Node 4","h5.Description    When performing any Titanium CLI action (build, clean etc.) when using Node 4, the CLI will throw an error like the below        h5.Steps to reproduce    1. Execute a command like {{ti clean}} using node 4    h5.Actual    Error above    h5.Expected    CLI should function as we should break supported versions in a non-major release. Although Node 4 does go end-of-life at the end of the month, so we should not promote using it"
"TIMOB-25943","Bug","Windows|Windows phone",5,"Windows: Unable to install to device with JDK 9","I am unable to install to a device with JDK 9 this is due to [package.json|https://github.com/appcelerator/titanium_mobile_windows/blob/master/package.json#L32].    When I change the package.json to allow JDK 9 it installs to the device but the application crashes immediately with no error log.        h4. Actual        h4. Expected  No error is thrown."
"TIMOB-25942","Bug","iOS",13,"iOS 11: Screen orientation not working in navigation window","Hello,    We are seeing a screen orientation problem as windows are being open from a root navigation modal window.     *Steps to reproduce:*    1. Open the sample application in [link|https://drive.google.com/file/d/1n6lNK6bDwtQBDekMOAQE4mjoqjZeKpgk/view?usp=sharing] or use the below-provided code.   2. Run the application in an iOS simulator using below code Or    3. Run the sample application in the simulator.   4. Switch the simulator's device orientation to ""UPSIDE DOWN""   5. Click on the link on the main app screen labeled ""Launch Nav Root Window""   6. Once the window titled ""Modal 1"" window is opened, then click the ""Next"" nav button   7. The window titled ""Modal 2"" should not have the correct orientation.     *Test Code:*  index.xml    *Modal1.xml, Modal3.xml, Modal3.xml, Modal4.xml, Modal5.xml*    *Modal1.js, Modal3.js, Modal3.js, Modal4.js, Modal5.js*      tiapp.xml      *Test Environment:*  Using latest SDK 7.1.0.GA, 7.0.1.GA   Latest CLI 7.0.2    The Screen orientation not working in navigation window on iPhone.    Thanks"
"TIMOB-25946","New Feature","Windows",5,"Windows: Implement Ti.UI.TextArea.padding","[Ti.UI.TextArea.padding|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.TextArea-property-padding] property is not implemented on Windows.    "
"TIMOB-25952","Bug","iOS",1,"iOS: Listview setHeaderView with search is not working","Hello !  We have an issue with Listview setHeaderView with search. HeaderView is not displayed on iOS with search bar but its working on android.     Test code:  {code}  var popularSearchList = [],      searchList = [],      popularSearchListData = [],      searchListData = [];  for (var i = 0; i < 5; i++) {   popularSearchList.push({    id : i,    name : ""Bhuvan "" + i   });  }  searchList.push({   id : 0,   name : ""ListView""  }, {   id : 1,   name : ""TextField""  }, {   id : 2,   name : ""EditText""  }, {   id : 3,   name : ""Spinner""  }, {   id : 4,   name : ""Button""  }, {   id : 5,   name : ""ImageView""  }, {   id : 6,   name : ""ImageButton""  }, {   id : 7,   name : ""RecyclerView""  }, {   id : 8,   name : ""CardView""  });    showRecentSearchList(popularSearchList);  showSearchList(searchList);    function showRecentSearchList(popularSearchList) {   _.each(popularSearchList, function(popularSearchDataObj) {    var listRowObj = {     lblRecentSearchItem : {      text : popularSearchDataObj.name     },     rowName : popularSearchDataObj.name,     template : ""recentSearchListTemplate"",    };    popularSearchListData.push(listRowObj);   });   $.lvSearchList.sections[0].setHeaderView(addRecentSectionHeader());   $.lvSearchList.sections[0].setItems(popularSearchListData);  }    function showSearchList(searchList) {   _.each(searchList, function(searchListObj) {    var listRowObj = {     lblSearchItem : {      text : searchListObj.name     },     rowName : searchListObj.name,     properties : {      searchableText : searchListObj.name,     },     template : ""searchListTemplate""    };    searchListData.push(listRowObj);   });   //$.lvSearchList.sections[0].setHeaderView(addSearchSectionHeader());   //$.lvSearchList.sections[0].setItems(searchListData);  }    function searchAction(e) {   $.lvSearchList.searchText = e.value;   if (e.value.length > 0) {    showListView(true);   } else {    showListView(false);   }  }    function showListView(isSearchData) {   //$.lvSearchList.sections[0].setHeaderView(addSearchSectionHeader());   if (isSearchData) {    $.lvSearchList.sections[0].setHeaderView(addSearchSectionHeader());    $.lvSearchList.sections[0].setItems(searchListData);   } else {    $.lvSearchList.sections[0].setHeaderView(addRecentSectionHeader());    $.lvSearchList.sections[0].setItems(popularSearchListData);   }  }    function addRecentSectionHeader() {   var headerView = Ti.UI.createView({    width : Titanium.UI.FILL,    height : 40,    backgroundColor : 'white',    layout : 'horizontal'   });   var leftImage = Ti.UI.createImageView({    width : Titanium.UI.SIZE,    height : Titanium.UI.SIZE,    image : '/images/customer.png',    left : 20,   });   headerView.add(leftImage);   var title = ""RECENT"";   var lblTitle = Titanium.UI.createLabel({    width : Titanium.UI.FILL,    text : title,    height : Titanium.UI.FILL,    color : 'red',    left : 20,    font : {     fontSize : 16,     fontWeight : 'bold'    }   });   headerView.add(lblTitle);   return headerView;  }    function addSearchSectionHeader() {   var headerView = Ti.UI.createView({    width : Titanium.UI.FILL,    height : 40,    backgroundColor : 'white',    layout : 'horizontal'   });   var leftImage = Ti.UI.createImageView({    width : Titanium.UI.SIZE,    height : Titanium.UI.SIZE,    image : '/images/chassis.png',    left : 20,   });   headerView.add(leftImage);   var title = ""RESULTS"";   var lblTitle = Titanium.UI.createLabel({    width : Titanium.UI.FILL,    text : title,    height : Titanium.UI.FILL,    color : 'red',    left : 20,    font : {     fontSize : 16,     fontWeight : 'bold'    }   });   headerView.add(lblTitle);   return headerView;  }    function cancelSearchAction(e) {    }    $.index.open();    {code}    {code:xml}  <Alloy>   <Window class=""container"">    <View width=""Titanium.UI.FILL"" height=""Titanium.UI.FILL"" layout=""vertical"" top=""25"">     <View width=""Titanium.UI.FILL"" height=""40"" borderColor=""green"" borderWidth=""2"" left=""10"" right=""10"">      <SearchBar id=""tfSearchField"" onChange=""searchAction"" onCancel=""cancelSearchAction"" />      <!--<TextField id=""tfSearchField"" platform=""ios"" onChange=""searchAction"" onCancel=""cancelSearchAction"" />-->     </View>     <ListView id=""lvSearchList"" defaultItemTemplate=""searchListItem"">      <Templates>       <ItemTemplate id=""recentSearchListTemplate"" name=""recentSearchListTemplate"">        <View id=""viewRecentSearchList"">         <Label id=""lblRecentSearchItem"" bindId=""lblRecentSearchItem""/>         <ImageView id=""imgRightArrow""/>        </View>       </ItemTemplate>       <ItemTemplate id=""searchListTemplate"" name=""searchListTemplate"">        <View id=""viewSearchList"">         <Label id=""lblSearchItem"" bindId=""lblSearchItem""/>         <ImageView id=""imgRightArrow""/>        </View>       </ItemTemplate>      </Templates>      <ListSection/>     </ListView>    </View>   </Window>  </Alloy>  {code}  Full project ListviewSearch.zip    Please take a look on attached screenshot for android and iOS.    Teste Environment :  {code}  Operating System    Name                        = Mac OS X    Version                     = 10.13    Architecture                = 64bit    # CPUs                      = 4    Memory                      = 8589934592  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.0.14  Titanium SDK    SDK Version                 = 7.1.0.GA  {code}    Thanks   "
"TIMOB-25950","Improvement","iOS",1,"iOS: setUnselectedItemTintColor is unrecognized in iOS9","The Ti.UI.TabGroup property ""unselectedItemTintColor"" is only available on iOS 10+ and should be guarded.    PR: https://github.com/appcelerator/titanium_mobile/pull/9991"
"TIMOB-25949","Bug","Windows",8,"Windows: Wrong layout with bottom/right and center","{{bottom}} property is not calculated property when it is used with {{center}} property.        Actual: The blue box ({{view2}}) and ed line ({{view3}}) are not aligned     !b.png|thumbnail!     Expected: The blue box ({{view2}}) should be aligned with red line ({{view3}}).     !a.png|thumbnail!     More test cases:        "
"TIMOB-25965","Improvement","Android",3,"Android: Update old exception dialog","The current exception dialog is ugly and provides little debugging information. We should update the dialog to a cleaner and clearer output that also provides a stack trace."
"TIMOB-25964","Bug","Android",2,"Android: Merge manifest of Android Libraries","The AndroidManifest.xml of an Android Library (.aar) needs to be merged into the final app manifest."
"TIMOB-25963","Improvement","Android",5,"Android: Implement method to obtain current stack trace from V8","Currently, there it is not possible to obtain the current stack trace from V8 on the Java side of Titanium Android.    - Implement a V8Runtime method to obtain the current stack trace  - Report the stack trace upon runtime exceptions"
"TIMOB-25961","Bug","iOS",0,"iOS: e.orientation always returns 5 for landscape to FACE_UP and portrait  to FACE_UP.","Basically, need to maintain the onset of UI when we in portrait and move up & down. Also another set of UI when are in landscape and move up&down.     Eg:  if( e.orientation === Ti.UI.PORTRAIT && e.orientation === Titanium.UI.FACE_UP){    updateUI();  }    Also,    if( (e.orientation === Ti.UI.LANDSCAPE_LEFT || e.orientation === Ti.UI.LANDSCAPE_RIGHT) && e.orientation === Titanium.UI.FACE_UP){  updateUI()  }    But it does not work.      *Test Code:*          Thanks.  "
"TIMOB-25968","Improvement","LiveView",3,"Liveview: Write more information to pidfile, such as port and ip data","h5.Description    Currently when liveview writes its pidfile (at ~/.titanium), it only contains the path of the project, we should write more data to this (ip, fport, eport etc.) so that commands like stop/restart can function if the user defines a custom ip or port.    It would probably make sense to turn this file into a json object like below    "
"TIMOB-25975","Bug","Android",0,"Android: Embedded youtube video is not playing due to Chrome bug","Hi,  I am trying to display the youtube video with embedded URL.    Here I am trying to assign the embedded URL to URL property of Webview.  This is running fine on iOS but on Android, we are having some issues.  Please find the log we are getting while doing this.    [INFO] :   I/TiWebChromeClient.console: (main) [456,456] Error parsing header X-XSS-Protection: 1; mode=block; report=https://www.google.com/appserve/security-bugs/log/youtube: insecure reporting URL for secure page at character position 22. The default protections will be applied. (0:https://www.youtube.com/embed/xyz?list=xyz-l)    Can you please try on your end and let me know if this is valid."
"TIMOB-25971","Bug","iOS",0,"iOS: minimumFontSize property in Ti.UI.label lowers text baseline as it decreases","We've observed this problem for quite a while (I think it might also be in SDK 5.5) but it was one of those ""am I seeing things or is this really happening?"" bugs.  I finally sat down and ran some test cases and it is really happening.  As the attached test code shows, set the original font size such that the string does not fit the width of the label.  Then steadily decrease minimumFontSize until the string fits.  The string eventually fits into the label but the baseline of the text drops a little bit every time minimumFontSize is decreased.  We set borderWidth to 2 so that you can see the text move relative to the boundaries of the label.    We have several apps that require this functionality - it used to work properly somewhere in the SDK 5 generation.    The same code runs correctly on Android 7.1 (see screenshot)"
"TIMOB-25977","Bug","Android",2,"Android: AlertDialog not firing ""click"" event when canceled","The alert dialog doesn't fire a cancel event if you press outside of the alertDialog box in 7.1.0. The event listener actually doesn't console anything if done this way. If you switch it back to 6.2.2 it works correctly and fires the eventlistener when the user touches outside of the alert dialog.    Make a sample AppSellHerHater project and paste the index.js below. Then build to android on 7.1.0 and watch it not work. Then build with 6.2.2 and watch it work correctly.      "
"TIMOB-25979","Bug","Android",3,"Android: Changing index break events on TableViewRow","When we populate TableView with TableViewRows and then change their order with updateRow method it will prevent firing events on the TableViewRow with lowest index. This includes click and touchstart events.    Code to reproduce:    "
"TIMOB-25983","Bug","Windows",8,"Windows : Ti.UI.TextArea is not wrapped when there is long text, it just show in single line","Hello !  Ti.UI.createTextArea is not wrapped when there is long text, it just show in single line in windows phone. But it wrapped in android.  Teste code :      Test Environment:      Please take a look on attached screenshot.  "
"TIMOB-25981","New Feature","Windows",13,"Windows: nuget support for Hyperloop","Investigate {{nuget}} support for hyperloop, similar to how iOS has support for cocoapods. "
"TIMOB-25986","New Feature","Windows",13,"Windows: Physical pixel as a unit in views and fonts is not working","Hi !  Using the current Ti SDK GA 7.1.0 Windows applications do not recognize widths nor heights set as pixels. Also the fonts seem to be hardcoded to DIP since they don't change when specifying ""18px"" as a value. See attached app folder of an alloy application that has 4 boxes, each with a different unit (px, dip, dp and pt)    *Test Project*:    [^app.zip]     Our application requires us to have a 1920x1400 canvas to display all the elements needed. However if the user has a screen with 2736x1824 @ 200%, the actual dip that we can use are 1368x912     The device is a surface 4 pro."
"TIMOB-25990","Bug","Android",5,"Android apps crash when trying to add views to Titanium.Media.VideoPlayer objects if fullscreen property is set to true.","Android apps crash when trying to add views to Titanium.Media.VideoPlayer objects if fullscreen property is set to true. The sample code in the documentation exhibits the crash (see snippet under Android Fullscreen Video Player here, https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Media.VideoPlayer).     See attached for example project. When the block that adds the closeButton is removed there is no crash.        Environment:  "
"TIMOB-25989","Bug","Windows",5,"Windows: Unit specifier is ignored for font size","Changing unit specifier for font size does not change font size.    "
"TIMOB-26010","Bug","Android",3,"Android: TiHTTPClient getResponseHeader throws a NullPointerException","Calling  throws an exception:        I was trying to send some data to sentry.io, maybe inside the response there were no headers."
"TIMOB-26006","Improvement","Android",5,"Android: Reduce V8 library size","- The size of {{libkroll-v8}} for each architecture we support is quite large in size. We should see what optimizations we can make to reduce the size of the library."
"TIMOB-26001","Bug","Android",8,"Android custom Module : Unable to connect WIFI of Android 8 devices ","We are using below code to connect to Android device Wifi programatically. This code is working fine Android devices 7 and below. Same code is not working in Android 8. We have developed sample app in Android studio where we are able to connect to WIFI using wifiManager manager class. Due to this we are suspecting this issue might exists only if we using Appcelerator module. Details are mentioned after the code.  Code used to connect :      Please take a look on attached zip file.      Note Our App which is consuming this module is targeted for Titanium SDK 5.5.1.GA.    Let me know if you need more information.    "
"TIMOB-26000","New Feature","Windows",8,"Windows: Titanium codebase to support 64bit compatibility","Fix build errors/warnings when building for 64 bit. "
"TIMOB-25998","New Feature","Windows",13,"Windows: CLI should support --x64 and --arm64 build  target","Support {{x64}} and {{arm64}} build  target in CLI."
"TIMOB-25997","New Feature","Windows",13,"Windows: Setup Jenkins Build with Visual Studio 2017","In order to support ARM64 build  (TIMOB-25716), Jenkins should be building Titanium with Visual Studio 2017."
"TIMOB-25995","New Feature","Windows",13,"Windows: JavaScriptCore for ARM64","Build JavaScriptCore for ARM64."
"TIMOB-25994","New Feature","Windows",13,"Windows: JavaScriptCore for x64","Build JavaScriptCore for x64."
"TIMOB-26009","Story","Android|iOS",1,"Update Ti.Map modules (iOS 3.1.0, Android 4.2.0)","We need to update the Ti.Map module references on the SDK.    Includes the following changes:  * [MOD-2145] iOS: Added image overlay support.  * [MOD-2416] Android: Added image overlay support.  * [MOD-2345] Android/iOS: Added ""padding"" support.  * [MOD-2417] Android: Fixed map animation crash that sometimes happens.  "
"TIMOB-26008","Bug","Android",2,"The new update 7.1.1 does not work on Android (Gradle bug)","The new update 7.1.1 does not work on Android. At the creation of the SDK, stops and i get the following message:        "
"TIMOB-26007","Improvement","iOS",13,"iOS: Refactor RSOD","- Refactor the red-screen of death (crash dialog) to match the updated Android implementation"
"TIMOB-26014","Bug","Windows",13,"Windows: Titanium.Media.MEDIA_TYPE_VIDEO not working.","Hello !  I am having problem to take video from Appcelerator windows 10 app Surface Pro . Titanium.Media.MEDIA_TYPE_VIDEO not working now.       Above code doesn't give me option for video.    Test Environment:  SDK 7.1.0  windows 10  Surface Pro    Thanks   "
"TIMOB-26013","Improvement","Android|iOS",0,"TextArea: Cursor should go to beginning of the text when editable is false","For now, if we set value to textArea by coding, the cursor will go to the end of the text value. But if the content is more than the height of the text area, you will  have to scroll up to read the top content. This is very inconvenience. Specially, when customer just want to make the textArea as a read only area.     We should consider with the following improvement. Like if editable property is false, then the curser should go to the beginning of content. If editable property is true, we keep the current behaviour. "
"TIMOB-26012","Bug","iOS",0,"iOS: Textfield AutoCaps is not working on specific keyboardType.","Issue:  Textfield ""autocapitalization"" property is not working with specific keyboardType named  keyboardType :Titanium.UI.KEYBOARD_TYPE_NAMEPHONE_PAD,    Steps To Reproduce:  1. Run the following test code on an iOS device  2. Then click on textfield and check autocapitalization is not showing. If you change the keyboardType it works.    Test Code:  {code:title=app.js}        var window = Ti.UI.createWindow({          backgroundColor: 'white'      });        var textField = Ti.UI.createTextField({          borderStyle: Ti.UI.INPUT_BORDERSTYLE_ROUNDED,          keyboardType :Titanium.UI.KEYBOARD_TYPE_NAMEPHONE_PAD,          autocapitalization :Titanium.UI.TEXT_AUTOCAPITALIZATION_ALL,          color: '#336699',          width: 250,          height: 60      });        textField.addEventListener('click', function() {          Ti.API.info('in text field click');      });        window.add(textField);        window.open();    {code}    Thanks!"
"TIMOB-26017","New Feature","iOS",1,"Titanium.UI.iOS.MenuPopup: Ability to change background color and text color","Customer is looking for way to change background color and text color for controller Titanium.UI.iOS.MenuPopup.    For now, there is no properties to change those. So create this as new feature.  Please also advice any workaround to change them."
"TIMOB-26027","Bug","Android",3,"Android: Analytics can cause a crash on Android 8 if app is backgrounded","When using Analytics (enabled by default via the tiapp.xml property {{<analytics>true</analytics}}, an Android app can randomly crash:    The crash happens in the ""handleMessage"" method of the ""APSAnalyticsHelper.java"" and indicates an issue with the main thread. We removed the class recently, as part of [this PR|https://github.com/appcelerator/aps_sdk/pull/312], so it might not be an issue in future versions of the SDK. [~iwhitfield] to confirm"
"TIMOB-26026","Epic","Android|iOS",0,"TiAPI: Improve parity on Core-SDK","Currently, there are differences in behavior when using several core-API's across iOS and Android. Those should be resolved.  "
"TIMOB-26025","Improvement","Android|iOS",13,"TiAPI: Add Ti.Filesystem.File parity across platforms","Currently, there are differences in behavior when using the Ti.Filesystem.File API across iOS and Android. Those should be resolved."
"TIMOB-26023","Improvement","Android|iOS",13,"TiAPI: Add Ti.Blob parity across platforms","Currently, there are differences in behavior when using the Ti.Blob API across iOS and Android. Those should be resolved."
"TIMOB-26021","Improvement","iOS",2,"iOS: Search results table-view background color change","I have a window with backgroundImage and a tableView with backgroundColor transparent and labels of all item white.  When I click on searchBar and start typing the backgroundColor of tableView became white and the results are unreadable because item's labels have the same color of background.    Android work fine with the same component Ti.UI.createSearchBar"
"TIMOB-26029","Bug","Android",2,"Android : Titanium.Android.ACTION_HEADSET_PLUG Not working as expected.","We want to detect the current state of headphones connected (true) or disconnected (false). We have an API for that but no example code in documents.  http://docs.appcelerator.com/platform/latest/#!/api/Titanium.Android-property-ACTION_HEADSET_PLUG  I create an example code but not working.   {code}  function doClick() {   Ti.Android.unregisterBroadcastReceiver(bc);  }  $.index.open();  var onReceived = function(e) {   Ti.API.info(""received!"");   Ti.API.info('Handling broadcast. >> ' + JSON.stringify(e));   alert('Handling broadcast. >> ' + JSON.stringify(e));  };  var bc = Ti.Android.createBroadcastReceiver({   onReceived : onReceived  });  Ti.Android.registerBroadcastReceiver(bc,[""Titanium.Android.ACTION_HEADSET_PLUG""]);  {code}  Index.xml  {code:xml}  <Alloy>      <Window class=""container""  onClose=""doClose"" />     </Alloy>  {code}    Test Environment:  {code}  Operating System    Name                        = Microsoft Windows 10 Pro    Version                     = 10.0.16299    Architecture                = 32bit    # CPUs                      = 4    Memory                      = 17091956736  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.1.0  Titanium SDK    SDK Version                 = 7.1.0.GA  {code}    Thanks     "
"TIMOB-26028","Improvement","Windows",13,"Windows: Add Ti.Filesystem.File parity across platforms","Fix some parity issues we're looking at deprecating Ti.Filesystem.File #createTimestamp() and #modificationTimestamp() to be replaced by new #createdAt() and #modifiedAt() methods that return a Date.    Basically the timestamp methods return a Date on iOS and Number on the rest. There's not a nice non-breaking way to fix that, so we'd like to deprecate the existing methods and add new variants that return Date on all platforms (since it's pretty easy to turn that into a timestamp if necessary).  "
"TIMOB-26034","Bug","Android",0,"Android: Warning: ""PickerProxy: the useSpinner property is deprecated""","Received this email through JIRA admin account:    _In Android when using the Picker element we are receiving the following warning:""PickerProxy: the useSpinner property is deprecated, see the documentation for more information"". At any time we are establishing this property and it is causing the application to freeze_    I reached out to the app developer for more details, and will update the ticket after information is available."
"TIMOB-26033","Bug","iOS",8,"iOS: Ti.Media.VideoPlayer shows an error on Window Close on SDK 7.1.1.GA","Hello,     The following error occurs when closing a window with a video player control with SDK 7.1.1.GA on iOS. On Android, it works just fine.     *Test Environment:*  Appcelerator Command-Line Interface, version 7.0.3  SDK: 7.1.1.GA    *Test code:*  index.xml    video.xml    index.js    video.js    index.tss    alloy.js      Note: Also I have added the full project on the attachment file.  *Error:*    In this test code customer used *media* in the create command to play a video stored on the local device. If they put a fake url in the create it won't throw the error but even though they set the media later then it will not play the video. Again, this only happens on iOS.     Thanks"
"TIMOB-26036","Bug","Windows",8,"Windows: Disabling Ti.View does not disable its children","We have having issues related to disabling the children of Ti.View. If we make touchEnabled false for a View, it does not make its children uneditable.  Where as if we use Ti.ScrollView instead, everything is working as expected.    As mentioned in the ticket  [TIMOB-25306|https://jira.appcelerator.org/browse/TIMOB-25306], since we can not make the picker disabled by setting its touchEnabled property as false, we are trying to use it as a workaround to disable its Parent view which would in turn disable all its children.      Steps to reproduce:  1. Run the attached Alloy project TestPickerDisabled  2. You can see two Pickers and two TextFields. Picker and TextField whose background color is yellow are children of Ti.View where as the other Picker and TextField whose background color is Red are children of Ti.ScrollView.  3. We have touch enabled property set to false for both Ti.View and Ti.ScrollView. You can observe that the Picker and the TextField that are children of Ti.View are editable where as the children of Ti.ScrollView are not editable.    Test Project : *TestPickerDisable.zip*    Test Environment :    Thanks   "
"TIMOB-26048","Improvement","Windows",13,"Windows: Refactor RSOD","- Refactor the red-screen of death (crash dialog) with stack traces to match the iOS/Android look and feel.  - Add ""nativeStack"" property to show the native stack trace     Unit-test (iOS and Android so far): https://github.com/garymathews/titanium_mobile/pull/2/files#diff-3dc400bf7f83b2691685b65f5a5066d1R13"
"TIMOB-26045","Bug","Windows",8,"Windows: 2DMatrix rotation scales view","Animation transform using {{2DMatrix}} with {{rotate}} property should just rotate the view but it actually scales view.        Expexted: View should rotate at the center position of the view. This should not change view size.  "
"TIMOB-26049","Improvement","iOS",3,"iOS : Replace NSURLConnection with NSURLSession used in Ti.UI.WebView","Apple has deprecated NSURLConnection and NSURLSession should be used instead of same. In Ti.UI.WebView, we are still using NSURLConnection. We should replace NSURLConnection with NSURLSession."
"TIMOB-26055","Bug","Android",3,"Android: Build fails due to invalid character '$' in android manifest with facebook & liveview with 7.3.0 SDK","This can be called as a regression. Works with 7.1.1.GA    h5.Steps to reproduce:  1. Create a default app for android.  2. Add the facebook module to the tiapp.xml.  3. Build the app with SDK 7.3.0 (I used 7.3.0.v20180518082133).    h5.Actual result:  1. Build fails to package with error:    2. In the android manifest this line gets added:    3. Build fails due to the {{$}} symbol.    Expected result:  1. Build should not fail when facebook & liveview are used in the app."
"TIMOB-26054","Bug","Android",0,"Android: Webview with HTML having GIF images not loaded on all android devices.","Hi,  I am facing a wired issue in android.  I have Web-view with HTML having GIF images. GIF images is loading in some android device and doesn't load in some android device.  1.html  {code:HTML}  <!DOCTYPE html PUBLIC ""-//W3C//DTD HTML 4.01//EN"" ""http://www.w3.org/TR/html4/strict.dtd"">  <html lang=""en"">    <head>      <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">      <meta name=""viewport"" content=""width=device-width, height=device-height, initial-scale=1.0, user-scalable=no""/>  </head>    <body style=""background-color:transparent; margin: 0; height: 100%; overflow: hidden"">      <div style=""text-align: right"">           <img src=""gifImg.gif"" style=""width: 40px; height: 40px"" />      </div>  </body>    </html>  {code}    index.xml  {code:xml}  <Alloy>      <Window class=""container"">          <WebView id=""previewWebView"" url = '/gifTest/1.html'/>      </Window>  </Alloy>  {code}  Places your gif image and HTML file to the ""assets/gifTest/"" location    Note: We have tested on Android 6 (HTC one m8), Android 7 (Huawei), and Android 8 Huwawei y9 2018 is working as expected.    Problem with the following devices and Chrome browser version: 66.0.3359.158  OnePlus 5T(8.1.1), Moto G4 plus(v7.0.0), onePlus 3(v8.0.0) and Moto G5 (v7.0.0)    *Steps To Reproduce:*  1. Run the provided test code with those specific devices.  2. Make sure the Chrome browser of those devices is up to date.  3. Test on the actual device, not on emulator.    *Test environment :*  {code}  Operating System    Name                        = Microsoft Windows 10 Pro    Version                     = 10.0.16299    Architecture                = 32bit    # CPUs                      = 4    Memory                      = 17091956736  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.1.0  Titanium SDK    SDK Version                 = 7.1.1.GA  {code}    Thanks "
"TIMOB-26051","Improvement","Android",2,"Android: Ti.UI.createRefreshControl.beginRefreshing() does not fire 'refreshstart'","- {{beginRefreshing()}} does not fire the {{refreshstart}} event    *TEST CASE*  {code:js}  var window, control, listView;    window = Ti.UI.createWindow();    window.addEventListener('open', function () {      control.beginRefreshing();  });    control = Ti.UI.createRefreshControl();    listView = Ti.UI.createListView({      refreshControl: control  });    control.addEventListener('refreshstart', function () {      Ti.API.info('refreshstart');      setTimeout(function () {          Ti.API.info('ending...');          control.endRefreshing();      }, 2000);  });    control.addEventListener('refreshend', function () {      Ti.API.info('refreshend');      alert('DONE!');  });    window.add(listView);  window.open();  {code}"
"TIMOB-26059","Story","Windows",13,"Windows: Support x64 build target for Hyperloop","Support x64 build target support for Hyperloop."
"TIMOB-26076","Bug","Android",0,"Android : WebView Html5 Audio / Video Not playing from External Storage","    [ERROR] :  MediaResourceGetter: Invalid url: java.lang.RuntimeException: setDataSource failed: status = 0x80000000  [ERROR] :  MediaPlayer: error (262, 0)  [ERROR] :  MediaPlayer: Unable to create media player      ================    The audio / video file from *external storage* not playing under webview.    Note: please check the attached code (app.js)    on my android deice I have copied both audio file into the directory where created index.html file is present"
"TIMOB-26063","Story","iOS",3,"iOS: Implement WebView.onlink callback","h5. description  Costumer is attempting to load a pdf for android using intents with webview.   in the mobile app they are using webview control for displaying the remote web site by binding a URL. The web pages in the web site contains few pdf links. On click of normal hyperlinks, respective web page is being shown in the web view. Whereas, on tapping a pdf links, a blank window is getting opened in Android devices. In iOS it’s working fine and a PDF is showing.    Per Jira WebView cannot disply PDF documents on Android. So they are using intents as a workaround to open the PDF link. The issue is that on click of the pdf link in the web view, they are unable to get the exact PDF url with any of Titanium WebView API methods or events    The customer was able to do it natively and open the PDF's with intents.     h5. Request  The customer wants to know how to get the exact PDF link using the webview API or if there is a workaround they could use.    h5. additional information   attached are two apps. One is a titanium app and one is an android native application.  [titanium app|https://axwaysoftware-my.sharepoint.com/personal/vvazquezmontero_axway_com/_layouts/15/guestaccess.aspx?guestaccesstoken=rsxSxfm51VH5t8MRm7YpDX1bHDfJfDfaycmtpKrlAEE%3d&docid=2_11a957eab95234b6ab84003e12f7b0b41&rev=1]"
"TIMOB-26067","New Feature","Windows",8,"Windows: Update APSAnalytics to support opt-out","Update [aps_sdk|https://github.com/appcelerator/aps_sdk] to support opt-out for Windows. I believe it is not a requirement of 7.2.0 because Axway doesn't officially support native sdk for Windows, but it is good to have it updated.  "
"TIMOB-26066","Improvement","Tooling",8,"node-ios-device: Support Xcode 9 and Node.js 10","Apparently newer versions of Xcode prohibit the linking to private frameworks. In the case of node-ios-device, it needs to link with MobileDevice.framework and can't with Xcode 9.2 and 9.3.    node-pre-gyp is pretty out-of-date.    The build scripts need to be updated for Node.js 10 (and Node.js 9)."
"TIMOB-26065","Story","Android",1,"Android: Investigate NDK r17 support","We currently support the Android NDK r16b with SDK 7.x. As of May 2018, NDK r17 is available ([Changelog|https://developer.android.com/ndk/downloads/revision_history]). We should validate if our tooling already supports it and if not, what it takes to update it."
"TIMOB-26078","New Feature","Windows",3,"Windows: Remove Ti.UI.currentWindow","Remove {{Ti.UI.currentWindow}} as it has been removed on the other platforms.    Related to https://github.com/appcelerator/titanium_mobile/pull/10080#discussion_r191809153"
"TIMOB-26077","Bug","iOS",5,"iOS: Ti.UI.convertUnits returns incorrect values for 3x resolution devices","Calls to Ti.UI.convertUnits return invalid values for 3x iOS devices. It appears to be multiplying by 2x instead under the hood."
"TIMOB-26075","Improvement","Android",13,"Android: Refactor app resume and ""newintent"" handling","*Summary:*  Titanium's app resume handling from notification, shortcuts, intent-filters, etc. is problematic. It does not always resume and instead displays a new splash-screen instance which never runs the ""app.js"" (appears to hang) or a dialog stating that the app needs to be restarted (which can get stuck in an infinite loop).    The following is a list of issues that have been reported. Some are flagged closed, but they're not completely resolved:  * [TIMOB-1559]  * [TIMOB-4941]  * [TIMOB-9285]  * [TIMOB-15253]  * [TIMOB-24427]  * [TIMOB-24747]  * [TIMOB-25776]    *Recommended Solution:*  Get rid of *+all+* of the activity ""restarting"" code. No one likes this behavior.  * [TiRootActivity.onCreate()|https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/org/appcelerator/titanium/TiRootActivity.java#L75]  * [TiLaunchActivity.onCreate()|https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/org/appcelerator/titanium/TiLaunchActivity.java#L142]  * [TiBaseActivity.onCreate()|https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/org/appcelerator/titanium/TiBaseActivity.java#L578]    Drop support for Android bug 2373/5277 related ""tiapp.xml"" properties:  * [link|https://docs.appcelerator.com/platform/latest/#!/guide/tiapp.xml_and_timodule.xml_Reference-section-src-29004921_tiapp.xmlandtimodule.xmlReference-PropertiestoworkaroundAndroidbugs2373and5277]    In the main activity's {{onCreate()}}, we should do the following:  # Check if {{TiApplication.getRootActivity()}} is not null. This tells us if a pre-existing activity window is already in the background and needs to be resumed. If it doesn't exist, then go ahead and create the activity (we're done).  # Fetch the pre-existing root activity's intent. If we call {{Context.startActivity()}} with this intent, then it'll resume it with all of its child activity windows intact. _(This is what we're missing.)_  # Call {{finish()}} for the new activity since we don't want to spawn a new instance. Attempt to disable the activity window's animation if possible via {{Activity.overridePendingTransition()}}.  # Have the pre-existing root activity fire a ""newintent"" event with the intent received by the new activity that we just finished/closed. (We must wait for the old activity task to resume first though.)    *Issues to Investigate:*  * The {{Activity.getIntent()}} can return {{null}} in rare cases ([link|https://stackoverflow.com/questions/37856407/can-activity-getintent-ever-return-null]). We need to figure out how to resume the app's activity in this case.  * We need to double check the necessity of {{TiBaseActivity.isUnsupportedReLaunch()}}. I suspect it's handling the case where a new Java runtime and {{Application}} instance is being re-created for a pre-existing app process (the C/C++ side's static variables still remember previous application info).  * Check how this works with launchMode ""singleTop"". (It is being used by some community users. Although with this change, we shouldn't need it anymore.)  * Re-test with Titanium's ""Live-View"" feature and {{Ti.App._restart()}} method to make sure they don't break.    *Limitations:*  * Titanium only supports running one V8 JavaScript runtime at a time. So, multiple activity tasks cannot be supported due to this limitation. This is partly why we need to refactor the app resume behavior. _(This may be fine from a portability standpoint anyways since iOS does not support this.)_  * We should avoid launchMode ""singleTask"" support. While it does what we want and makes an Android app work more like iOS, it comes with a huge limitation. A ""singleTask"" activity's child activity windows are all torn down by the Android OS after homing-out of the app and then resuming it. ""singleTask"" is only a viable solution if we re-architected Titanium to only support one activity and and all {{Ti.UI.Window}} objects spawned fragments instead, but this would be a major MAJOR breaking-change that is best avoided for now.    "
"TIMOB-26081","Bug","CLI",5,"CLI: Fix new Buffer deprecation warnings in build scripts","h5.Description    Node 10 produces a deprecation warning when the {{new Buffer}} constructor is used. See https://nodesource.com/blog/understanding-the-buffer-deprecation-in-node-js-10/ if you're curious    In most cases I believe the most appropriate swap for us to do is turn {{new Buffer}} into {{Buffer.from}}    In titanium_mobile there are two instances https://github.com/appcelerator/titanium_mobile/search?l=JavaScript&q=%22new+Buffer%22  , however checking all modules (*lib, node-appc, node-titanium-sdk etc.) would also be good as there deprecation warning will not be shown for code that resides under {{node_modules}} I believe.    We might also wish to update eslint-config-axway to include the {{no-buffer-constructor}} rule    Steps to reproduce to be added as replacement happens"
"TIMOB-26080","Bug","Android|CLI",5,"Android: ERR_INVALID_CALLBACK error when building a app/module on Node 10","h5.Description    Building an app or module with Node 10 throws the following error        h5.Steps to reproduce    1. Download Node 10  2. Build a module or an app    h5.Actual    Above error    h5.Expected     No error should occur"
"TIMOB-26079","Bug","Android",0,"App does not run if included module have multiple .aar file.","I am trying to build an Android module that includes .aar files. The module currently doesn't do much at all but when I include various .aar files then the module is created but when it gets to running the test app of the module it fails.     It creates the unsigned apk and then processes the dex files and then the src files when it throws the following error.     (__('Valid ABIs for this project: %s', this.abis(', ')));   : this.abis is not a function   Failed to run ti /Users/jasonwogan/.appcelerator/install/7.0.3/package/node_modules/titanium/lib/titanium.js       The Module: https://github.com/jwogan5/sampleApp/blob/master/android.zip     *Steps To Reproduce*  1. Just build that module  2. Then run it with any sample test App.   "
"TIMOB-26086","Bug","Windows",13,"Windows: Wrong event source after scaling with 2DMatrix","Wrong {{source.id}} is returned after scaling the view with {{2DMatrix}}.        Expected: When clicking on the blue view, it should prompt {{""view2""}}.  "
"TIMOB-26085","Bug","Windows",5,"Windows: 2DMatrix should scale from center","View scale with {{2DMatrix}} should scale the view from center position of the view.        Expected: View should scale from center of the view."
"TIMOB-26099","Bug","Android",3,"Android: CLI ""appc run"" should launch app with intent action MAIN category LAUNCHER","*Summary:*  {{appc run}} launches the app on Android with an intent that is missing action ""android.intent.action.MAIN"" and category ""android.intent.category.LAUNCHER"", which is how an app is normally launched on Android via the app list screen.    The consequence of this is that if you press the HOME button to suspend the app and then tap on the app from the home screen, then a new activity instance will be created and Titanium will be stuck on the splash screen since Titanium only supports running 1 JavaScript runtime at a time.    *Steps to reproduce:*  # Build and run the below code on Android either via Appcelerator Studio or via {{appc run}} at the terminal.  # Wait for the app to be displayed on the Android device.  # Press the ""Home"" button to suspend the app. (Do *NOT* press the ""Back"" key.)  # From the home screen, go to the app list screen.  # Tap on the installed app to attempt to resume it.  # After doing this, notice that the app is stuck displaying the splash screen. It does not resume the app. It has created a new activity instance without a JavaScript runtime.        *Cause:*  On Android, an existing activity window stack can be resumed when using the same an intent that originally launched it. If given different intent settings for the same activity (such as the case here), then Android will create a new activity instance by default.    *Recommended Solution:*  We need to modify the CLI on how it starts the app via Android ""adb"" command line tool here...  https://github.com/appcelerator/node-titanium-sdk/blob/master/lib/adb.js#L655    We need to add intent parameters {{-a}} to set the action, {{-c}} to set the category, and {{-f}} to set the flags via adb similar to the following.      The {{-f 0x10200000}} part adds intent flags {{FLAG_ACTIVITY_NEW_TASK}} and {{FLAG_ACTIVITY_RESET_TASK_IF_NEEDED}}. The {{FLAG_ACTIVITY_NEW_TASK}} is set by all Android OS versions when launching an app from the home screen. The {{FLAG_ACTIVITY_RESET_TASK_IF_NEEDED}} is set by newer Android OS versions (such as Android 8) but works fine on older OS versions such Android 4.1.    *Note:*  We also need this change to resolve a regression mentioned here: [TIMOB-25867]  "
"TIMOB-26097","Bug","iOS",3,"Hyperloop: iOS 12 - Using CocoaPods in Hyperloop does not work with Xcode 10","When using Xcode 10, Hyperloop errors if the app includes CocoaPods dependencies:      Before, there was also an issue with cleaning the build directory, which is addressed via [this PR|https://github.com/appcelerator/titanium_mobile/pull/10123] already."
"TIMOB-26090","Improvement","iOS",1,"iOS 12: Make iOS development-project compatible with Xcode 10","This ticket describes some minor changes to our Xcode template project in order to start active development on it."
"TIMOB-26089","Improvement","iOS",8,"iOS 12: Update simulator mappings for Xcode 10","We need to do a slight adjustment on the simulator mappings of ioslib in order to run on Xcode 10 properly."
"TIMOB-26141","Bug","Android",3,"Android: Accessing Titanium.App.Android.R logs GC errors","When building an Alloy app with Ti SDK 7.1.1 accessing `Titanium.App.Android.R` causes the logs to trow errors:        How to reproduce:    1. Create new Alloy app  2. Add the following code below in alloy.js:  3. Build  4. See errors in logs.        Logs:    "
"TIMOB-26102","Improvement","Android",5,"Android: Push notifications should create default channel if not assigned when targeting Android 8","*Summary:*  Our APS library (which implements Android push notifications) correctly uses Google's {{DEFAULT_CHANNEL_ID}} on Android 8 when targeting API Level 25 or lower.  [APSCloudPush.java#L409|https://github.com/appcelerator/aps_sdk/blob/897b735961c10ce1b6e74f9fd48b48edb4eec83e/android/cloudpush/APSCloudPush/src/main/java/com/appcelerator/aps/APSCloudPush.java#L409]    However, when targeting API Level 26 or higher, you cannot use Google's {{DEFAULT_CHANNEL_ID}} which means notifications will fail to be posted to the status bar. So, the APS library must be changed to create its own default notification channel if one was not supplied from the payload... and it should only do so when targeting API Level 26 or higher.    *Recommended Solution:*  We should use a similar solution used by Titanium's local notifications as shown here...  https://github.com/appcelerator/titanium_mobile/pull/9945    It probably should use a separate notification channel name than what Titanium uses. This may be needed to avoid collision with how Titanium configures its channel.  "
"TIMOB-26109","Bug","iOS",3,"Xcode 10: Cannot build modules with the new (default) build system","When using Xcode 10 and the new build system, which is now default, the linked core-classes (TiProxy.h, TiBase.h, ..) cannot be found anymore. I opened a [Radar|https://openradar.appspot.com/radar?id=5621620265713664] for this."
"TIMOB-26108","Bug","CLI",1,"CLI: ""clean"" command builds the project instead ","*Steps to reproduce*  # Create a project {{appc new}}  # Run the project once   # {{ti clean}}    *Expected*  The app is cleaned     *Actual*  The app is built "
"TIMOB-26106","Story","Windows",3,"Windows: Update module apiversion to 6","Update module apiversion because there's module binary incompatibility in upcoming 7.3.0. All Windows module needs re-compiled to make it work with 7.3.0."
"TIMOB-26117","Bug","iOS",5,"iOS: ES6 promises not supported on iOS 9. (Works on iOS 8 and 10.)","*Summary:*  JavaScript ES6 ""promises"" are not supported on iOS 9 when setting ""tiapp.xml"" setting {{<transpile>true</transpile>}}.    However, promises are supported on iOS 8 and iOS 10.    *Steps to reproduce:*  # Set up a project's ""tiapp.xml"" with the below ""transpile"" setting.  # Build and run the below code on iOS 9.    {code:xml}  <?xml version=""1.0"" encoding=""UTF-8""?>  <ti:app xmlns:ti=""http://ti.appcelerator.org"">   <transpile>true</transpile>  </ti:app>  {code}    {code:javascript}  Ti.API.info(""@@@ typeof Promise: "" + (typeof Promise));  var promise = new Promise(function(resolve, reject) {   Ti.API.info(""@@@ Promise execution started."");   setTimeout(function() {    Ti.API.info(""@@@ Promise execution ended."");    resolve();  //  reject();   }, 1000);  }).then(function() {   Ti.API.info(""@@@ Promise.then() called."");  }).catch(function(e) {   Ti.API.info(""@@@ Promise.catch() called."");  });  {code}    *Result:*  An exception dialog is displayed stating ""Can't find variable: Promise"".    *Notes:*  * This issue does not happen in iOS 8.1 and 8.4 simulators.  * This issue does not happen in iOS 10.3.1 simulator.  * I verified that this issue happens in iOS 9.0 and 9.3 simulator.  * I've tried setting ""tiapp.xml"" {{<transpile>}} setting true and false. No difference. Always fails on iOS 9.x Setting {{<transpile>}} to false surprisingly works on iOS 8.  "
"TIMOB-26116","Bug","iOS",0,"iOS: Images are skewed on iOS 8","*Summary:*  The default splash image (and other images) appears skewed when running on iOS 8. This is not an issue on iOS 9 and newer OS versions.    This issue happens in Titanium 6.1.1 and 7.3.0.    *Steps to reproduce:*  # Create a new ""Classic App"" project.  # Builds and run it in the iOS 8 simulator.  # Observe the default splash when displayed onscreen. (It appears skewed.)  # Observe the tab icons at the bottom of the app. (They appear skewed.)    *Result:*  On iOS 8, it looks like the following...  !iOS8Splash.bad.png|thumbnail! !iOS8Tabs.bad.png|thumbnail!    On iOS 9 and 10, it works correctly.  !iOS10Splash.good.png|thumbnail!  !iOS10Tabs.good.png|thumbnail!   "
"TIMOB-26115","New Feature","TiAPI",5,"TiAPI: Add support for console.timeLog","it would be very useful to have the ability to output timing to the log for testing and debugging.    We have already added console.time and console.timeEnd. Due to some ambiguities around calling timeEnd multiple times for the same label, they introduced console.timeLog to handle printing intermediate timings without removing the timer/label. We should expand to support this as well.    https://github.com/whatwg/console/pull/138"
"TIMOB-26113","Bug","iOS",3,"iOS: Ti.UI.convertUnits does not consult ti.ui.defaultunit property","Looks like iOS does not consult ti.ui.defaultunit property for converting when input units aren't specified. It assumes ""dp"", which is the default value placed in tiapp.xml."
"TIMOB-26110","Bug","iOS",0,"Xcode 10: Cannot build application with new (default) build system","When using Xcode 10 and the new build system, the app build fails because the <project>/build/iphone/build directory is generated by our CLI instead of the actual xcodebuild command. While this was okay in the past, the new build system complains about that.     I filed a radar at https://openradar.appspot.com/40906897 and talked to the Apple engineers during WWDC. They assume it to be an issue in the new build system, but we can actually fix it on our end by now pre-creating the directory and let xcodebuild create it. I tested it as a local change and it works with both Xcode 10 and 9.    Error:  "
"TIMOB-26127","Bug","Android",5,"Android: Video Quality undefined","Can't changer the quality of media camera because Titanium media video qualities is undefined    {quote} Ti.API.info(""Titanium.Media.QUALITY_HIGH  "" + Titanium.Media.QUALITY_HIGH);   Ti.API.info(""Titanium.Media.QUALITY_MEDIUM  "" + Titanium.Media.QUALITY_MEDIUM);   Ti.API.info(""Titanium.Media.QUALITY_LOW  "" + Titanium.Media.QUALITY_LOW);   Ti.API.info(""Titanium.Media.QUALITY_640x480  "" + Titanium.Media.QUALITY_640x480);   Ti.API.info(""Titanium.Media.QUALITY_IFRAME_960x540  "" + Titanium.Media.QUALITY_IFRAME_960x540);   Ti.API.info(""Titanium.Media.QUALITY_IFRAME_1280x720  "" + Titanium.Media.QUALITY_IFRAME_1280x720);{quote}    Logs ==>     06-10 10:20:45.406 30754 30754 I TiAPI   :  Titanium.Media.QUALITY_HIGH  undefined  06-10 10:20:45.406 30754 30754 I TiAPI   :  Titanium.Media.QUALITY_MEDIUM  undefined  06-10 10:20:45.406 30754 30754 I TiAPI   :  Titanium.Media.QUALITY_LOW  undefined  06-10 10:20:45.406 30754 30754 I TiAPI   :  Titanium.Media.QUALITY_640x480  undefined  06-10 10:20:45.406 30754 30754 I TiAPI   :  Titanium.Media.QUALITY_IFRAME_960x540  undefined  06-10 10:20:45.406 30754 30754 I TiAPI   :  Titanium.Media.QUALITY_IFRAME_1280x720  undefined    "
"TIMOB-26120","Improvement","CLI",13,"Update npm package dependencies and reduce security vulnerabilities listed","We have a number of security vulnerabilities now listed by default on npm installs (as of npm 6 this is built into the process). We should try to update all of our npm package dependencies as much as possible, as well as attempt to drive down the security vulnerabilities listed as low as possible (ideally none).    This has knock-on effects on all of the npm packages we generate and dependencies upon in the SDK, so this will include fixes for things like node-appc, ioslib, windowslib, appc-aar-tools, etc."
"TIMOB-26126","Bug","Android",2,"Android: Update emulator tooling path","- The current {{tools/emulator}} path is now obsolete  - Update the path to the newer {{emulator/emulator}} path    *TEST CASE*  - Build and run a project using an x86 emulator    - {{appc run -p android}}    *EXPECTED*  - Emulator runs correctly    *ACTUAL*  "
"TIMOB-26124","Bug","Android",1,"Android: ""Ti.buildHash"" property always returns null","*Summary:*  The {{Ti.buildHash}} property always returns {{null}} on Android. This has been happening since Titanium 6.0.0.  _(This is not an issue on iOS.)_    *Steps to reproduce:*  * Build and run the below code on Android.  * On app startup, an alert displays the {{buildHash}}.  * Note that it displays it as ""undefined"". _(This is the bug.)_        *Cause:*  Our ""android.js"" build script expects to receive {{option.gitHash}} with a capital 'H' here...  https://github.com/appcelerator/titanium_mobile/blob/master/build/android.js#L22    But our ""scons-build.js"" and ""scons-cleanbuild.js"" scripts are passing in a lowercase {{githash}}.  https://github.com/appcelerator/titanium_mobile/blob/master/build/scons-build.js  https://github.com/appcelerator/titanium_mobile/blob/master/build/scons-cleanbuild.js    *Note:*  The {{buildHash}} is mostly needed to distinguish between an RC and GA version of Titanium. We log the Titanium version on app startup and this is helpful to better provide tech-support for the community.  "
"TIMOB-26121","Bug","iOS",5,"iOS: Default simulator should be compatible with selected xcode","*TEST CASE*  - Install xcode-beta (10.0) along with xcode (9.x)  - Use xcode-select to select 9.x  - Build a project without specifying a simulator  - An iOS 12.0 simulator will be selected which is only compatible with xcode 10.0"
"TIMOB-26128","Improvement","Android",3,"Android: Allow asset directory names with a leading underscore to be included in the build","*Summary:*  Directory names have a leading underscore '_' (ex: ""_MyDirectory"") are automatically excluded from the built Android APK's ""assets"" directory. Google did this intentionally with their ""aapt"" command line tool. We should change this behavior since iOS and Windows doesn't have this restriction. (Makes it less confusing too.)    For JavaScript files under these directories, they will only be excluded when building for the emulator since they're added to the APK's ""assets"" directory in this case. For ""device"" and ""production"" builds, the JavaScript will be correctly included, but this is because they're compiled/encrypted and not bundled under the APK's ""assets"" directory in this case.    *Steps to reproduce:*  # Create a Titanium ""Classic"" app.  # Copy the attached [^Test.zip] file's contents to your app.  # Build and run the app for the Android emulator.  # On app startup, a runtime error will occur where {{require()}} will fail to find the JavaScript file under directory ""_Test"".  # Build and run the app to an Android device. _(Note the emulator.)_  # On app startup, note that a window is displayed, but it fails to display an image. _(The JS files was loaded, but the ""_Test/AppcLogo.png"" did not get included into the APK.)_    *Cause:*  Google's command line tool ""aapt"" will automatically exclude the following from the APK's assets directory:  * .svn  * .git  * .ds_store  * .scc  * .CVS  * thumbs.db  * picasa.ini  * _<directory>    We can change this behavior by using ""aapt"" argument {{--ignore-assets}} and tell it not to omit directories with a leading underscore.  "
"TIMOB-26131","Bug","Android",3,"Android: SDK is wrongly adding core ""Google Play Services"" libraries as of 7.1.0","*Summary:*  As of Titanium 7.1.0, the SDK is wrongly including the following JAR files to all Android app builds...  * play-services-base-11.0.4.jar  * play-services-basement-11.0.4.jar  * play-services-location-11.0.4.jar  * play-services-tasks-11.0.4.jar    On a Mac, you can verify that the above libraries are wrongly being included by going to the following directory in Finder...  {{~/Library/Application Support/Titanium/mobilesdk/osx/7.x.x/android}}    These 4 libraries are not supposed to be there and it's preventing us from updating the ""ti.playservices"" module's Google Play Services libraries to a newer version (will cause a version conflict).    *Note:*  Titanum's core ""geolocation"" code needs a reference to the above mentioned JAR files to compile, but it doesn't require the JAR files to be included. This is because our ""geolocation"" code will dynamically detect the existence of the Google Play Services classes via reflection... and if they don't exist, it'll fallback to using the OS' location APIs instead. So, we need to exclude the Google Play Services JARs when packaging the SDK."
"TIMOB-26130","Bug","Android",3,"Android: Fix compatibility with NDK 12+","- Recent optimizations prevent ABI compatibility with {{kroll-v8}}  - Remove specific optimization to allow compilation of Titanium SDK on NDK 12+"
"TIMOB-26129","Bug","iOS",1,"iOS: Migrate Ti.UI.WebView NSURLConnection usage to NSURLSession","We have migrated our networking code base to use NSURLSession in SDK 7.1.0 and it works good. Now that we drop iOS 8 support to move to iOS 9 as our new deployment target (TIMOB-26123), the only remaining deprecation warning is a NSURLConnection usage in the Ti.UI.WebView that is used to handle insecure connections for the ""ignoreSslError"" property. This should be migrated to NSURLSession as well."
"TIMOB-26133","Story","Android|iOS|Windows",0,"TiAPI: hasCompass should be a method, not a property","The ""hasCompass"" property should be deprecated and moved to the ""hasCompass()"" method like we do with every other ""hasXXX"" API, like ""hasLocationPermissions()"", ""hasCameraPermissions()"", etc."
"TIMOB-26140","Story","Windows",13,"Windows: Move 2DMatrix and 3DMatrix to Matrix2D and Matrix3D","We need to rename our Ti.UI.2DMatrix and Ti.UI.3DMatrix to non-numeric proxies. This is important for the following components:    - ES6 imports (e.g. Ti.ES6)  - Angular support  - View support"
"TIMOB-26139","Bug","Windows",13,"Windows: Unable to build to device when using Windows SDK 15063 and newer tooling is installed","I am unable to build applications to windows device.    *Steps to reproduce*  # Create a mobile application   # Build to device {{appc run -p windows -T wp-device -l trace}}    *Log and Error*  https://gist.github.com/longton95/62ab044c898b31ef92f35048cb72d735    *Log and Error with --deploy-type production flag*  https://gist.github.com/longton95/320cb804efbfee3f3b1c25029bc72856    "
"TIMOB-26138","Improvement","Android|TiAPI",13,"Android: Cannot use a module when using a listview childtemplates","The issue is that I cannot use the styled label module that Appcelerator built in a ListView.  The type for the ChildTemplates is expecting a string and cannot recognize the module.  Please Advise."
"TIMOB-26137","Story","Android|iOS",8,"TiAPI: Move 2DMatrix and 3DMatrix to Matrix2D and Matrix3D","We need to rename our Ti.UI.2DMatrix and Ti.UI.3DMatrix to non-numeric proxies. This is important for the following components:    - ES6 imports (e.g. Ti.ES6)  - Angular support  - View support"
"TIMOB-26142","Story","Android|iOS",0,"TiAPI: Deprecate Ti.XML in favor of standalone module","Our Ti.XML namespace has been around a while now. Nowadays, most of the common-used API's are JSON-based and based on the usage reports, there are not many devs left using this API inside the core. But still, it is still included, with it's 37 files. Removing it would mean a huge compile time bump, so it should be deprecated and moved to a standalone module, like we recently did with Ti.Yahoo."
"TIMOB-26145","Improvement","Windows",5,"Windows: Improve File.getDirectoryListing() performance in Resources directory","*Summary:*  On Windows, accessing files/directories under ""Resources"" is slower than it should be. These files are stored within the APPX where a list of file paths from ""assets"" can be easily extracted... which should make it faster than storage access.    *Test:*  Run the below code to fetch a listing of all files under the ""Resources"" directory. Observe the log for the duration of this function.      *Recommended Solution:*  An Windows APPX is really a zip file. We should open the APPX as a zip file and fetch/store all zip entries referencing files under the ""assets"" directory. This way we can have fast hash table lookups when doing existence checks and fetching directory listings.  "
"TIMOB-26144","Improvement","Android",5,"Android: Improve File.getDirectoryListing() performance in Resources directory","*Summary:*  On Android, accessing files/directories under ""Resources"" is slower than it should be. These files are stored within the APK where a list of file paths from ""assets"" can be easily extracted... which should make it faster than storage access.    *Test:*  Run the below code to fetch a listing of all files under the ""Resources"" directory. Observe the log for the duration of this function.      *Results:*  For a project have about 160 files under ""Resources"", I get the following results...  * Android 4.1 Emulator: 80 ms  * Galaxy Nexus (Android 4.1): 70 ms  * Amazon Fire HD 8 (7th Generation): 19 ms  * Pixel XL (Android 8.0): 3 ms    *Recommended Solution:*  An Android APK is really a zip file. We should open the APK as a zip file and fetch/store all zip entries referencing files under the ""assets"" directory. This way we can have fast hash table lookups when doing existence checks and fetching directory listings.  "
"TIMOB-26150","Bug","Windows",13,"Windows: Scale Transform  Events( source.id) is still `overlay`","Hello !  We was able to test the `source.id` of the events [TIMOB-26072|https://jira.appcelerator.org/browse/TIMOB-26072] with SDK 7.3.0.v20180618182516 as according to this https://github.com/appcelerator/titanium_mobile_windows/pull/1249 it had been solved. For the most part, the problem seemed resolved till I tried on our Application.    We created another minimal, complete, and verifiable sample that demonstrates the issue. Please find it attached.    In such App, you will see that if you click on the blue section a little bit below the Alloy controller, the source.id is still `overlay`. Simply removing `slidingView.addSomething(controllerview);` from index.js ""solves"" the issue but, of course, no controller gets added.      Test SDK :  7.3.0.v20180618182516    "
"TIMOB-26149","Bug","Android",3,"Android: Ti.Filesystem.File#getDirectoryListing() does not return null for file/non-existent directory","According to our docs, and our iOS behavior - if Ti.FIlesystem.File#getDirectoryListing() is called on a file or a directory that does not exist, it should return null. On Android it returns an empty array."
"TIMOB-26151","Bug","Android",2,"Ti.Platform.id not working on Android in 7.2.0.GA (works on 7.1.1.GA)","I just tried upgrading to Ti 7.2.0.GA and found that Ti.Platform.id is returning null on Android. It works when reverting back to 7.1.1.GA. And it works on iOS.    When using 7.1.1.GA `alert(Ti.Platform.id);` returns a string (as expected).    When using 7.2.0.GA `alert(Ti.Platform.id);` returns ""null"".    Given 7.2.0 looks like it was mostly about GDPR, could it have been pulled out inadvertently? Or does the documentation need updating (http://docs.appcelerator.com/platform/latest/#!/api/Titanium.Platform-property-id)? Or am I missing something?"
"TIMOB-26152","Bug","Windows",8,"Windows: ScrollView doesn't return correct event source","{{ScrollView}} doesn't return correct source when event listener is added to the scroll view's parent.        Expected: When blue view is clicked, it should show ""view2"".  "
"TIMOB-26161","Bug","Android",5,"Android: Activity Listening Broken on run-on-main-thread = true","Tested with a Pixel on Android 8.0 using a wireless keyboard. Build the app and you will see the OS logs appear. When a wireless keyboard is connected to the device via bluetooth it causes the app to soft reset on Android. I used     because I've had problems with the soft reset holding things in memory.    When    the listener works correctly. The app restarts and runs 'Start by OS' and 'Resume by OS'.    When    the listener does not fire the 'START' & 'RESUME' activity listener after the reset. You will notice this by the lack of error logs.  "
"TIMOB-26158","Bug","CLI|Windows",8,"Windows: Build fails with ENOENT error when using transpile","h5.Description    When enabling transpilation the build fails with the below error {{ENOENT: no such file or directory, mkdir' C:\Users\awam\.titanium\vsbuild\ticreateapp\bin\assets\Resources\node_modules'}}, I believe this is because it's trying to copy to the wrong place.    h5.Steps to reproduce    # Enable transpilation in the tiapp.xml {{<transpile>true</transpile>}}  # Build the project    h5.Actual    Above error thrown    h5.Expected    No error"
"TIMOB-26162","Bug","iOS",0,"iOS: Animation is not working when the app window is opened from the background.","*Issue Description:*  Animation is working fine if application is in foreground, but if we launch the app from background, animation is not working on iOS using ti SDK 7.2.0.GA, 7.0.2.GA. App just freezes. On android, it works as expected.     *Test Code:*  *index.xml*      *index.js*      *index.tss*      *Steps to reproduce:*  Run the test code.  Observe that animation is working.  Keep the app in background.  Launch the app from background again and observe that animation does not work    *Expected:*  Animation should work when app is launched from background.    *Actual:*  Animation does not work    *Test log:*      Dropbox link for animation POC:  https://www.dropbox.com/s/pr2ua7ndz93pzhf/ProgressbarPOC.zip?dl=0    "
"TIMOB-26160","Bug","iOS",0,"iOS: ScrollableView +  run-on-main-thread - views dont render until scroll when re-adding views","When enabling  ScrollableView does not render views when re-adding views to the ScrollableView until you scroll a bit then they suddenly render.    When removing `run-on-main-thread` it works just fine.    Steps to reproduce:  1. Create new alloy project  2. In your index.js add the code below  3. Build to ios simlulator  4. Scroll to see everything is working   5. Click on re-add views button - See that views are now all white / not rendered  6. Scroll left or right and see that the views then render  7. Remove run-on-main-thread from tiapp.xml and build and see that everything works fine.      "
"TIMOB-26159","Bug","Windows",8,"Windows: File.getDirectoryListing() returns empty array for file or non-existent directory.","Windows: {{File.getDirectoryListing()}} returns empty array for file or non-existent directory.        Expected: {{null}} should be returned for file or non-existent directory."
"TIMOB-26167","Bug","Android",3,"Android: Cannot edit TextField/TextArea while in a ScrollView as of 7.3.0","*Summary:*  As of Titanium 7.3.0 (not released yet), Android's TextField/TextArea view cannot be edited while they're in a ScrollView. When tapping on them, they immediately drop the focus.    This is not an issue in Titanium 7.2.0. I've confirmed it.    *Steps to reproduce:*  # Create a classic app with the below code targeting Titanium 7.3.0.  # Build and run on Android.  # Tap on a TextArea.  # Notice that the virtual keyboard does not appear. You are unable to edit it.  # Scroll down to the bottom.  # Tap on a TextField.  # Notice that the virtual keyboard does not appear. You are unable to edit it.        "
"TIMOB-26165","Bug","iOS",0,"iOS: Requiring a JSON file that contains single quotes throws error","h5.Description    When requiring a JSON file where a value contains a single quote an error like below is thrown, this works fine on Windows/Android        *Workaround*  Read the file in like {{JSON.parse(Ti.Filesystem.getFile('file.json').read())}}      h5.Steps to reproduce    # Add the below into a JSON file under your project    # Add a require statement into your code that requires the file    h5.Actual    Error like the above is thrown    h5.Expected    File should be imported"
"TIMOB-26164","Bug","iOS",0,"iOS: TableView + run-on-main-thread - insertRowAfter directly after updateRow causes error / race crash","When enabling    and using TableView, if one runs insertRowAfter directly after updateRow the app will throw the error below or cause race crash with no error.    Error:       Steps to reproduce:  1. Create new alloy project  2. In your index.js add the code below  3. Build to ios simlulator  5. Click on ""Update + Add"" button  7. Remove run-on-main-thread from tiapp.xml and build and see that everything works fine.    PS....when adding the setTimeout you will see that it works      "
"TIMOB-26172","Bug","Android",3,"Android: ""focus"" and ""blur"" events bubbles to parent views when it shouldn't","*Summary:*  A view's {{focus}} and {{blur}} events are not supposed to bubble up to the view's parents according to our documentation here...  https://docs.appcelerator.com/platform/latest/#!/guide/Event_Handling-section-src-29004896_EventHandling-Bubblingandnon-bubblingevents    On Android, they do bubble up. This can cause confusion since these events will bubble up to the window which use the {{focus}} and {{blur}} events to indicate if the window is active, not if it has gained/received input focus.    This is not an issue on iOS.    *Steps to reproduce:*  # Build and run the below code on Android.  # If the TextField has the focus, then tap on the ""Remove Focus"" button.  # Clear the Android log.  # Tap on the ""Set Focus"" button.  # In the log, notice that the TextField focus event's ""bubbles"" property is set true. This is wrong.  # In the log, notice the Window received a focus event after the TextField did. This is wrong.  # Tap on the ""Remove Focus"" button.  # In the log, notice that the TextField blur event's ""bubbles"" property is set true. This is wrong.  # In the log, notice the Window received a blur event after the TextField did. This is wrong.        *Expected Result:*  The {{focus}} and {{blur}} events should not not bubble. Their {{bubbles}} property should be {{false}} and the parent window should not have received the TextField's events.    *Work-Around:*  Set the {{focus}} and {{blur}} event's {{cancelBubble}} property to {{true}} to prevent the event from propagating up the view hierarchy.    "
"TIMOB-26173","Improvement","Android|CLI",3,"Android: Add the Android Studio default SDK/NDK install paths to the Android lookup","h5.Description    Currently if you install the Android SDK through Android Studio you have to add the path in your Titanium config (however we may also find it if you set the env vars, or add the build/platform tools to the path). It would be nice if the Android Studio default install location could be added to the lookup so that it can work a bit more seamlessly, and for some parity with the daemon.    The default locations are    {{~/Library/Android/Sdk}} and {{%LOCALAPPDATA%/Android/Sdk}}, in that folder also is where the NDK installs to under {{~/Library/Android/Sdk/ndk-bundle}} which we should handle also"
"TIMOB-26182","Bug","Android",3,"An exception is raised when a remote image URL is set on an ImageView on some Android devices","On one of our Android device, a native exception is raised when we set a remote URL on an ImageView (no problems with local URLs). Visually, no remote images are displayed on the app. If we turn on the storage permission on the device for our app, the images are displayed. This error happens only on SDKs 7.1 and more.    Here's the exception :       "
"TIMOB-26181","Bug","Android",3,"Android: Application throws exception after close on 7.4.0","- Due to fixing lifecycle events, an exception will be thrown when the events are fired after the KrollRuntime has been destroyed."
"TIMOB-26179","Bug","iOS",3,"iOS: Property check on proxy always returns true","Checking for property existence on Titanium proxy objects always returns true, ignoring if a property really exists or not. Various aspects of Vue/Angular and module bundling with Rollup/Webpack rely on proper existence checks for properties on our proxies.    *Steps to reproduce the behavior*  Run the following example code in a Titanium app which compares the behavior to a plain JavaScript object.      *Actual behavior*  The property check returns true for non-existing properties on the Ti.UI.Window object.    *Expected behavior*  The property check should return true only for existing properties and false otherwise."
"TIMOB-26178","Bug","Windows",8,"Windows: TextField/TextArea should not receive focus by default when a window is opened","h2. Behavior    TextField should not receive focus right after Windows is opened to match iOS's behavior.    h2. Test case        Expected: No focus log should be shown after app launched and TextField should not have focus.  "
"TIMOB-26177","Bug","Windows",8,"Windows: ""focus"" and ""blur"" events bubbles to parent views when it shouldn't","*Summary:*  A view's {{focus}} and {{blur}} events are not supposed to bubble up to the view's parents according to our documentation here...  https://docs.appcelerator.com/platform/latest/#!/guide/Event_Handling-section-src-29004896_EventHandling-Bubblingandnon-bubblingevents    On Windows, they do bubble up. This can cause confusion since these events will bubble up to the window which use the {{focus}} and {{blur}} events to indicate if the window is active, not if it has gained/received input focus.    This is not an issue on iOS.    *Steps to reproduce:*  # Build and run the below code on Windows.  # If the TextField has the focus, then tap on the ""Remove Focus"" button.  # Tap on the ""Set Focus"" button.  # In the log, notice that the TextField focus event's ""bubbles"" property is set true. This is wrong.  # In the log, notice the Window received a focus event after the TextField did. This is wrong.  # Tap on the ""Remove Focus"" button.  # In the log, notice that the TextField blur event's ""bubbles"" property is set true. This is wrong.  # In the log, notice the Window received a blur event after the TextField did. This is wrong.        *Expected Result:*  The {{focus}} and {{blur}} events should not not bubble. Their {{bubbles}} property should be {{false}} and the parent window should not have received the TextField's events.  "
"TIMOB-26184","Bug","iOS",1,"iOS: Timer functions can not be re-assigned","The callbacks for timing function like {{setTimeout}} or {{setInterval}} are bound with the readonly flag and can not be reassigned. This is contradictory to other JS environments like the Web or Node where this is very much possible. "
"TIMOB-26185","New Feature","iOS",13,"Hyperloop: iOS - Support Carthage","There has been kind of a shift in deps-management on iOS lately. Some major devs are moving to Carthage to have more control over their deps and some new packaged are even not CocoaPods available so far, like [Flight-School/Money|https://github.com/Flight-School/Money].    We should consider supporting the Carthage build as an alternative to CocoaPods...and silently start thinking about the Apple Swift Package Manager as well... :-)"
"TIMOB-26196","Improvement","iOS",0,"iOS: Move Ti.Media microphone related APIs to AVAudioRecorder and remove 3rd-party library","iOS should be using AVAudioRecorder for mic recording related APIs, but is using a very, very old 3rd-party library: [SCListener|https://github.com/stephencelis/sc_listener]. Full affected list of API's:  - startMicrophoneMonitor()  - stopMicrophoneMonitor()  - peakMicrophonePower (property)  - averageMicrophonePower (property)    This does not have to be a breaking change as the newer API's are pretty solid to use. We should also add an example for this into our KitchenSink (cc [~topener])"
"TIMOB-26189","New Feature","Windows",8,"Windows: add buttonClickRequired  method on Ti.UI.AlertDialog","Adds the {{buttonClickRequired}} property to {{Ti.UI.AlertDialog}}, which controls whether the dialog can be cancelled by clicking the system back button. Defaults to `true`.      "
"TIMOB-26204","Bug","Android",1,"Android: TransformAfterLayout NullPointerException in Ti.Animation","  https://github.com/appcelerator/titanium_mobile/blob/0a7dce77bb4fbdd21370512800a61542670e6006/android/titanium/src/java/org/appcelerator/titanium/view/TiUIView.java#L549"
"TIMOB-26201","Story","Android|iOS",13,"TiAPI: Remove all deprecated API's (<= SDK 7.0)","There are many API's (321 in total) that are currently deprecated in the SDK. All API's that have been deprecated before 5.x (e.g. 3.2, 4.0 etc) should go away these days. Some major examples:    - Titanium.Android.Calendar -> Ti.Calendar (since 3.2.0)  - PENDING_INTENT_FOR_* (since 2.0.0)  - Android geolocation legacy mode (since 2.0.0)  - Ti.Network.SOCKET_* (since 1.7.0)    We could likely save a good amount of compile time for both docs-gen and the SDK itself by removing this.    (Edit by Hans: Renamed the ticket to handle all deprecations, not just Ti.Calendar.Event)."
"TIMOB-26209","Bug","CLI|iOS",5,"CLI: If any Xcode installs don't have EULA accepted (even one not being used), build won't work","On our CI build machines we have Xcode 8.1, 9, and 10 beta 3 installed. It seems that accepting the license for 10 beta 3 and 8.1 are mutually exclusive (i.e. if I accept 10 beta 3's license using xcodebuild -license accept, it causes Xcode 8.1 xcodebuild -checkFistLaunchStatus to return a non-zero exit code; and vice versa).    When doing ti info or a ti build, this ends up complaining with an error about the Xcode EULA not being accepted - even though in this particular case we have Xcode 10 beta 3 selected and what we are going to use for the build set up properly.    The CLI should be able to determine if the Xcode version we're using is ok and mark the other Xcode EULA acceptance as a warning instead of an error that stops the build."
"TIMOB-26207","Bug","CLI",1,"CLI: Titanium CLI errors with winston.Logger is not a constructor","h5.Description    When using the titanium cli from master branch, the cli errors out with the below        This is because of the upgrade to winston 3.0.0, we can either downgrade to 1.1.2 (the old version), or fix the usage. The former is probably safer    h5.Steps to reproduce    # Download the git repo for titanium cli  # run {{npm install}}  # run {{./bin/titanium}}    h5.Actual    Above error    h5.Steps to reproduce    CLI should work"
"TIMOB-26206","Bug","CLI",1,"CLI: Network check errors with 502 on accessing http://preview.appcelerator.com","h5.Description    When running {{[appc] ti setup check}} the network section shows errors as http://preview.appcelerator.com returns a 502, we should either fix this, or remove/replace the url from the list. I prefer the latter, I think we could replace to access {{https://preview.appcelerator.com/appc-studio}}    h5.Steps to reproduce    # Run {{appc ti setup check}}    h5.Actual    The following error is shown        h5.Expected     No error should be shown"
"TIMOB-26211","Bug","iOS",5,"iOS: Percentage based layout rounds floating widths/heights incorrectly","*Summary:*  iOS will incorrectly wrap views within a horizontal layout if their percentage based widths total to 100%. This is not an issue on Android.    *Steps to reproduce:*  # Build and run  [^HorizontalPercent50x50Test.js] on iOS.  # Note that the left view width is 50% and the right view width is 50%.  # Observe the layout.    *Result:*  On iOS, the right view is wrongly wrapped to the next row.   !HorizontalPercent-iOS-bad.png|thumbnail!     *Expected Result:*  Both views are expected to be on the same row since they both have a width of 50%. Android does this correctly as seen here...   !HorizontalPercent-Android-good.png|thumbnail!     *Work-Around:*  Use {{Ti.UI.FILL}} to the right-most view's {{width}} property instead of using a percentage.    *Note:*  The attached [^HorizontalFillTest.js] provides a more complex horizontal layout test. iOS has 2 issues with this as well:  * The {{Left (50%) | Right (50%)}} test shows that the views are wrongly shrunk to 25% width instead of 50%.  * The yellow {{(75%)}} label does not have the same width as the {{(25%)|(50%)}} labels above it.    iOS looks like this...   !HorizontaFill-iOS-bad.png|thumbnail!     Android handles it correctly as can be seen here...   !HorizontalFill-Android-good.png|thumbnail!   "
"TIMOB-26210","Improvement","Windows",8,"Windows: Compler warnings PRI249: 0xdef00520 - Invalid qualifier","Currently lots of compiler warnings being produced when building app, seems like it happens only on 7.4.0 master branch. Although it does not prevent app building we want to suppress compiler warnings whenever possible.    "
"TIMOB-26217","Bug","iOS",1,"iOS: File methods isFile() and isDirectory() are missing for encrypted assets","*Summary:*  On iOS, when loading an encrypted asset such as ""app.js"" via {{Ti.Filesystem.getFile()}}, the returned {{File}} object is missing methods {{isFile()}} and {{isDirectory()}}. Attempting to call these methods will cause JavaScript runtime error.    This is an issue for iOS ""production"" builds and ""test"" builds for device.  This is not an issue for iOS Simulator builds since JS files are not encrypted.  This is not an issue on Android.    *Steps to reproduce:*  # Create a Titanium project with the below code.  # Build and run to an iOS device.  # Notice that the app crashes on startup.  # Build and run to the iOS simulator.  # The {{isFile()}} and {{isDirectory()}} methods work and are correctly logged.        *Cause:*  Our {{TiFileSystemBlobProxy.m}} code is missing the {{isFile()}} and {{isDirectory()}} methods.  "
"TIMOB-26216","Bug","iOS",0,"iOS CLI: Incremental build does not remove unencrypted JS files when switching deploy type from ""development"" to ""test""","*Summary:*  There is an iOS incremental build issue where if you build for the iOS Simulator first, then an iOS device afterwards, the resulting iOS app bundle will contain both encrypted {{.js}} files an unencrypted plain text {{.js}} files. Builds for device (ie: deployment type ""test"" and ""production"") must encrypt all {{.js}} files.    This is *+not+* an issue with production/release builds.  This is only an issue with debug builds.    *Steps to reproduce:*  # On Mac, open a ""Finder"" window.  # Go to an existing Titanium project directory.  # Delete its ""build"" directory if it has one.  # Open a ""Terminal"" window.  # In the terminal, {{cd}} to the same project directory.  # Run: {{appc run -p ios -D development --build-only}}  # Wait for the build to finish.  # Run: {{appc run -p ios -D test --build-only}}  # Wait for the build to finish.  # In ""Finder"", go to directory: {{./build/iphone/build/Products/Debug-iphonesimulator}}  # Right click on the app bundle file and select ""Show Package Contents"" from the popup menu.    *Result:*  The app bundle for the ""test"" build contains plain text {{.js}} files such as ""app.js"" when it shouldn't. A ""test"" build must encrypt all {{.js}} files.    *Notes:*  * This is an incremental build issue. The app bundle includes both encrypted {{.js}} files and plain text {{.js}} files from the previous ""development"" build.  * I'm not sure if the reverse is true. When doing a ""test"" build first and then doing a ""development"" build, the generated {{ApplicationRouting.m}} does not contain any assets."
"TIMOB-26218","Improvement","Android",1,"Android: Resolve Veracode string equality warnings","*Summary:*  The Veracode scanner has sighted the following string equality/comparison issues in Titanium's Android Java code...    ||Class||Line||Description||  |MediaModule.java|729|Member variable {{intentType}} should use {{equals()}} instead of {{==}}|  |TiBlob.java|263|Member variable {{mimeType}} should use {{equals()}} instead of {{==}}.|  |TiBlob.java|421|Member variable {{mimeType}} should use {{! equals()}} instead of {{!=}}.|  |TiCameraActivity.java|413|Member variable {{mediaType}} should use {{equals()}} instead of {{==}}.|  |TiCameraActivity.java|682|Member variable {{mediaType}} should use {{equals()}} instead of {{==}}.|    Note that there are no bugs in the above code.    String reference equality happens to work for the way it's written, but we should change to use {{equals()}} to avoid potential bugs in the future.  "
"TIMOB-26222","Bug","Android",3,"Android: App crashes when trying to re-open a closed window ","When trying to re-open a window previously closed the app crashes. This didn't happen on 7.2.0.GA.    As per example above, click the button, close the window then click the button again.        Question is. Which behaviour is the expected behaviour. Not being able to reopen a window, or being able to reopen a window"
"TIMOB-26221","Story","iOS",1,"iOS : ScrollView content scrolling vertically in bigger iPads when using percent-based layout","Hello,    The customer is using the scrollView with Horizontal layout and adding the required UI elements to a main view and adding it back to the actual scrollview. Even after fixing the height of scrollView equal to that of main view inside it, its still scrolling vertically which is not an expected behaviour.     The sample code to replicate the issue in iPAD pro 12.9 inch (2nd generation) and other bigger iPAD's.     *Sample code:*      *Test Environment:*  Appcelerator Command-Line Interface, version 7.0.4  SDK: 7.2.0.GA, 7.1.1 GA  iOS device: iPAD pro 12.9 inch (2nd generation)    Thanks"
"TIMOB-26219","New Feature","Windows",1,"Windows :  Implement Ti.UI.WebView.mixedContentMode ","Android 5 (21) adds WebSettings.setMixedContentMode to control how mixed content is handled (https that contains inlined http).  Need to add access to this.  https://developer.android.com/reference/android/webkit/WebSettings#setMixedContentMode(int)    Description:   Images doesn't load in webview if they are hosted on http server!  E.g. if you assign webview url property to https://blogs-dev.vmware.com/vov/authors/  Some images get load properly but some which are hosted on http server or have http://xyz path they are not getting loaded.    Test code:      Error Log:      Test Environment:       Thanks "
"TIMOB-26227","Story","Android",8,"Android: Remove kroll-thread","The kroll thread was deprecated in SDK 7 and should be removed in 8.    This means that the ""tiapp.xml"" property ""run-on-main-thread"" will be ignored and will be internally hard-code to {{true}}.  "
"TIMOB-26225","Bug","Android",8,"Android: TableView leaks memory when overwriting ""data"" property","*Summary:*  Replacing a {{TableView}}'s ""data"" array property causes a memory leak where the previous array of rows do not get garbage collected.    *Steps to reproduce:*  _(Below requires an Android emulator and Chrome web browser to be installed.)_  # Create a ""classic"" Titanium project with the below code.  # Go to the project directory at the command line.  # Enter: {{appc ti build -p android --debug-host /127.0.0.1:51388}}  # Wait for the app to launch. It'll ""hang"" on the splash screen.  # In the log, copy the the ""chrome-devtools://devtools/bundled/inspector.html?..."" URL.  # Open the Chrome browser and paste the copied URL.  # In Chrome, select the ""Memory"" tab.  # Select the ""Allocation instrumentation on timeline"" radio button.  # Click the ""Start"" button.  # Select the ""Sources"" tab.  # Click the ""Resume script execution"" toolbar button in top-right corner. Looks like: [>]  # Wait for the Titanium app to display a TableView.  # Click the ""Reload"" button in the bottom-right corner of the app.  # Click the Android back button.  # In Chrome, select the ""Memory"" tab.  # In Chrome, top-left corner, click the ""Stop recording heap profile"" toolbar button.  # Under the ""Constructor"" column, expand the ""Label"" tree.  # Note that 50 Labels are listed under it. These have not been garbage collected.        *Notes:*  * If a {{TableView}} is garbage collected, then its rows are correctly garbage collected as well. This is only an issue when overwriting the rows via the ""data"" property.  * This is an issue for Alloy since its generated code will replace the {{TableView}} ""data"" array any time the model changes via a ""fetch"", ""destroy"", ""change"", ""add"", ""remove"", or ""reset"" event.  "
"TIMOB-26224","Improvement","Android",3,"Android: Modify ""OptionDialog"" to display a list of normal buttons","*Summary:*  The {{Ti.UI.OptionDialog}} currently displays a vertical list of radio buttons, but none of the radio buttons are ever enabled if property {{selectedIndex}} is not set. This is not a good interface. Especially if the {{buttonNames}} property is not set as well.    It would be better to display a vertical list of normal button like how it works on iOS.        We should only use radio buttons if the {{buttonNames}} property is also set. In which case, tapping a radio button should not automatically close the dialog. Doing it this way, we'll be following Google's material design guideline here...  https://material.io/design/components/dialogs.html#usage  "
"TIMOB-26228","Bug","Android",0,"Android: Cannot get current activity in native module when using 7.3.0+","I have a module where I want to configure an SDK by passing the current activity to it automatically  on app start. We have the {{onCreate}} method via the {{@Kroll.onCreate}} annotation, but neither of the following methods worked there:  - {{getActivity()}} (because of the static context)  - {{TiApplication.getAppRootOrCurrentActivity()}} errors:   {quote}  No valid root or current activity found for application instance  {quote}  - TiApplication.getInstance().getCurrentActivity(): Same as above    I also tried invoking them in the constructor of the module but that did not work either. I am trying to prevent a manually {{initialize()}} call from the module, so I am wondering if there is a better approach here."
"TIMOB-26235","New Feature","Windows",13,"Windows : Support KEYBOARD_TYPE_NUMBER_PAD / KEYBOARD_TYPE_NUMBERS_PUNCTUATION","Hello!  Can you please let me know how to show numeric keyboard on windows app on textbox or TextField?  Titanium.UI.KEYBOARD_TYPE_NUMBERS_PUNCTUATION is only available for Android and iOS.  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI-property-KEYBOARD_TYPE_NUMBERS_PUNCTUATION    Thanks "
"TIMOB-26239","Bug","Android",3,"Android: Window leak in Ti.UI.currentWindow","Steps to reproduce:  1. Create application, put attached files in {{Resources}}  2. Run {{ti build}} with {{--debug-host localhost:8990}}  3. Open {{chrome-devtools://}} link in Chrome  4. Resume script execution, wait for app load  5. In memory tab, press ""Take snapshot""  6. In app press ""OPEN 2ND WINDOW""  7. In memory tab, press ""Take snapshot""  8. In app press ""OPEN 3RD WINDOW""  9. In memory tab, press ""Take snapshot""  10. In app press back button  11. In memory tab, press ""Take snapshot""  12. In app press back button  13. In memory tab, press ""Take snapshot""    Now you got five snapshots.  1. Select ""Snapshot 2""  2. Change ""Summary"" to ""Comparison"", put ""Window"" in ""Class filter""  3. Expand ""Window"", observe one new ""Window"" instance, remember @id  4. Select ""Snapshot 5"", put ""Window"" in ""Class filter""  5. Expand ""Window"", observe three instance of ""Window""  6. Select ""Window"" instance with @id from (3)  7. Observe ""Retainers"" below"
"TIMOB-26242","Bug","Android",5,"Android: Change in memory behavior","[~jquick], [~gmathews]  I noticed a change in the memory management after the recent changes on it that I think deserves some attention. Until 7.2.0.GA the sample app I have attached had this behavior.    1. Open the application.  2. Click ""Remove"".  3. Force GC through the Android profiler tool.  4. Click ""Add again"".    The colorized views are successfully added again to the window.    After the merge of: https://github.com/appcelerator/titanium_mobile/pull/10174 the same sequence results in a crash (attached in the ticket). That happens because the Views are garbage collected.  The same goes with Ti.Map module when AnnotaionProxies are released (that happens when they are removed from the MapView) for example.  What bothers me is that this change may cause problems in applications that are relying on keeping the references to proxies in the same context after heavy memory usage (one that can cause the system to garbage collect). And I think if that is the case for Proxies in general we may have that problem in a variety of usages.    How do you think we should go about that?    Note: I haven't matched the position of the views to be related to the device's screen. I have been testing on Pixel emulator.    P.S. We talked with Joshua about that earlier this week and at that moment we had a upcoming changes in the most recent PR for memory management. I have tested today with it and the described change in behavior is still present."
"TIMOB-26240","Improvement","Android",1,"Android: Remove harmless activity errors/warnings logged on startup","*Summary:*  A Titanium 7.3.0 built Android app will log the following messages on startup.        These errors/warnings are actually harmless noise triggered by Titanium when loading its core modules (ie: {{Ti}}, {{Ti.UI}}, {{Ti.Platform}}, etc.) when the Android {{Application}} instance gets created, but before an {{Activity}} has been created. There is no {{Activity}} to fetch at this point in the code and the modules already correctly handle {{null}} and will fetch a valid {{Activity}} later when needed.    *Recommended Solution:*  It's the responsibility of the caller to handle the null case, not the method.    So, remove the {{""Application instance no longer available.""}} log message in {{AndroidModule.getCurrentActivity()}} here...  https://github.com/appcelerator/titanium_mobile/blob/7_3_X/android/modules/android/src/java/ti/modules/titanium/android/AndroidModule.java#L580    And remove the {{""No valid root or current activity found for application instance""}} log message from {{TiApplication.getRootOrCurrentActivity()}} here...  https://github.com/appcelerator/titanium_mobile/blob/7_3_X/android/titanium/src/java/org/appcelerator/titanium/TiApplication.java#L297    *Side Note:*  The {{TiApplication.getInstance()}} call can never return {{null}}. The Android {{Application}} class is always the 1st object to be created within the app and is guaranteed to exist for the lifetime of the app. There is no point in doing a {{null}} check on it. Nor do we need to keep a weak reference to it within {{TiApplication}}. A normal strong reference will suffice.  "
"TIMOB-26251","Bug","Android",1,"Android: TableView with remote image crash","Moved from TIMOB-26225 into separate issue.    Test app:        Steps to reproduce:  1. Build app with {{<property name=""run-on-main-thread"" type=""bool"">*false*</property>}})  2. Run app  3. Double click on ""Reload"" button    [Explanation|https://jira.appcelerator.org/browse/TIMOB-26225?focusedCommentId=439536&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-439536]    Affects any build with [TIMOB-26202] changes.      refs [TIMOB-26225], [TIMOB-26202]"
"TIMOB-26250","Improvement","Android",1,"Android: Allow activity ""android:launchMode"" attribute to be set in ""tiapp.xml""","*Summary:*  In Titanium 6.1.0, our build tools ignore the activity ""android:launchMode"" setting in ""tiapp.xml"" and log the following build warning. This was to avoid confusion over how Google's ""singleTask"" feature works and to favor Titanium's ""intent-filter-new-task"" property instead.  {code}  [WARN] : android:launchMode should not be used. Ignoring definition from <ActivityName>  {code}    We should change the behavior to allow developers to set ""android:launchMode"" again, but keep the build warning. Some developers already know how to deal with the repercussions of the ""singleTask"" setting where all child activity windows are automatically closed upon app resume.    *Test:*  # Add the below Android xml settings to your ""tiapp.xml"" file.  # In the XML, change the {{<activity>}} element's ""name"" attribute's {{<ProjectName>}} part to the name of your Titanium project where only the 1st letter is capitalized. (Ex: ""MyProject"" would become ""Myproject"".)  # Build the application for Android.  # Note the build warning that appears regarding ""android:launchMode"".    *tiapp.xml*  {code:xml}  <?xml version=""1.0"" encoding=""UTF-8""?>  <ti:app xmlns:ti=""http://ti.appcelerator.org"">   <android xmlns:android=""http://schemas.android.com/apk/res/android"">    <manifest>     <application>      <activity android:name="".<ProjectName>Activity"" android:launchMode=""singleTask"">       <intent-filter>        <action android:name=""android.intent.action.MAIN""/>        <category android:name=""android.intent.category.LAUNCHER""/>       </intent-filter>      </activity>     </application>    </manifest>   </android>  </ti:app>  {code}  "
"TIMOB-26253","Bug","Android",3,"Android: NotificationManager.notify() will crash while screen is off and if app is missing WAKE_LOCK permission","*Summary:*  As of Titanium 6.2.0, posting a local notification while the screen is off will cause the app to crash if the app does not have the {{WAKE_LOCK}} permission.    Titanium should not require the {{WAKE_LOCK}} permission.    *Steps to reproduce:*  # Connect an Android device to your machine.  # Turn the Android device's screen off.  # Build and run the below code on that Android device.  # View the log and notice an exception was printed on startup.  # Turn on the device's screen and view the app. Notice an exception dialog was displayed.        *Result:*  The following exception gets logged...      *Expected Result:*  App should not require the {{WAKE_LOCK}} permission. Java code should check if app has {{WAKE_LOCK}} before attempting to use it. If the permission is missing, then avoid it and do not turn on the screen.    Note that many Android users tend to avoid apps that use the {{WAKE_LOCK}} permission since they're considered to waste battery life. This permission is a dirty word in the Android world and is best avoided if possible.    *Cause:*  This is an issue in Titanium's Java {{NotificationManagerModule.notify()}} method...  [NotificationManagerModule.java#L137|https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/android/src/java/ti/modules/titanium/android/notificationmanager/NotificationManagerModule.java#L137]    The solution is to do the following:  * Check if {{WAKE_LOCK}} permission is defined in ""AndroidManifest.xml"" via the {{Context}} class before creating a wake lock.  * {{catch}} block should catch the {{Exception}} type to catch all exception.  "
"TIMOB-26267","Bug","LiveView",1,"LiveView: Calling ""liveview server stop"" causes exception, but stops connections","When using {{liveview server stop}} to stop all connections, the following error occurs:    It seems to error out, but after checking with {{liveview server status}}, they have been killed properly."
"TIMOB-26269","Bug","Android",1,"Android: Closing parent window closes current window as well","I am running into a strange situation in which the current window is closed when i call {{close()}} on the parent window. Is there a workaround for this? It works fine on iOS and is a common pattern for login/logout scenarios."
"TIMOB-26268","Improvement","iOS",0,"iOS: Make RefreshControl on ScrollView available on iOS < 10","Currently, we only support the {{refreshControl}} property on the Ti.UI.ScrollView for iOS 10+. We can support it for earlier versions as well:    {code:js}  var win = Ti.UI.createWindow({      backgroundColor: '#fff'  });    var nav = Ti.UI.iOS.createNavigationWindow({      window: win  });    var refreshControl =  Ti.UI.createRefreshControl();    refreshControl.addEventListener('refreshstart', function () {      setTimeout(function () {          refreshControl.endRefreshing();      }, 2000);  });    var scrollView = Ti.UI.createScrollView({      refreshControl: refreshControl,      layout: 'vertical'  });    scrollView.add([      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ top: 30, width: 300, height: 100, backgroundColor: 'red'}),      Ti.UI.createView({ height: 30 }),  ])    win.add(scrollView);  nav.open();  {code}"
"TIMOB-26270","Bug","Android|CLI",0,"Android: Cannot build anymore, ""ti info"" broken","Our Android setup is broken. Since the latest Android Studio update, I cannot see any emulators anymore and ""ti info"" is giving the following:    Not only is the note about ""upgrading to Ti SDK 3.2"" incorrect, outdated and confusing, but also the CLI thinks there are no issues although obviously no Android platform can be detected properly."
"TIMOB-26274","Bug","Android",3,"Android: Drawer hamburger menu disappears on click","While trying to get a reproducible case for memory-issues, I found another issue where when clicking the hamburger menu of a drawer layout will hide it and does not make it come back.     Test-Case:  {code:js}  var window = Ti.UI.createWindow({ backgroundColor: 'white', theme: 'Theme.AppCompat.NoTitleBar', exitOnClose: false });    var btn = Ti.UI.createButton({   title: 'Trigger'  });    btn.addEventListener('click', function() {   var window2 = Ti.UI.createWindow({  title: 'Test' });   var left = Ti.UI.createView({ backgroundColor: 'red' });   var center = Ti.UI.createView({ backgroundColor: 'blue' });     var button2 = Ti.UI.createButton({ title: 'Close'});   left.add(button2);     button2.addEventListener('click', function () {    drawer.closeLeft();    window.open();    window2.close();   })     var drawer = Ti.UI.Android.createDrawerLayout({    centerView: center,    leftView: left   });   window2.add(drawer);   window2.open();   window.close();  });    window.add(btn);  window.open();  {code}    *Work-Around:*  The solution is to set up the hamburger button on the ActionBar yourself like this...  {code:java}  window.addEventListener(""open"", function(e) {   var actionBar = window.activity.actionBar;   if (actionBar) {    actionBar.displayHomeAsUp = true;    actionBar.homeButtonEnabled = true;    actionBar.onHomeIconItemSelected = function(e) {     // Handle the hamburger button click here...    };   }  });  {code}    We document this here...  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Android.ActionBar  "
"TIMOB-26275","Story","Tooling",3,"TypeScript: Update Titanium typings to 7.3.0","The TypeScript typings for Titanium need to be updated for our latest SDK release 7.3.0"
"TIMOB-26279","Bug","Tooling",0,"ES6 transpile not working","Created a new app, added Transpile option to tiapp.xml and some sample ES6 code and when building I get:        Project:    https://www.dropbox.com/s/7e467yjzg4a8m1o/es6.zip?dl=1"
"TIMOB-26278","Improvement","Android",2,"Android: Added Ti.App event ""userinteraction""","In order to create a solution for https://jira.appcelerator.org/browse/TIMOB-13884, we're trying to capture all user interaction events.     The Android Activity has the onUserInteraction() method. The Activity has to throw events each time the onUserInteraction() is triggered.    https://developer.android.com/reference/android/app/Activity#onUserInteraction()"
"TIMOB-26286","Bug","Android",0,"Android: Using __dirname in app.js errors with Can't find variable: __dirname ","h5.Description    *This is not a regression occurs using 5.5.1.GA stack*    When using {{__dirname}} in an app.js file the following is thrown    *Using __dirname in any file other than app.js works*        h5.Steps to reproduce    # In your app.js add {{console.log(__dirname)}}  # Build for Android    h5.Actual result    The above error is thrown    h5.Expected result    __dirname should be able to be used in app.js file"
"TIMOB-26293","Bug","Android|CLI",1,"Android: node-titanium-sdk 0.6.0 doesn't wait for Genymotion cold boot in 7_3_X","The 7_3_X branch was bumped to version 0.6.0 of the node-titanium-sdk. When using that branch to boot a Genymotion emulator (v2.12.0) the first run isn't working anymore. A second run with a running emulator does properly boot an Android app.    Expected behaviour:  ---    ---    Current behaviour using (7.3.0.v20180809095942):  ---    ---"
"TIMOB-26295","Bug","Android",1,"Android: Listview with template causes a nullpointer on itemclick","When you click on a listitem, using a Listview with template, it causes a nullpointer.  It happens when you try to manipulate the items of a section.    *Test case:*    *index.xml*        -------------------    *index.js*      "
"TIMOB-26299","Bug","iOS",0,"iOS: Ti.Media.AudioPlayer test-suite crashes in some situations","It seems like our Ti.Media.AudioPlayer test-suite crashes in some situations. The crash report is attached and looks like being an issue with the KVO-observer we use to handle the AVPlayer API. I remember we had some issue with closing the audio-player and still listening to the KVO, so this may be similar."
"TIMOB-26298","Bug","Android|CLI",1,"Android 9: Cannot launch Emulator with API-level 28","When trying to boot an Android emulator with API-level 28 (Android 9), the build fails with the following error:    As a workaround, the emulator can be booted before and it works:  "
"TIMOB-26306","Improvement","Android",13,"Android: Support faster SDK builds with parallel execution '-j' on Windows","When building the Titanium SDK (ie: titanium_mobile) on Mac, the Android NDK will build the C/C++ library with the {{-j8}} command line argument. This enables ""parallel execution"" of up to 8 build tools to be ran in parallel, allowing for faster build times.    On Windows, this feature is purposely disabled due to file locking errors caused by dependency order and code generation issues in the make file. These issues should be resolved for faster build times on Windows."
"TIMOB-26314","Improvement","Android",3,"Android: Add ""versionCode"" to tiapp.xml template","Currently the default tiapp.xml doesn't include the versionName or versionCode in the manifest. It will always use versionNumber 1 and versionCode 1 in the AndroidManifest. This will lead to an error when a user uploads an update to the playstore and has to search the documentation or internet to find out where to make these settings.    Adding the versionNumber to the tiapp.xml will give the user a place to start. And by using the <version> number inside the versionName it will automatically stay in sync with the iOS version. Advanced users can still overwrite the versionName with a custom name like before by adding the parameter to tiapp.xml    Scenario:  * android:versionCode is exposed in the <manifest> block  * user creates an update and can increase the version code  * AndroidManifest will use the versionCode from the <manifest> block and the <version>  * if a user wants to have a different version number he can add android:versionName to the tiapp.xml (like he would do it today or already has) and it will overwrite the <version> string inside the AndroidManifest    Existing apps with a custom android:versionCode and android:versionName would still use those values.  New apps will use the new android:versionCode from <manifest> and the normal <version> number as android:versionName"
"TIMOB-26311","Improvement","Windows",8,"Windows: leverage extended execution restricted capabilities","Hello,    One a Windows App with Appcelerator which calls an asynchronous function on a .NET Core SDK which downloads extensive amounts of data and saves it directly on the App's AppData however, as per limitations from Windows 10, the App must be in the foreground for the whole execution.   This creates a problem because if the App gets minimized or it is unfocused while on FullScreenMode, this call will fail. There exists a few restricted capabilities in UWP that may help with this and I wanted to reach out whether these are supported on Ti SDK 7.3 for Windows 10 or whether there's a way to do this within the Titanium SDK.       The customer have tried adding         On the tiapp.xml file however, in the vsbuild folder's manifest these were removed. They also tried prefixing the Capability element with rescap but it failed to compile.    Please let us know if you need any more information.    Thanks"
"TIMOB-26310","Bug","iOS",1,"iOS: Crash on iOS 12 Beta","Taken from [this Slack thread|https://ti-slack.slack.com/archives/C03CVQX2A/p1534443895000100]:    We are trying to run app on iOS 12.0 Beta Version App crashes with Following Error Logs. Can Anyone direct me what is causing app to Crash.    "
"TIMOB-26308","Improvement","CLI",0,"Reduce splash screen image sizes","The current splash screen images are pretty big (in terms of kb's). They can be compressed without loosing quality"
"TIMOB-26307","Bug","iPad",1,"iOS (webView): text remains hidden behind the keyboard in iPad(landscape mode) when writing into text area within the webview.","*Issue description:*  I am opening the following URL in the webView. When I write into text area within the webView, the writing goes back under the keyboard.  https://lite.educode.ca/nativeexercise/59ef7ee6dfae4e3ea58b4d36/91ae5c31-254a-433b-a736-0a002b998829  This happens on iPad in landscape mode, doesn't happen in portrait mode.    *Steps to reproduce:*  1. Run the test code, webview will show the webpage.   2. Set the orientation to landscape.  3. In the editor area you can keep pressing enter and go on line 31 or more and write any text there you will find text going under the keyboard    *Test code:*    "
"TIMOB-26313","Bug","iOS",2,"iOS: accessibilityLabel doesn't get properly set on Ti.UI.TableView","While working through our Appium suite, I noticed that tests that relied on using the accessibility id/label for a table view ere failing. Using the Appium Desktop inspector, I see that the table view has no accessibility id assigned, though the code has set an accessibilityLabel.    I assume this is because the view gets attached async, so the code here does not attempt to set it: https://github.com/appcelerator/titanium_mobile/blob/master/iphone/Classes/TiViewProxy.m#L2856-L2863  "
"TIMOB-26318","Bug","Hyperloop",2,"Hyperloop: iOS - TiApp Utility Class methods throw selector-error","When attempting to register a UIApplicationDelegate instance through hyperloop the following exception is thrown:      I'm providing an example project where I've copied and pasted the example code from Titanium's wiki"
"TIMOB-26315","Improvement","Android",8,"Android: Support touch feedback on backgroundImage, backgroundGradient, and transparent backgrounds","*Summary:*  A {{Ti.UI.View}} object's {{touchFeedback}} and {{touchFeedbackColor}} properties will only show a touch/tap ripple animation if you set the view's {{backgroundColor}} property to a non-transparent color. This is a documented limitation.  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.View-property-touchFeedback  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.View-property-touchFeedbackColor    We should add touch feedback to the following as well:  * {{backgroundImage}} property (only apply ripple to non-transparent part)  * {{backgroundGradient}} property (only apply ripple to non-transparent part)  * No background (ripple applied to entire transparent background)    *Use-Case:*  This is needed for developers who want to show buttons with custom image backgrounds.      *Note:*  The touch feedback feature only works on Android 5.0 and newer OS versions.  "
"TIMOB-26325","Bug","Android",5,"Android: Ti.UI.WebView not firing events in 7.x","Setting custom UserAgent for WebView (Android) causes WebView to not fire events (ex. load, beforeLoad and etc.).Using default UserAgent - expected behaviour, events firing.    "
"TIMOB-26320","Bug","iOS",2,"Xcode 10: Cannot build native modules in Xcode IDE when using new build-system (default)","Related to TIMOB-26109, Xcode cannot find the header-source-paths used before (e.g. {{#import ""TiApp.h""}}) from {{~/Library/Application Support/Titanium/mobilesdk/osx/7.3.0.GA/iphone/include/}} anymore. While building the module works fine, building the library from Xcode, for example to debug the development process, does not work anymore. The radar is [rdar://40906817|http://www.openradar.me/40906817] and it's still open after 2 months of iOS 12 / Xcode 10 Beta testing.    For our current module architecture, this is fundamental. For our new Swift support and framework-based modules, this will not be an issue anymore, but all existing modules will still be affected by it.     As a workaround, the developer can go to {{File > Project Settings}} and select the ""Legacy Build System"" which does not has this issue."
"TIMOB-26330","Bug","Android",0,"Android: WebView does not load when Custom Useragent is set","h5. Steps to reproduce:  1.Use the code below in app.js      h5. Actual results:  1.The web view does not load    h5.Expected results:  1.Web VIiew should load successfully"
"TIMOB-26333","Bug","Android|iOS|Windows",5,"Generate source maps for transpiled code","- Currently, we do not generate any source maps for transpiled JS code. Babel can produce a source map that can be used when debugging with Inspector."
"TIMOB-26331","Improvement","Windows",13,"Windows: Improve build/launch time via Titanium CLI","Building/launching apps via CLI is much slower than Visual Studio.    I suspect, Titanium Windows CLI is slower because we usually launch external tools (.exe)  in order to get information/build/launch projects and then read/parse standard outputs/errors to get the results. I would expect Visual Studio doesn't do such a thing but uses public/private API to deal with them such as MSBuild API.   "
"TIMOB-26336","Bug","Android",3,"Android: Cursor issue when textfield inside view, which is under tableview ","h6.Reproduce  1.Run the following code in an Alloy project. (Simple structure, textfield is under view, and view is under tableviewRow).  2.Click different Rows (basically card type in the example).   3 There will be a textfield to input.  4.Try #2 and #3 serval times.    h6.Problem  5. You will see, some times, there is no cursor display in textfield.   6. The other problem is, some times, if you click the textfield, which is focused already. The cursor will disappear.    h6.Note  Mainly code about focus and cursor is around line 471 - 478 in index.js file"
"TIMOB-26341","Bug","iOS",3,"iOS: Remove Ti.UI.ButtonBar ""index"" property","*Summary:*  The {{Ti.UI.ButtonBar}} is a row of buttons on does not display a ""selection"" state when a button is tapped like {{Ti.UI.TabbedBar}}. Because of this, the {{Ti.UI.ButtonBar}} ""index"" property should be removed since it isn't relevant.    *Issue 1:*  Setting the ""index"" property should not put a button in the ""selected"" state.  # Run the below code on iOS.  # Note that the middle button ""Two"" is selected. (See attached ""Screenshot.png"".)  # Tap on the middle button.  # Notice the selection state is removed.  # Tap on the left button.  # Notice the left button is not selected. (It shouldn't be selected.)    *Issue 2:*  Fetching the value of property ""index"" always returns -1 unless fetched during the ""click"" event  # Run the below code on iOS.  # Tap on the right-most button.  # Notice the 1st logged message ""(1) buttonBar.index: 2"" has the correct index.  # Notice the 2nd message ""(2) buttonBar.index: -1"" has the incorrect index.  In this case, it would be better to use the ""click"" event's ""index"" property.        *Recommended Solution:*  Remove the ""index"" property. It is not appropriate for this type of UI control. It would be better to use the ""click"" event's ""index"" property to identify which button was clicked on.    *Note:*  I think the ""index"" property exists for this UI control because it shares the same Objective-C code as {{Ti.UI.TabbedBar}}. An ""index"" property makes sense for {{TabbedBar}} since it has a selection state.    This issue is being raised since we want to add {{ButtonBar}} to Android and Windows and we don't think the ""index"" property will make sense on those platforms either.  "
"TIMOB-26340","Improvement","Android",13,"Android: Update V8 runtime to 7.0.276.42","As an ongoing effort, each major revision of the SDK should target the latest stable branch tip.    For 8.0.0 we should target roughly V8 6.9.    We can track the stable versions here: https://omahaproxy.appspot.com    The release cycle for V8 is ~6 weeks. Currently V8 stable is 6.8.x, 6.9.x is beta. It's anticipated that at least 6.9.x will become stable by the 8.0.0 timeframe."
"TIMOB-26344","Bug","iOS",5,"iOS: Applications Shortcuts crash on SDK 7.3.0+ when triggered from background","Please check out the following:          1) Open the app from shortcut   2) Take the app to run on background   3) Open the app from shortcut again  The app terminates instantly"
"TIMOB-26342","Bug","iOS",0,"iOS 12: App crashes in certain Ti.Database / Promises operations","(Via Slack community)    The developer is trying to run app on iOS 12.0 Beta and it crashes with the following error logs:        - A reproducible test-app can be found [here|https://github.com/sachincredible9/ModelTemplateTest]  - The full discussion can be found [here|https://ti-slack.slack.com/archives/C03CVQX2A/p1534443895000100]    Looking at the provided error log, it seems like evaluating a javascript-file fails in {{loadCommonJSModule}} after requiring a common-js file. I am not sure so far if this happens with Alloy (and the model-binding with Backbone) only or classic Titanium apps as well. The app works fine on iOS < 12, e.g. iOS 11.4.1"
"TIMOB-26350","Bug","Android",0,"Android: Cannot use Android Play Beta-testing","When trying to upload an Android app to Google Play alpha/beta testing, the following error occurs:        I am using SDK 7.3.0."
"TIMOB-26349","Bug","iOS",5,"iOS 10: A couple of issues related to remote push-notifications","There are a couple of issues with notifications on iOS right now:  # On iOS 10+, if a notification is delivered while the app is opened, the notification is presented in-app and the usual callback is not fired  # On iOS 10+, the contents of the ""aps"" key are not in the top-level of the ""data"" key that is returned by the callback of the {{registerForPushNotifications}} callback  # On iOS 10+, the ""localnotificationaction"" event is triggered, although ""remotenoticationaction"" should be triggered  # On iOS 10+, the ""sound"" property of queued pushes can lead to a crash because it's not bridged to a consumable JS-type  # On all supported iOS versions, if a remote notification action is triggered and the app is closed, the {{notificationaction}} is not triggered  # On all supported iOS versions, silent pushes are fired to both the {{registerForPushNotifications}} callback and {{silentpush}} event. it should only be fired to the {{silentpush}} event for parity and API clearance."
"TIMOB-26357","Improvement","Windows",13,"Windows: Implement V4 Analytics specification","- Implement V4 analytics specification outlined https://techweb.axway.com/confluence/pages/viewpage.action?spaceKey=analytics&title=Event+v4+Specification"
"TIMOB-26356","Improvement","iOS",13,"iOS: Implement V4 Analytics specification","- Implement V4 analytics specification outlined https://techweb.axway.com/confluence/pages/viewpage.action?spaceKey=analytics&title=Event+v4+Specification"
"TIMOB-26355","Improvement","Android",13,"Android: Implement V4 Analytics specification","- Implement V4 analytics specification outlined https://techweb.axway.com/confluence/pages/viewpage.action?spaceKey=analytics&title=Event+v4+Specification"
"TIMOB-26354","New Feature","Android",8,"Android: Refactor TabGroup and introduce new style","Refactor the implementation of TabGroup keeping the visual representation.    Introduce the {{BOTTOM_NAVIGATION_STYLE}} ( check: https://jira.appcelerator.org/browse/TIMOB-25953 ) for {{TabGroup}} which will be using the native {{BottomNavigationView}} native component."
"TIMOB-26372","Bug","iOS",3,"iOS: Assigning text value in change event causes duplicated input on TextView","*Steps to reproduce the behavior*  Add the following code to your app.js of a classic project:      *Actual behavior*  Any input will be duplicated in the TextView itself. For example pressing 'H' will result in 'HH' appearing in the TextView.    *Expected behavior*  The value of the text view can be assigned without any side effects.    *Additional notes*  This is required for the two-way binding in Vue.js. The iOS TextField does not have this issues, neither does any of the text widgets on Android."
"TIMOB-26375","Bug","Windows",8,"Windows: Blur is not working for TextField in ScrollView","Hi,   We are having trouble with TextField not losing focus if it is in a ScrollView. If the TextField is in ScrollView, clicking anywhere else on the screen or by explicitly calling 'blur' method on TextField doesn't make the field lose focus. Since we have some events that are triggered whenever the user leaves that field, that functionality is getting impacted because of this issue.   There was feature request created a while back - [TIMOB-25235|https://jira.appcelerator.org/browse/TIMOB-25235] to have blur method work for TextField.     I have created a sample app where you can reproduce this issue.   Steps to reproduce:   1. Run the attached project TestTextFieldBlurNew. You can see the TextField highlighted   2. Click anywhere on the screen and the TextField will not lose its focus. Its parent has a click event attached where blur is called on that TextField as well which doesn't seem to be working.     If we replace the ScrollView with a normal View, it is working as expected though. Please provide a solution or work around for this issue.   "
"TIMOB-26378","Bug","Android",3,"Android: backgroundDisabledColor is ignored","Property {{backgroundDisabledColor}} is ignored for Ti.UI.View.    *Sample:*  _app.js_        Clicking the button changes the state of the view, but the background color stays the same. It is expected that the color changes accordingly to the enabled state.  Edit: The previous version of the sample was not the best one."
"TIMOB-26389","Bug","iOS",2,"iOS: Application throws an error if there is no Ti.UI.Window reference","When building a blank application or with just console.log/console.time.    The following error is shown:      *Steps to reproduce:*  # Create a titanium application   # Run the app blank or with something similar to:       *Expected result*  Application should still build and the console should output something similar to (if the code above is used):      *Actual result*  Build fails and above error is shown.    "
"TIMOB-26388","Bug","iOS",8,"iOS 12: Support iPhone Xs Max & iPhone XR launch-screen images","Pretty much the same as TIMOB-25269, but now for another device. We need to figure out the names for the iPhone Xs launch-screen image names and handle those for the launch-screen image. This is required to incorporate the new image dimensions (and notch changes) that the new model includes.     *Important note: This can be easily workarounded by using launch-screen storyboards as documented [here|https://wiki.appcelerator.org/display/guides2/iOS+Launch+Files]."
"TIMOB-26406","Bug","iOS",0,"iOS 12 Random crashes.","We're noticing various seemingly random crashes in our apps on iOS 12. See attached device logs. Issues only occur on physical devices.    I don't have any code to present, it happens ""randomly"". I've seen various other tickets that are potentially related, but I'm creating this ticket anyway to hopefully create awareness for this issue, our clients starting to notice this which is a big issue for us.    Link with similar issue on SO: https://stackoverflow.com/questions/52120879/appcelerator-app-crashing-on-iphone-x-with-ios-12-beta-11    Titanium SDK we're using: 7.1.0.GA, but also tested with 7.2.0, 7.4.0. Same result.  Xcode 9 / 10, no difference."
"TIMOB-26403","Bug","Android|CLI|iOS|Windows",13,"kitchensink-v2 broken on latest SDK build on master ","On the latest version of the SDK in master (7.5.0.v20180920040518) kitchensink-v2 is broken and displays the following error on iOS (Looks like it broke in SDK Version 7.5.0.v20180919143608):        *Android Error*      *Test Steps*  # Download the latest SDK version from master {{appc ti sdk install -b master -d}}  # Download the kitchensink-v2 app from https://github.com/appcelerator/kitchensink-v2  # Run the kitchensink-v2 using the latest master build    *Expected result*  Application should  run without any issues     *Actual result*  Above error is shown    *Note:* kitchensink-v2 works as expected in SDK version 7.5.0.v20180919120117"
"TIMOB-26402","Improvement","Android",8,"Android: Maintain native module compatibility with Titanium 7.0.0","- Updating V8 to 7.0 breaks native module compatibility with Titanium SDK {{7.0.0}}  - Make necessary changes to V8 to maintain backwards compatibility with Titanium SDK {{7.0.0}}"
"TIMOB-26444","Bug","iOS",3,"Calling Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications causes 'NSInvalidArgumentException'","Calling Titanium.App.iOS.UserNotificationCenter.getDeliveredNotifications causes 'NSInvalidArgumentException'.  The first line of the stacktrace ` -[UNNotification content]: unrecognized selector sent to instance` points to a type mismatch. The code attempts to get the 'content'  property on UNNotification instead of UNNotificationRequest.  Code should be modified to look like this. I can provide a PR  "
"TIMOB-26411","Improvement","Android|iOS|TiAPI|Windows",13,"API: Support async variants of Ti.IOStream methods","We currently have synchronous read/write calls for Ti.IOStreams. This has been our historical API, but having I/O done in a blocking synchronous way is a big performance no-no, and is especially bad when running on the main thread.    We should support passing in callback functions as optional final arguments to these functions, and consider deprecating the block/sync versions.  "
"TIMOB-26454","Bug","Android",3,"Reverse geocoding freeze the app when manualMode is true","I was implementing the Titanium reverse geocoding in my app, on iOS I have had no problems so I also do it on android, suddenly app freeze.    But I think I found the problem:  When Ti.Geolocation.Android.manualMode = true;  Titanium.Geolocation.reverseGeocoder not works and freeze the app.    I attach my index file where you can see the //commented line for manual mode, decomment it and see after first location event everything freeze"
"TIMOB-26433","Bug","iOS",3,"same error with sdk 7.4.0 GA --> TIMOB-26109 Xcode 10: Cannot build modules with the new (default) build system","I have reproduced the error again. I don´t know the reason, this is my log. Its seems all its ok. Any ideas?  Thanks in advance.  2018-9-27 22:48:21  Operating System  Name = Mac OS X  Version = 10.13.6  Architecture = 64bit  CPUs = 8  Memory = 8589934592  Node.js  Node.js Version = 9.2.1  npm Version = 5.5.1  Titanium CLI  CLI Version = 5.1.1  Titanium SDK  SDK Version = 7.4.0.GA  SDK Path = /Users/user1/Library/Application Support/Titanium/mobilesdk/osx/7.4.0.GA  Target Platform = iphone  Command  /Users/user1/.nvm/versions/node/v9.2.1/bin/node /Users/user1/.appcelerator/install/7.0.6/package/node_modules/titanium/lib/titanium.js build --platform ios --log-level trace --sdk 7.4.0.GA --project-dir /Users/user1/Documents/app --target simulator --ios-version 12.0 --device-family universal --deploy-type development --device-id 53FAF1A3-224E-4BE5-8315-7D04DA01E8BE --skip-js-minify --no-colors --no-progress-bars --no-prompt --prompt-type socket-bundle --prompt-port 49199 --config-file /var/folders/jq/rlqcc3v10_9_y__l4fsmjvkh0000gn/T/build-1538081291744.json --no-banner --project-dir /Users/user1/Documents/app  [TRACE] [ioslib] Validating iOS Simulator UDID 53FAF1A3-........  [TRACE] [ioslib] Found iOS Simulator UDID 53FAF1A3.........  [TRACE] [ioslib] Selected iOS Simulator: iPhone 6  [TRACE] [ioslib] UDID = 53FAF1A3-...........  [TRACE] [ioslib] iOS = 12.0  error:  [INFO] : Cleaning Xcode derived data  [ERROR] : note: Using new build system  [ERROR] : error: Could not delete `/Users/user1/Documents/app/build/iphone/build` because it was not created by the build system and it is not a subfolder of derived data.  [ERROR] : ** CLEAN FAILED **"
"TIMOB-26436","Bug","iOS",5,"iOS: VIdeoPlayer time in seconds","Since 7.0.0 VideoPlayer on iOS treats time in seconds instead of milliseconds.  Affected properties: ""currentPlaybackTime"", ""duration"" (probably also ""playableDuration"" and ""endPlaybackTime""), events: ""durationavailable"".  "
"TIMOB-26424","Improvement","Android",5,"Android: Added Ti.App ""pause"" and ""resume"" lifecycle events","- {{Ti.App}} lifecycle events are not fired    {code:js}  Ti.App.addEventListener('resume', () => {      Ti.API.info('RESUME');  });    Ti.App.addEventListener('pause', () => {      Ti.API.info('PAUSE');  });  {code}"
"TIMOB-26423","Bug","Release",1,"[Android] Application crashes when using debugger ","When using the debugger (Windows  - Android in this instance) the application crashes after a certain period of time.     *Test Steps*  # Create and Alloy application   # Set some debug points in the {{index.js}}  # Set studio to {{debug}}  # Debug the app  # Once the debugging view is shown use the Step into/over/return buttons   # After a period of time the following error is shown in studio (see screenshot) and the application crashes      *Actual result*  Studio shows the error shown in the screenshot and the emulator/device crash.     *Expected result*  Debugging should work without any issues. "
"TIMOB-26431","Bug","iOS",3,"iOS: Password Keyboard Toolbar showing on non password fields","iOS app is crashing when using Titanium.UI.AUTOFILL_TYPE_PASSWORD as they getting this 2 issues:     # 1. Since a password text field exists then various text fields within the app will show the password toolbar even though they have no autofill type. This becomes very confusing like when you are entering text into a field called stock number and the password toolbar shows.     # 2. Even if I remove autoFill type password from the password field since it has a password mask set to true it will show the password toolbar. If I remove password mask it will not show the password toolbar but it will also not mask the text.     *App Link with recorded video*  # [Video of the issue happening|https://github.com/jwogan5/sampleApp/blob/master/My%20Movie%201.mp4]  # [The app code for the issue|https://github.com/jwogan5/sampleApp/blob/master/hypertest.zip]    *Steps to Reproduce:*    # 1. Using autofillType:Titanium.UI.AUTOFILL_TYPE_PASSWORD, from the above video, you can get icloud keychain opens up for a password when it got clicked. The issue occurred by going to the next page even though those fields neither an autofill nor password fields but they also show the password toolbar when click on them.     # 2. To show password toolbar in simulator, go to Settings > Accounts and Password > AutoFill Password turn on. You will get the issue.  "
"TIMOB-26427","New Feature","Android",13,"Android: Add ""safeAreaPadding"" property to Ti.UI.Window","*Summary:*  On Android, we'd like to add support for Window property ""extendSafeArea"" so that the window's root view can extend under the Android 9 notch or under an Android 4.4 translucent StatusBar/NavigationBar (see: [TIMOB-26246]). However, this feature is useless since these insets can be of various sizes and on any side of the screen. An app developer needs to know what region of the screen they can place content so that it won't be covered up by the device's insets.    *Proposal:*  Add read-only property ""safeAreaPadding"" to {{Ti.UI.Window}}. This property will return a Titanium [ViewPadding|https://docs.appcelerator.com/platform/latest/#!/api/ViewPadding] dictionary providing the left, top, right, and bottom padding needed to show content safely within the window without overlap. If there are no insets or if ""extendSafeArea"" is set {{false}}, then this property is expected to return all zeros for the padding.    The idea is that the app developer will then be able to set up their own safe area view and use it as a container as shown below.      *Note:*  We should do the same on iOS to handle the following:  * iPhone X top notch and bottom home indicator.  * Translucent status bar on all other iOS devices. (Safe area should be beneath status bar.)    *Safe-Area Container Example:*  Test code  [^ExtendSafeAreaContainerTest.js] shows how to create a safe-area view container for other child views, guaranteed to always make child content tappable without overlap. The green rectangle with the blue border is the safe-area view within the root white window using an orange border.   !ExtendSafeAreaContainerPortrait.jpeg|thumbnail!  !ExtendSafeAreaContainerLandscapeLeft.jpeg|thumbnail!  !ExtendSafeAreaContainerLandscapeRight.jpeg|thumbnail!     *Safe-Area ScrollView Example:*  Test code  [^ExtendSafeAreaScrollViewTest.js] shows how to pad a ScrollView. It allows its contents to scroll beneath a translucent status bar and navigation bar, but pads the top and bottom so that the top-most view and bottom-most view can be scrolled within the safe-area, making them tappable.   !ExtendSafeAreaScrollPortraitTop.jpeg|thumbnail!  !ExtendSafeAreaScrollPortraitBottom.jpeg|thumbnail!  !ExtendSafeAreaScrollLandscapeRightTop.jpeg|thumbnail!  !ExtendSafeAreaScrollLandscapeLeftBottom.jpeg|thumbnail!  !ExtendSafeAreaScrollLandscapeLeftTop.jpeg|thumbnail!     *Safe-Area TabGroup Example:*  Test code  [^ExtendSafeAreaTabsTest.js] shows how to extend tabs to beneath the notches, translucent status bar, and translucent navigation bar. You would *not* normally use a translucent top status bar with an opaque top tab bar, but this is for testing purposes. Note that the top tab bar hovers over the content and each individual tab completely fills the window. The safe-area padding reported lies within the TabGroup container where content is normally displayed when ""extendSafeArea"" is set to {{false}}.   !ExtendSafeAreaTab1Portrait.jpeg|thumbnail!  !ExtendSafeAreaTab2Portrait.jpeg|thumbnail!  !ExtendSafeAreaTabTransitionPortrait.jpeg|thumbnail!  !ExtendSafeAreaTab1LandscapeRight.jpeg|thumbnail!  !ExtendSafeAreaTab1LandscapeLeft.jpeg|thumbnail!     *Safe-Area DrawerLayout Example:*  Test code [^ExtendSafeAreaDrawerTest.js] shows that a {{Ti.UI.Toolbar}} with ""extendBackground"" to {{true}} will automatically handle the safe-area when docked to the top of the screen. The toolbar will extend into the unsafe area of the screen inset while leaving its text and button content within the safe-area. This test code uses a toolbar in the root view and in a drawer side panel.   !ExtendSafeAreaDrawerMainPortrait.jpg|thumbnail!  !ExtendSafeAreaDrawerMainLandscape.jpg|thumbnail!  !ExtendSafeAreaDrawerPanelPortrait.jpg|thumbnail!  !ExtendSafeAreaDrawerPanelLandscape.jpg|thumbnail!   "
"TIMOB-26443","Bug","iOS",3,"iOS: App crashing while playing Youtube Video in WebView","App is crashing when working with youtube videos. Please check out the video attached.    index.xml  <Alloy>   <Window class=""container"">    <WebView url='https://www.youtube.com/watch?v=MYREllHPSbU&list=PL9MeVsU0uG64RMlPf71OHsRyJWyAXnZ-l'></WebView>   </Window>  </Alloy>    Index.js  $.index.open();  "
"TIMOB-26434","New Feature","Android",3,"Android: Support building ""app bundles""","*Summary:*  Google Play allows you to upload your app as an ""app bundle"" (aka: an {{*.aab}} file) instead of an APK. How this works is that Google will generate multiple APKs from the app bundle, split by architecture and image density, and digitally sign each APK with a keystore you've uploaded for you. This is a similar feature to what Apple provides on iOS and allows for smaller apps to be downloaded to the Android device.  https://developer.android.com/guide/app-bundle    *Note:*  You cannot install/run an app bundle on an Android devices. That is, Android devices still only support APKs. An app bundle is only a Google Play publishing feature.    This is why a Titanium ""test"" or ""development"" build should not build an app bundle, because it's useless for local testing purposes. It only makes sense for ""production"" builds for publishing.    *Recommended Solution:*  When doing a ""production"" build, Titanium should generate both an APK and app-bundle to the destination directory. No configuration required.    Note that building a ""production"" APK is still useful. Some features such as push notifications, in-app billing, Google LVL licensing, etc. can't be tested with a ""debug.keystore"" signed APK. Also, app bundles do not support Google expansion files. Nor are app bundles supported on other Android app stores such as Amazon (ie: only supported on Google Play).    We can implement app bundle support once we've adopted gradle build support.  https://developer.android.com/studio/build/building-cmdline    The {{gradlew}} command line would be something like this...    "
"TIMOB-26441","Bug","Android",13,"Android: Implement Titanium.UI.NavigationWindow","- Android implementation of {{Titanium.UI.NavigationWindow}}"
"TIMOB-26447","Bug","Android",2,"Android 8: Unable open PDF on some devices","h6.Problem    Customer is trying to download the pdf from remote server using URL, save them to external or application directory and then open them in external pdf viewer using intent. Like example in post https://www.appcelerator.com/blog/2015/08/appcelerator-pdf-viewer-demo/. But throwing following error on Android 8.        h6.Note    The strange problem is not happening to all model of devices. For example    On Android 7  Seems all devices work well. At least, all the test devices are working well.    On Android 8  Moto G device which is on android 8 worked fine.  but others, like Google Pixel or Samsung Note 8, will get above error.     h6.Example code      Please check this asap, very important function for customer's app. "
"TIMOB-26495","Bug","iOS",1,"Cannot load iOS 12.0 simulator after upgrading to Xcode 10 and Ti SDK 7.4.0.GA","h3. Steps to Reproduce create a new project tap on run and watch it fail Error message in the console: [ERROR] : Simulator is not available  h3. Actual Result [DEBUG] :  Removing empty directories [INFO] :   Invoking xcodebuild [DEBUG] :  Invoking: DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild build -target 'Contractor WorkZone' -configuration Debug -scheme Contractor_WorkZone -derivedDataPath /Volumes/BOX/Projects/Titanium/WorkZone/build/iphone/DerivedData -UseNewBuildSystem=YES OBJROOT=/Volumes/BOX/Projects/Titanium/WorkZone/build/iphone/build/Intermediates SHARED_PRECOMPS_DIR=/Volumes/BOX/Projects/Titanium/WorkZone/build/iphone/build/Intermediates/PrecompiledHeaders SYMROOT=/Volumes/BOX/Projects/Titanium/WorkZone/build/iphone/build/Products -destination 'platform=iOS Simulator,id=DD7ADA2D-8D55-4275-A373-37FDE844367C,OS=12.0' ONLY_ACTIVE_ARCH=1 [INFO] :   Finished building the application in 12s 747ms [INFO] :   Launching iOS Simulator [ERROR] :  Simulator is not available  h3. Expected Result Simulator should boot up"
"TIMOB-26477","Bug","Android",3,"Ti.Locale.setLanguage is not applying the locale effects properly on Android & iOS","In Arabic mode, the locale should change the layout correctly like window-title to the right, home-up button on right as well. All RTL effects should be applied.    However, using Ti.Locale the Arabic or RTL changes do not take place. If we use below code to apply Arabic language using Ti.Locale, the only changes that are taking place the Alert Dialog buttons are switched, but title, home-up button position, pickers are still unaffected, and it's incorrect behaviour as opposed to native Android app.    *Full titanium code using Ti.Locale(not-working) and Hyperloop(working)*      The layout changes works all correctly ONLY using Hyperloop which replicates the native Android code.    In this full sample code, using Ti.Locale, the alert-buttons are changing their positions, but title stays on left-edge in both Arabic and English language. But through Hyperloop or native Android, alert-title move to right-edge and so does the picker which is correct behaviour.    After reviewing the Ti.Locale.setLanguage() method code, I was able to get only one hint that Ti SDK code is using application-context and my native Android or Hyperloop code works when using Activity's base-context.    I do not know how to do this in iOS using Hyperloop, but I hope you get the issue."
"TIMOB-26451","Bug","Android",8,"Android: Hyperloop does not generate meta data for synchronized classes","- Metabase generator does not generate meta data for synchronized classes    *TEST CASE*  - Include https://www.dropbox.com/s/rax8o5m3mrgypns/libwebrtc_19324.aar?dl=1 into {{<project>/platforms/android}} directory  {code:js}  const EglBase14 = require('org.webrtc.EglBase14');  console.log(EglBase14);  {code}"
"TIMOB-26456","Bug","Android",3,"Android: Optimize TiBlob.imageAsResized","I had a look at the implementation of TiBlob.imagesAsResized on Android and it could be optimized according to this stackoverflow article: https://stackoverflow.com/a/32121059/5193915    Rather than opening the image using {{getImage()}} and then creating a new Bitmap with {{createScaledBitmap()}} to resize it the rescaled image could be opened right away (with inTargetDensity + inDensity).    In my test patch I've returned the {{getImage()}} Bitmap right away when rotation is 0. According to  !ti_memory.png|thumbnail! it will save some memory.     But I'm not 100% sure what {{mMemoryCache}} will do so I need some help/guidance if that is still needed. It was added in https://jira.appcelerator.org/browse/TIMOB-16450 to solve some memory leak.    *Test code:*                  "
"TIMOB-26455","Bug","Android",3,"Android: Hyperloop should sanitize numeric names","- Hyperloop generator should sanitize numeric method names    {code:js}  var 1PackageInfoProxy = function() {...}  {code}"
"TIMOB-26457","Bug","Windows",5,"Windows: Window.exitOnClose doesn't work when only one Window is opened","{{Window.exitOnClose}} works only when there are multiple Windows opened. It exits the app when there's only one Window opened.        Expected: It should not exit the app."
"TIMOB-26479","Bug","iOS",3,"TiUtils.m missing check for iPhone XR and iPhone XS Max images","TiUtils.m missing check for iPhone XR and iPhone XS Max images  So these devices will display the   image@x2.png/jpg   instead of   image-2688@3x.png/jpg   image-1792@2x.png/jpg     "
"TIMOB-26460","Bug","Android",13,"Android: Toolbar height set to Ti.UI.SIZE won't resize when changing orientation","*Summary:*  Android Toolbars (and ActionBars) are supposed to use a height of {{56dp}} for portrait orientation and {{48dp}} for landscape. If a Toolbar's ""height"" is set to {{Ti.UI.SIZE}} (the default), then the height and its font size should automatically change when the orientation changes. It currently does *not*.    *Steps to reproduce:*  # Position an Android device in portrait.  # Build and run the below code on that Android device.  # Note the height of the top toolbar.  # Rotate the device to landscape.  # Notice that toolbar height does not shrink. _(This is the bug.)_  # Keep holding the device at landscape and back out of the app.  # Launch the app in landscape form.  # Notice that the toolbar height is smaller upon launch.  # Rotate the device to portrait.  # Notice that the toolbar height has not increased. _(This is the bug.)_        *Cause:*  The height is not changing because Titanium override the activity's ""configChanges"" for orientation in the ""AndroidManifest.xml"". This is needed to prevent the UI from being torn down upon orientation change. Google designed it to reload UI from XML, but since Titanium's UI is generated dynamically via code, this is not an option. We have to resize the height ourselves.  "
"TIMOB-26459","New Feature","Android",5,"Android: Add support for translucent status bar and navigation bar","*Summary:*  Add support for a translucent top status bar and translucent bottom navigation bar by adding the following constants that can be used by the {{Ti.UI.Window}} ""windowFlags"" property.  * {{Ti.UI.Android.FLAG_TRANSLUCENT_NAVIGATION}}  * {{Ti.UI.Android.FLAG_TRANSLUCENT_STATUS}}    The above correspond to the following Android 4.4 Java constants...  https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TRANSLUCENT_NAVIGATION  https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TRANSLUCENT_STATUS    *Example Usage:*     !AndroidTranslucentBars.png|thumbnail!     *Note 1:*  Internally, Titanium needs to support/apply these flags to allow *Android P* notches to overlap a fullscreen window. Otherwise the app window will be letterboxed between the notches. So, we might as well as expose the window flags constants for convenience... and they can be used on older Android OS versions (4.4 and higher).    *Note 2:*  Android 4.4 only supports a translucent navigation bar when the app is shown in portrait form. It is opaque when landscape. This is a limitation on Google's end.  Android 5.0 and newer OS versions support a translucent nav bar for all orientations.  "
"TIMOB-26472","Improvement","Android",13,"Android: Replace support libraries with AndroidX","The Android ""Support Libraries"" have been deprecated by Google in favor of the AndroidX libraries. Google will no longer be making updates to the Support Libraries (v28 is their last version). New features will be going to AndroidX instead.  https://developer.android.com/jetpack/androidx    The Titanium SDK and its modules needs to migrate to the AndroidX libraries. Titanium's app builds will also need to leverage Google's ""jetifier"" tool which replaces prebuilt Android libraries, replaces their references from the Support libraries to AndroidX by hacking the binary (this is a Google sanctioned feature) so that 3rd party modules will be backward compatible.  https://developer.android.com/jetpack/androidx/migrate    AndroidX is best implemented in the app ""build.gradle"" file via...  {code:groovy}  android {   useAndroidX true   enableJetifier true  }  {code}  "
"TIMOB-26466","Story","Windows",8,"Make Alloy app runnable","Make default Alloy app runnable with crash."
"TIMOB-26464","New Feature","Windows",5,"Windows: Add Ti.UI.Window property ""safeAreaPadding""","*Summary:*  On Android and iOS, we're adding a new ""safeAreaPadding"" property to {{Ti.UI.Window}} which returns a Titanium [ViewPadding|https://docs.appcelerator.com/platform/latest/#!/api/ViewPadding] dictionary. This is really only relevant on Android and iOS because it's needed on devices which have camera notches which overlap the screen or when using a translucent StatusBar/NavigationBar. It reports the distance on each edge of the window where the insets/notches overlap the contents of the window.    Please see: [TIMOB-26427] and [TIMOB-26461]    On Windows, we should probably hard-code the padding to all zeros."
"TIMOB-26481","Improvement","Android",1,"Android: Target API Level 28 (Android P) by default","*Summary:*  When building for Android, Titanium should target API Level 28 (aka: Android 9.0) by default if installed under the Android SDK.  Titanium currently targets up to API Level 27 (aka: Android 8.1).    *Note:*  Titanium currently does not target API Level 28 by default. This is a safety precaution until Titanium addresses all Android P breaking changes. But a developer can opt-in to targeting the newest API Level (at their own risk) by adding the following to their ""tiapp.xml"" file.      "
"TIMOB-26485","Bug","Android",3,"Android: Local database provides error in Alloy","Trying to install a local database(dumped form SQlite Manager) on Android using *Titanium.Database.Install()* and it provides error.     *Testing Environment:*    Appcelerator Command-Line Interface, version 7.0.6,Operating System Mac OS X 10.13.6, Node.js Version 8.9.1  SDK Version 7.4.1.GA,Device: Huawei GR3 (Android 7)    *Test Steps:*    1. Create an alloy app  2.Paste the sample code to app directory and sample database to app->lib directory(sample db file is attached)  2. Run the project , click the label and check console    *Test Code:*  *index.js*    *index.xml*      *Test output:*  "
"TIMOB-26484","New Feature","Android",5,"Android: Add ""sound"" support to NotificationChannel","*Summary:*  Android 8.0 and newer OS versions ignore the ""sound"" property assigned to individual notifications. The only way to play custom notification sounds is to assign the sound to a {{NotificationChannel}} instead.    See sample code  [^NotificationSoundTest.js] for an example on how this would work.    Note that you must assign the custom sound to both the {{Notification}} (for Android 7.1 and below) and the {{NotificationChannel}} (for Android 8.0 and above). It's a bummer that you have to assign it to both, but that's the only solution if you want to support customer sound on OS versions older than Android 8.0.  "
"TIMOB-26496","Bug","Android",2,"Android: Exception message not displaying for Java runtime exceptions","- Java exceptions do not display the exception message, only the stack"
"TIMOB-26498","New Feature","Windows",13,"Windows: ListView item template support CommonJS modules and Alloy widgets","The ListView item template only supports a limited set of view classes from the Ti.UI namespace. In addition to using one of the predefined view classes, you should be able to also pass module views to your list item template. For example, use {{ImageView}} on {{AvImageview}} module in your list view:          where {{<ImageView ns=""AvImageview"">}} will be expanded into {{type: 'AvImageview.ImageView'}} in ListView ItemTemplate. In this case ListView should call {{AxImageview.createImageView}} behind the scenes eventually.    We also need support for Alloy {{Widget}} tag like below.        In this case {{<Widget src=""test.widget"">}} will be expanded into {{type: 'test.widget'}} in ListView ItemTemplate. In this case ListView should create Alloy widget {{test.widget}} behind the scenes eventually.    So, ListView should search template class in following order:    # If there's a class in global namespace such as {{Ti.UI.View}}, use {{\[namespace\].create\[Classname\]}} function such as {{Ti.UI.createView}}.  # If there's a CommonJS module with given name, {{require}} it and then use its {{getView}} function.  # If there's a Alloy widget with given name, {{require}} {{Resources/windows/alloy/widgets/WIDGET_NAME/controllers/widget.js}} and then use its {{getView}} function  "
"TIMOB-26506","Bug","Android",1,"Android: Validate TiUIAbstract getWindowProxy()","- {{Titanium.UI.AbstractTab}} {{getWindowProxy}} does not validate if the proxy exists  - Causes test failures https://jenkins.appcelerator.org/job/titanium-sdk/job/titanium_mobile/job/PR-10405/24/console"
"TIMOB-26503","Improvement","Windows",8,"Windows: Touch event coordinate units do not match between platforms","*Summary:*  The (x,y) units provided by View event's ""touchstart"", ""touchmove"", ""touchend"", and ""touchcancel"" do not match between Android and iOS. Both platforms ignore the ""ti.ui.defaultunit"" property setting in ""tiapp.xml"".    On Android, the touch coordinates are always in ""px"" (ie: pixels).  On iOS, the touch coordinates are always in ""dip"" (aka: ""dp"").    *Steps to Reproduce:*  # Build and run the below code on Android.  # Drag your finger in the gray view.  # Notice that the blue square does *not* correctly following your finger.  # Build and run on iOS.  # Drag your finger in the gray view.  # Notice that the blue square *correctly* follows your finger.  # Change ""tiapp.xml"" property ""ti.ui.defaultunit"" to ""px"".  # Build and run on iOS.  # Drag your finger in the gray view.  # Notice that the blue square does *not* correctly following your finger.  # Build and run on Android.  # Drag your finger in the gray view.  # Notice that the blue square *correctly* follows your finger.        *Work-Around:*  The following will work-around this issue on both Android and iOS...        *Ideal Solution:*  Convert native touch coordinates to use ""ti.ui.defaultunit"" on both Android and iOS. This way views can easily be dragged since their ""x"", ""y"", and ""center"" properties already respect the ""ti.ui.defaultunit"" property.  Note that this would be a breaking change.  "
"TIMOB-26510","Bug","Windows",8,"Windows: ""Runtime Exception: Layout cycle detected."" when launching kitchensink-v2","h5.Description    When launching ks-v2 I'm seeing {{""Runtime Exception: Layout cycle detected."" }} when the app launches. Tracking the issue down it appears to be coming from the {{$.log.setText}} call [here|https://github.com/appcelerator/kitchensink-v2/blob/27e44b5635f6ca2abf83f9e76cc9f0044a56795f/app/controllers/console/index.js#L11].    * Commenting out the setText call allows the app to open fine (/)  * Placing the {{setText}} call in a setTimeout fixes the issue (/)  * Replacing {{logger.history}} with 'astring' does not fix the issue (x)    My best guess right now is that there's some issue around updating the label text while we're laying out the UI?     h5.Steps to reproduce    1. Run kitchensink-v2    h5.Actual    App will error out on launch    h5.Expected    App should not error out on launch"
"TIMOB-26508","Improvement","Windows",5,"Windows: Setting undefined should clear layout value","Setting {{undefined}} to layout property should ""clear"" layout value. For instance, Setting both {{left}} and {{top}} disables {{center}} property (TIMOB-26507) but we should be able to enable {{center}} property again by setting {{undefined}} for {{left}} and {{top}} properties.          Expected: The blue view should move to where you click."
"TIMOB-26507","Bug","Windows",8,"Windows: View.center is not respected when left & top is set.","{{center}} property is not respected when {{left}} and {{top}} is set. Even when these properties are already set, {{center}} should be respected and update the position of the view. Also, we should be able to use {{undefined}} to ""clear"" existing values according to [UNDEFINED behavior|https://docs.appcelerator.com/platform/latest/#!/guide/UI_Composite_Layout_Behavior_Spec-section-src-4196675_UICompositeLayoutBehaviorSpec-UNDEFINEDbehavior] which is taken care by TIMOB-26507.        Expected: View should move to the position where you clicked."
"TIMOB-26513","Bug","iOS",3,"iOS: Push notifications crash the app when used with third-party module","Using third-party modules to integrate remote notifications may crash an app due to unsafe calls to {{application:didReceiveRemoteNotification:}}. This method is only available when {{Ti.Network.registerForPushNotifications}} was used."
"TIMOB-26516","Bug","Android",2,"Android: Ti.Platform ""id"" and ""version"" properties return null if analytics disabled as of 7.5.0.RC","*Summary:*  Properties {{Ti.Platform.id}} and {{Ti.Platform.version}} return {{null}} if analytics have been disabled in the ""tiapp.xml"" file. They return the correct values if analytics is enabled.    This bug was introduced as of 7.5.0.RC.    *Steps to reproduce:*  # Set up a Classic app with the ""app.js"" code shown below.  # In the ""tiapp.xml"" file, disabled analytics as shown below.  # Build and run on an Android device.  # In the log, notice that ""id"" and ""version"" return {{null}}. _(This is the bug.)_    *tiapp.xml*  {code:xml}  <ti:app xmlns:ti=""http://ti.appcelerator.org"">      <analytics>false</analytics>  </ti:app>  {code}    *app.js*  {code:javascript}  Ti.API.info(""@@@ Ti.Platform.id: "" + Ti.Platform.id);  Ti.API.info(""@@@ Ti.Platform.version: "" + Ti.Platform.version);  {code}    *Note:*  I suspect APIs {{Ti.Geolocation.forwardGeocoder()}} and {{Ti.Geolocation.reverseGeocoder()}} might also fail if analytics is disabled.  "
"TIMOB-26521","Bug","iPad",8,"iOS: The popover UI has shrunk and also lines are not visible in between few rows on iPad","Issue :-1  * Issue description - The popover UI has shrunk and also lines are not visible in between few rows  * Screen shot showing the issue – PFA Issue_1.png and Issue_1_screenshot.png  * Sample app code – PFA Sample_APP.zip    Issue :-2    * Issue description - On searching an item in search bar and selecting a row the, popover stays with blank white background instead of disappearing  * Screen shot showing the issue – PFA Issue_2.png  * Sample app code – PFA Sample_APP.zip"
"TIMOB-26518","Story","Android",3,"Android: Webview FireEvent not get fired in correct sequence","Hi team,  For Android Platform, I have added ""evenlistener"" in webview local html file. The event is fired from app.js. The issue is, fireEvent get fired in reverse order for Android.  For iOS, the sequence is right and for Android, the sequence is wrong.    App.js    index.html  {code:html}  <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN""  ""http://www.w3.org/TR/html4/strict.dtd"">  <html>   <head>     </head>   <body>      <script type=""text/javascript"">     function passdatatoserver(e) {        Ti.API.info(""testevent:"" + e.value);       }         Ti.App.addEventListener('testevent', passdatatoserver);      </script>   </body>  </html>    [INFO] :   value passed:0  [INFO] :   value passed:1  [INFO] :   value passed:2  [INFO] :   value passed:3  [INFO] :   value passed:4  [WARN] :   TiVerify: (Timer-0) [4992,4993] Verifying module licenses...  [INFO] :   I/System.out: Thread-63102(ApacheHTTPLog):Reading from variable values from setDefaultValuesToVariables  [INFO] :   I/System.out: Thread-63102(ApacheHTTPLog):isSBSettingEnabled false  [INFO] :   I/System.out: Thread-63102(ApacheHTTPLog):isShipBuild true  [INFO] :   I/System.out: Thread-63102(ApacheHTTPLog):getDebugLevel 0x4f4c  [INFO] :   I/System.out: Thread-63102(ApacheHTTPLog):Smart Bonding Setting is false  [INFO] :   I/System.out: Thread-63102(ApacheHTTPLog):SmartBonding Setting is false, SHIP_BUILD is true, log to file is false, DBG is false, DEBUG_LEVEL (1-LOW, 2-MID, 3-HIGH) is 1  [INFO] :   I/System.out: Timer-0 calls detatch()  [INFO] :   TiVerify: (Timer-0) [838,5831] Succesfully verified module licenses  [INFO] :   testevent:4  [INFO] :   testevent:3  [INFO] :   testevent:2  [INFO] :   testevent:1  [INFO] :   testevent:0    Operating System    Name                        = Microsoft Windows 10 Pro    Version                     = 10.0.17134    Architecture                = 32bit    # CPUs                      = 4    Memory                      = 17091956736  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.1.1  Titanium SDK    SDK Version                 = 7.4.1.GA  {code}"
"TIMOB-26517","Story","CLI",1,"CLI: Add link to implicit global warning log","h5.Description    The warning log had a link created to explain it, we should link to the doc.appc page (via shortlink) so that there's less confusion around the message"
"TIMOB-26523","New Feature","iOS",3,"iOS 11+: Support large title style (dynamic fonts)","Titanium is pretty well suited regarding dynamic fonts, which becomes more and more important in larger scale applications. We need one more style which is currently missing ({{UIFontTextStyleLargeTitle}}) which will complete the dynamic font support.    Note: Until the below PR is merged, the following enum raw value will allow to use it today:  "
"TIMOB-26529","Bug","Android",2,"Android: Amend Ti.Platform properties","- Amend {{Ti.Platform}} properties:  {code:js}  Ti.Platform.getName();  Ti.Platform.getOsname();  Ti.Platform.getVersion();  Ti.Platform.getOstype();  {code}"
"TIMOB-26525","Bug","Windows",5,"Windows: ScrollView does not expand with Ti.UI.SIZE","{{ScrollView}} does not expand its size along with child content when {{Ti.UI.SIZE}} is specified.         Expected:  !1.png|thumbnail! "
"TIMOB-26524","Bug","Windows",5,"Windows: Can not compile folder with spaces","Latest [titanium-mobile-mocha-suite|https://github.com/appcelerator/titanium-mobile-mocha-suite/tree/master/Resources/folder%20with%20spaces] shows that Titanium project that contains folder with spaces does not compile.     How to reproduce:    * Create folder with spaces (i.e. ""{{folder with spaces}}"") under {{Resources}} folder.    Building the project errors out with CMake Error:        Expected: It should compile without errors."
"TIMOB-26535","Bug","Android",5,"Android: Fix analytics session events","- {{ti.foreground}} and {{ti.background}} events are being sent on every Activity {{onPause}} and {{onResume}}. This means every new window is classed as a new session, which is incorrect.  - The events need to be tied to the application lifecycle and not each activity lifecycle    *TEST CASE*  {code:js}  const win = Ti.UI.createWindow({ backgroundColor: 'blue' }),        btn = Ti.UI.createButton({ title: 'OPEN' });    btn.addEventListener('click', () => {      // this should not create a new session (not send ti.foreground)      Ti.UI.createWindow({ backgroundColor: 'red' }).open();  });    win.add(btn);  win.open();  {code}"
"TIMOB-26534","Bug","Android",3,"Android: Modify native HTTP handling to only cache ""GET"" responses","*Summary:*  Titanium's custom {{TiResponseCache.java}} class currently caches all HTTP responses and ignores the HTTP method. Meaning that it'll cache ""POST"", ""PUT"", ""DELET"", etc. which is a problem when using REST web APIs.    It should be changed to only cache HTTP ""GET"" responses.  _(Note: iOS does not cache ""HEAD"" responses.)_    *Note:*  This is not an issue with Titanium's {{Ti.Network.HTTPClient}} on Android since it's currently set up to *never* cache responses. The only Titanium JavaScript API which does HTTP response caching is when you load images via URLs, which are ""GET"" requests.    The above is only an issue for app's which do HTTP requests natively in Java, such as via a 3rd party native library."
"TIMOB-26533","Bug","iOS",5,"iOS: Ti.Media.Audio player without url set is crashing while registering for event listener","The application throws an error when using the following test case:    Following error is shown:    Note this worked on 7.4.1.GA and looks like a regression.     *Expected result*  Application should not crash and stream should work accordingly. (If stream is paused/played)    *Actual result *  Application crashes on launch"
"TIMOB-26540","Bug","Windows",5,"Windows: When using html in webView application closes ","When using the following test case the application crashes on Windows without throwing an error. (Works fine on Android and works fines on windows using 7.4.1.GA):      *Expected result*  Application should  show a selectBox.    *Actual result*  Application crashes without showing an error  "
"TIMOB-26539","Bug","Android",1,"Android: Label's default font size should be ""dp"" unless explicitly set","*Summary:*  Android's {{Ti.UI.Label}} is currently hard-coded to a font size of {{15}} using the ""tiapp.xml"" property's ""ti.ui.defaultunit"". The problem with this is if you set the default unit to pixels (ie: {{px}}), then the label will default to ""15px"" and be too small to read on high DPI devices. The label's default font size should be hard-coded to ""dp"".    We don't have this issue with any of our other UI features such as {{Button}}, {{TextField}}, {{Picker}}, etc. All other UI elements use ""dp"" by default. Only our Android {{Label}} has this problem.    iOS does not have this problem.    *Steps to reproduce:*  # Create a Titanium classic app.  # Set up the ""tiapp.xml"" file's default unit to ""px"" (pixels) as shown below.  # Use the ""app.js"" below.  # Build and run on an Android device that is xxhdpi or higher.  # Notice that the text is very tiny. _(This is the bug.)_    tiapp.xml  {code:xml}  <ti:app xmlns:ti=""http://ti.appcelerator.org"">   <property name=""ti.ui.defaultunit"" type=""string"">px</property>  </ti:app>  {code}    app.js  {code:javascript}  var window = Ti.UI.createWindow();  window.add(Ti.UI.createLabel({ text: ""Hello World"" }));  window.open();  {code}    *Android Results:*   !Android-dp.png|thumbnail!  !Android-px.png|thumbnail!     *iOS Results:*   !ios-dp.png|thumbnail!  !ios-px.png|thumbnail!     "
"TIMOB-26545","Bug","Android",8,"Android: Using global L() method for localization does not work if second argument is not supplied","If the {{L}} method does not receive a second parameter, the fallback string is not displayed if not supplied as a second argument. This works fine on iOS.    Example:  {code:js}  // Works  L('Hello world', 'Hello world');    // Does not work on Android, works on iOS  L('Hello world');  "
"TIMOB-26551","Bug","CLI|iOS",1,"iOS: ""Cannot read property 'code' of undefined"" error thrown if log server connection times out","h5.Description    When checking the log server connection in the iOS build if the check times out then the following error is thrown. I'm unsure as to the actual reasons for why I ran into this, but you can easily reproduce by reducing the logserver wait time        h5.Steps to reproduce    1. Reduce the logserver wait time using {{appc ti config ios.logServerTestTimeout 1}}  2. Build an iOS app for simulator or device    h5.Actual    Error thrown like the above    h5.Expected    Error thrown should inform the user the real reason it errored "
"TIMOB-26550","Bug","Windows",5,"Windows: Add support for file property to HTTPClient","*Test case:*      Null should only be shown for the first two buttons but it shown for all buttons unlike on Android. "
"TIMOB-26549","Bug","Windows",5,"Windows: HTTPClient: Invalid Status Codes returned","GET request should be returning a status of ""301"" or ""302""; instead returns a status code of ""200""    *Test case*      *Actual result:*  Following is returned:      *Expected result:*  Following should be returned:      "
"TIMOB-26560","Improvement","Android",3,"Android: Remove deprecated Ti.UI.KEYBOARD_* constants in favor of TI.UI.KEYBOARD_TYPE_*","*Summary:*  The {{Ti.UI.KEYBOARD_\*}} type constants were deprecated in Titanium 6.0.0 in favor of our new {{Ti.UI.KEYBOARD_TYPE_\*}} constants. These deprecated constants should be removed in Titanium 8.0.0.    Constants to be removed...  * {{Ti.UI.KEYBOARD_ASCII}}  * {{Ti.UI.KEYBOARD_DECIMAL_PAD}}  * {{Ti.UI.KEYBOARD_DEFAULT}}  * {{Ti.UI.KEYBOARD_EMAIL}}  * {{Ti.UI.KEYBOARD_NAMEPHONE_PAD}}  * {{Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION}}  * {{Ti.UI.KEYBOARD_NUMBER_PAD}}  * {{Ti.UI.KEYBOARD_PHONE_PAD}}  * {{Ti.UI.KEYBOARD_WEBSEARCH}}  * {{Ti.UI.KEYBOARD_TWITTER}}  * {{Ti.UI.KEYBOARD_URL}}    Above constants are to be replaced with...  * {{Ti.UI.KEYBOARD_TYPE_ASCII}}  * {{Ti.UI.KEYBOARD_TYPE_DECIMAL_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_DEFAULT}}  * {{Ti.UI.KEYBOARD_TYPE_EMAIL}}  * {{Ti.UI.KEYBOARD_TYPE_NAMEPHONE_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_NUMBERS_PUNCTUATION}}  * {{Ti.UI.KEYBOARD_TYPE_NUMBER_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_PHONE_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_WEBSEARCH}}  * {{Ti.UI.KEYBOARD_TYPE_TWITTER}}  * {{Ti.UI.KEYBOARD_TYPE_URL}}    *Note:*  We must also remove deprecated constant {{Ti.UI.KEYBOARD_APPEARANCE_ALERT}}. While this constant is only supported on iOS, it is currently defined on Android to avoid JavaScript runtime errors.  "
"TIMOB-26559","Bug","iOS",5,"iOS: App crash and missing events for local notifications","There are currently multiple issues around local notifications which either crash the app, do not trigger an event at all, or trigger the wrong event. This ticket is used to group other related tickets and fix those issues all in one go as they all interfere with each other.    *Issue 1* (AC-5993)  Scheduling local notification raises a ""unrecognized selector sent to instance"" exception when the app is in foreground when the notification triggers. This was already fixed in TIMOB-26513. However, local notifications shouldn't even try to trigger this method meaning our logic in UNNotificationCenter delegates is flawed and needs to be fixed.    *Issue 2* (AC-6013 & AC-6015)  Local notifications are not scheduled (or appear so because no notification will be fired)."
"TIMOB-26558","Bug","iOS",3,"iOS: Ti.Media.takeScreenshot is not working ","Ti.Media.takeScreenshot is not working working properly on iOS. On android, clicking on button its takes a screenshot, saved it to the gallery and displayed it to imageview properly. But on ios we are not getting the same behaviour.    *Test Code:*      *Test Environment:*          *Test steps:*    1. Create a classic project  2. Run the sample code on simulator  3. Click on button. We get the following:      *Console logs and output:*  See attachment section for screenshots    "
"TIMOB-26566","New Feature","iOS",5,"iOS: Add ability to remove previously added motion effects","I would like to expose a ""clearMotionEffects()"" method. We use the API exposed by this ticket but see some glitches when switching tabs. This is the natively, but requires some handling to remove the motion-effect on blur and re-add it on focus. Using this API will solve it.    This is based on the existing API exposed in TIMOB-25684."
"TIMOB-26565","Bug","CLI|Hyperloop|Windows",5,"Windows: Building with hyperloop fails with ""traverse is not a function""","h5.Description    Building hyperloop-examples with SDK 8 throws the following error. This is because hyperloop-examples is using the babel packages from within the SDK and these were removed in TIMOB-25650. The hyperloop hook should be fixed up to have its own dependencies        h5.Steps to reproduce    1. Build hyperloop-examples    h5.Actual    traverse is not a function is thrown    h5.Expected    No error, app should build just fine"
"TIMOB-26564","Bug","CLI|Windows",5,"Windows: Cannot find module 'babylon' error thrown on build","h5.Description    When building for windows the following error is thrown, this is because of the changes made in TIMOB-25650. We can remove this code though as it is a backwards compat thing for hyperloop 2.x        h5.Steps to reproduce    1. Build for Windows    h5.Actual    Above error thrown    h5.Expected    No error thrown"
"TIMOB-26562","Improvement","Windows",3,"Windows: Remove deprecated Ti.UI.KEYBOARD_* constants in favor of TI.UI.KEYBOARD_TYPE_*","*Summary:*  The {{Ti.UI.KEYBOARD_\*}} type constants were deprecated in Titanium 6.0.0 in favor of our new {{Ti.UI.KEYBOARD_TYPE_\*}} constants. These deprecated constants should be removed in Titanium 8.0.0.    Constants to be removed...  * {{Ti.UI.KEYBOARD_ASCII}}  * {{Ti.UI.KEYBOARD_DECIMAL_PAD}}  * {{Ti.UI.KEYBOARD_DEFAULT}}  * {{Ti.UI.KEYBOARD_EMAIL}}  * {{Ti.UI.KEYBOARD_NAMEPHONE_PAD}}  * {{Ti.UI.KEYBOARD_NUMBERS_PUNCTUATION}}  * {{Ti.UI.KEYBOARD_NUMBER_PAD}}  * {{Ti.UI.KEYBOARD_PHONE_PAD}}  * {{Ti.UI.KEYBOARD_URL}}  * {{Ti.UI.KEYBOARD_APPEARANCE_ALERT}}    Above constants are to be replaced with...  * {{Ti.UI.KEYBOARD_TYPE_ASCII}}  * {{Ti.UI.KEYBOARD_TYPE_DECIMAL_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_DEFAULT}}  * {{Ti.UI.KEYBOARD_TYPE_EMAIL}}  * {{Ti.UI.KEYBOARD_TYPE_NAMEPHONE_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_NUMBERS_PUNCTUATION}}  * {{Ti.UI.KEYBOARD_TYPE_NUMBER_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_PHONE_PAD}}  * {{Ti.UI.KEYBOARD_TYPE_URL}}  "
"TIMOB-26580","Bug","Android",3,"Android: ListView templates not compatible with native modules","ListView templates have a bug that prevents support for native modules.    {code:js}  var template = {      childTemplates: [          {               type: '<native-module-namespace>,               bindId: '',              properties: { ... }          }      ]  };  {code}"
"TIMOB-26579","Bug","Windows",5,"Windows: Ti.UI.ImageView's load event object has no state property","According to our docs and our unit test suite, the Ti.UI.ImageView {{load}} event should fire off with an object holding a {{state}} property whose values is either {{'image'}} or {{'images'}}, based on whether it's being fired after loading a single image from {{image}} property, or after loading a series of images from the {{images}} property."
"TIMOB-26578","Bug","Windows",5,"Windows: Missing trailing separator for directory in Ti.Filesystem.File#nativePath","There are a number of parity issues with the implementation of Ti.Filesystem.File#getDirectoryListing() on Windows, which can be seen in the tests now skipped there:   https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/ti.filesystem.file.test.js#L726-L746    Namely that:  - calling it for a file should return null  - calling for a directory that does not exist should return null (returns empty array right now)    The other test (""can access resource directory files"") may be failing due to Windows not appending a trailing separator while other platforms do? I tried with unix and windows separators and that didn't seem to fix it, so I don't think it's a separator mismatch issue."
"TIMOB-26577","Bug","Windows",5,"Windows: ScrollView sizing incorrectly in a vertical layout","In our unit tests suite, the ti.ui.layout.test.js scrollViewWithSIZE test is failing on Windows with expected 24 to equal 50    https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/ti.ui.layout.test.js#L1291    The test is now skipped on Windows.    It turns out this only happens when parent view is {{vertical}} layout.   As a side note, {{postlayout}} for {{ScrollView}} may be fired multiple times during layout and we should be testing latest value only.      "
"TIMOB-26575","Improvement","Windows",8,"Windows: Support async variants of Ti.Network.TCP #read and #write","We've added async variants for Android/iOS, but Windows does not yet support this - and is failing the unit test we wrote for it. The test has since been skipped on Windows."
"TIMOB-26574","Improvement","TiAPI",13,"TiAPI: Implement set/clearImmediate","setImmediate and clearImmediate are *sort of* like setTimeout/clearTimeout, but are supposed to be run after current I/O event callbacks are done.    https://nodejs.org/api/timers.html#timers_setimmediate_callback_args    Basically this is roughly like setTimeout(callback, 0); as a first stab, but should be run **before** and timeout callbacks.    In effect, immediate, timers and ticks from process.nextTick are *sort of* like 3 separate priorities of timer queues, although at a lower level they have semantic/behavioral differences. ticks are right away and can cause infinite loops. immediate come next chance after I/O events callbacks. Then timers get fired when ready."
"TIMOB-26573","Improvement","TiAPI",13,"TiAPI: Make Ti.Buffer Node-compatible with Node's Buffer type","We have our own Ti.Buffer type. To play nice with Node, we should see if we can't have it add/use a similar API so that can be used interchangeably."
"TIMOB-26571","New Feature","TiAPI",13,"TiAPI: Global process object compatible with Node.js","Node has a top-level global {{process}} object which we should attempt to emulate to some degree. A large amount of it's API is not particularly relevant to us, but for compatibility reasons we should support/expose it and try to implement as much as we can that makes sense.    https://nodejs.org/api/process.html    Notable are:  - process.arch - equivalent to {{Ti.Platform.architecture}}  - process.cwd()  - process.debugPort  - process.hrtime([time])  - process.mainModule  - process.memoryUsage()  - process.nextTick(callback[, ...args])  - process.pid  - process.platform - Probably equivalent to {{Ti.Platform.name}}  - process.release  - process.setUncaughtExceptionCaptureCallback(fn)  - process.stderr  - process.stdin  - process.stdout  - process.title  - process.uptime()  - process.version - Equivalent to {{Ti.version}}  - process.versions  "
"TIMOB-26567","Bug","Windows",5,"Windows: Upgrade to Babel 7","https://github.com/appcelerator/titanium_mobile_windows/blob/master/cli/commands/_build/copy.js    This relies on Babel 6, we need to update this to support Babel 7.    The builds are failing since we removed Babel 6 dependencies https://github.com/appcelerator/node-titanium-sdk/commit/3cfe4346ee87b67fd7da89c2d75a525c588a7c93#diff-b9cfc7f2cdf78a7f4b91a753d10865a2"
"TIMOB-26582","Bug","iOS",5,"IOS: Build fails for simulator/device with SOASTA","*Steps to reproduce:*  1.Create a classic sample app    2.run against IOS device or emulator    *Expected:*  App should successfully built and installed on ios device  *Actual:*  Throws the following error  [TRACE] :  ld: symbol(s) not found for architecture x86_64  [TRACE] :  clang: error: linker command failed with exit code 1 (use -v to see invocation)  [ERROR] :  ** BUILD FAILED **  [ERROR] :  The following build commands failed:  [ERROR] :   Ld /Users/kmahalingam/Documents/Appcelerator_Studio_Workspace/Htest/build/iphone/build/Products/Debug-iphonesimulator/Htest.app/Htest normal x86_64  [ERROR] :  (1 failure)    "
"TIMOB-26594","Bug","iOS",1,"iOS: Exception when canceling local notifications with removePendingNotifications","I'm trying to cancel local iOS notifications with Ti.App.iOS.UserNotificationCenter.removePendingNotifications(notificationsToCancel), but whenever I try to call this with an array of notifications the app crashes.    I did a little bit of research and it seems the ENSURE_TYPE on line 109 in TiAppiOSUserNotificationCenterProxy.m throws an exception. But I'm getting the notifications from getPendingNotifications so they should be ok right?    Example (press schedule and then cancel right afterwards to get the exception):        Exception:          "
"TIMOB-26587","Bug","iOS",3,"Babel throwing an error on build ","Babel is throwing an error on build stopping building on a device.    *Error*      *Steps to reproduce*  # Create an application {{appc new}}  # Build to device {{appc run -p ios -T device}}      "
"TIMOB-26586","Bug","iOS",3,"iOS: Animation curve ease-in/ease-out does not auto-reverse correctly","*Summary:*  A view animation with ""autoreverse"" set to {{true}} and a ""repeat"" of {{0}} (the default) will not correctly reverse the animation when using ""curve"" {{Ti.UI.ANIMATION_CURVE_EASE_IN}} or {{Ti.UI.ANIMATION_CURVE_EASE_OUT}}. The animation incorrectly uses the same curve when performing the reverse animation.    If ""repeat"" is set to {{1}} or higher, this issue will only happen on the final/last repeated reverse animation. This issue won't happen on prior repeated animations.    *Expected Behavior:*  When the curve is set to {{Ti.UI.ANIMATION_CURVE_EASE_IN}}, then the reverse animation curve is supposed to be {{Ti.UI.ANIMATION_CURVE_EASE_OUT}}.    When the curve is set to {{Ti.UI.ANIMATION_CURVE_EASE_OUT}}, then the reverse animation curve is supposed to be {{Ti.UI.ANIMATION_CURVE_EASE_IN}}.    The above is how it works in HTML5 ""reverse"" animation. See...  https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction#Syntax    *Cause:*  Titanium's iOS code generates its own reverse animation to work-around an Apple bug. The issue is that the reverse animation uses the same ""curve"" as the forward animation. This is where the reverse curve should be applied instead.  https://github.com/appcelerator/titanium_mobile/blob/master/iphone/TitaniumKit/TitaniumKit/Sources/API/TiAnimation.m#L412  "
"TIMOB-26599","New Feature","iOS",5,"iOS: Add ""allowTranscoding"" option to Ti.Media.openPhotoGallery()","*Summary:*  When selecting a video from the gallery, iOS will transcode/convert the selected video by default and return the newly formatted video instead. This can cause a very long delay if the video is large.    *Solution:*  Add an iOS-only ""allowTranscoding"" option for our {{Ti.Media.openPhotoGallery()}} method, when set {{false}}, will return the selected video as-is without transcoding it. This will solve the long delay issue.        *Note:*  There is no equivalent to this on Android, which always returns a reference to the video as-is. So, this is an iOS only feature.    *Native Implementation Details:*  Add this code at line 1746. I can provide a PR  "
"TIMOB-26597","Bug","CLI|iOS",3,"CLI: Prompted for ios code base type when creating an android module","H5.Description    When creating a module for a non-iOS platform, I'm still prompted for the code base type, this prompt should only show if the platforms includes ios    h5.Steps to reproduce    1. Run {{ti create --log-level trace --name foobarmodule --force --type module --platforms android --id com.foo}}    h5.Actual    Prompted for the code base type    h5.Expected    No prompt for code base type"
"TIMOB-26595","Bug","Android|CLI|iOS|Windows",3,"CLI: Unable to create module using latest the build from Master ","When creating a module the platform folders do not get created    _The below is for iOS but is relevant for all platforms_    *Test steps:*  # Open Appc Studio  # Create a new module (File -> New -> Mobile App project)  # When creating a module select the latest SDK from master (8.0.0.v20181121114345)  # Open project and check if iOS folder has been created    *Actual result*  iOS folder can not be seen once a new module has been 'created'.    *Expected result*   iOS folder should be created when creating a new module."
"TIMOB-26678","Bug","Android",3,"Android: Unnecessary default notification channel created when using a custom one","When using SDK 7.5.0.GA and targeting Android SDK version 26 there is a small issue with notifications.    In TIMOB-25864 forward compatibility was introduced to have a default channel in case apps target SDK version 26. This works perfect, apart from the fact that it now always creates this channel.    When using the (undocumented) 'channelId' as option in the createNotification after creating a custom notification channel this yields the expected result. You see a notification that belongs to the channel just created, but on top that you still see the warning:      This occurs with the example code of NotificationChannel when targeting SDK version 26: https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Android.NotificationChannel    Expected result:  No default notification channel is created, when a custom notification channel is defined."
"TIMOB-26601","Bug","Android",5,"Android: Cannot apply theme with ""windowTranslucentNavigation"" or ""windowTranslucentStatus"" to splash screen as of 7.5.0","*Summary:*  As of Titanium 7.5.0, a custom theme set up with {{windowTranslucentNavigation}} or {{windowTranslucentStatus}} will be undone when applied to the splash screen activity.    *Steps to reproduce:*  # Create a Classic app named ""SplashTest"".  # Set up a blank ""app.js"" as shown below.  # Add the below ""my_themes.xml"" file under folder: {{./platform/android/res/values}}  # Set up ""tiapp.xml"" with the below.  # Build and run on Android.  # On app startup, notice that top status bar and bottom navigation bar are briefly displayed semi-transparent... but then become opaque. (The bug is they're not supposed to turn opaque.)  # Notice that the following warning gets logged.  {{You cannot use a translucent status bar or navigation bar unless you set the window's 'extendSafeArea' property to true.}}    {{app.js}}      {{./platform/android/res/values/my_themes.xml}}      {{tiapp.xml}}      "
"TIMOB-26613","Improvement","Tooling",5,"node-ios-device: Add Node.js 11 support","node-ios-device needs to add support for module API version 64. This only affects the build scripts. The node-ios-device user code does not need to be changed.    After the module API 64 has been added to the build scripts, node-ios-device must be built locally and then manually upload the binary to S3. There will be no new resulting npm package."
"TIMOB-26632","Bug","Android",5,"Android: App sometimes crashes when backgrounded as of 7.5.0","App getting crashed, whenever app is in background.  Error description:       The following link will show the apm from dashboard:   * https://platform.axway.com/#/app.service/apm/5af9ddd60f0e5961bf7cd0d5 or   * https://app.crittercism.com/developers/crash-details/44567a3b3cfe456e8577fb10b74a469c00555300/e30ecfa1fcab9675#period=P14D&appVersion=5.6.7     The app was showing no such crashes with SDK 7.4.1.GA, Something has changed in SDK 7.5.0.GA that is making the app crash. There are like 100s of crashes which were never there with 7.4.1.GA.    *Attachments:*  I've added 2 screenshots of crash & appc ti setup check  command log.   "
"TIMOB-26631","Bug","Android",1,"Android: image from camera gets rotated to 90 degree ","Hello!  I'm trying to take an image from the camera and then save it to the image view or post it to my server for Android. The problem is when I take the image it gets rotated to 90 degrees.    Test Code:      Tets Environment:      Please take a look on attached screenshot. Also note, that front and back facing cameras rotate the image different ways          Thanks   "
"TIMOB-26630","Story","Android",5,"ScrollView: toImage() not taking complete screenshot  of scrollview","Hello!  I have a scrollview added on window, while taking the screenshot of scrollview, it takes toImage() of the area that is visible on the window, but not of full scrollview, how I can overcome this issue ?    while clicking on first window scrollview, image is displayed in next window scrollview, you will notice its not taking toImage() of complete scrollview, as its not displaying in 2 window.    Test Environment:      Thanks   "
"TIMOB-26633","Improvement","Android",1,"Android: Change min supported version to Android 4.4 (API Level 19)","In Titanium 8.0.0, we need to bump up the minimum Android OS version supported...  *From:* Android 4.1 (API Level 16)  *To:* Android 4.4 (API Level 19)    The ""minSdkVersion"" in Titanium SDK's ""package.json"" needs to be changed here.  https://github.com/appcelerator/titanium_mobile/blob/master/android/package.json    Titanium's ""AndroidManefest.xml"" template will automatically pull the ""minSdkVersion"" from the above mentioned ""package.json"".  "
"TIMOB-26638","Improvement","Android",5,"Android: Root Ti.Android.Activity ""intent"" property should be updated when ""newintent"" event is fired","*Summary:*  Currently, the root {{Ti.Android.Activity}} object's ""intent"" property never changes when a ""newintent"" event gets fired. The activity's ""intent"" property returns the intent that originally launched/created the activity.    We can improve the usability of the app's ""newintent"" and intent-filter handling if the root activity's ""intent"" property was updated to the same intent provided by the ""newintent"" event.    Note that {{Ti.App.Android}} provides a [launchIntent|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.App.Android-property-launchIntent] property which already provides the intent used to launch/create the root activity. So, we're not losing anything by making this change.    Also, it's currently possible to miss the ""newintent"" event on app startup, before the ""app.js"" has a chance to set up a listener for it.      "
"TIMOB-26637","New Feature","Android",1,"Android: Add ""rootActivity"" property to Ti.Android module","*Summary:*  The {{Ti.Android}} module supports a ""currentActivity"" property. used to access the top-most activity displayed by the app.    We could improve the usability of the ""newintent"" event and intent-filter handling if we provided easy access to the app's root activity as well. This is because the root activity's is the one that's being updated when the native Java {{Activity.onNewIntent()}} method gets called. Currently, the only way to set up ""newintent"" handling is to do so before opening a {{Ti.UI.Window}}.    *Proposed Solution:*  Add a new ""rootActivity"" property to the {{Ti.Android}} module.  "
"TIMOB-26636","Improvement","Android",1,"Android: Remove deprecated ""newIntent"" event in favor of ""newintent""","*Summary:*  The {{Ti.Android.Activity}} object currently supports events ""newIntent"" and ""newintent"". The ""newIntent"" event was deprecated in the past in favor of ""newintent"" with a lower-case 'i'. We should remove it in Titanium 8.0.0.          *Note:*  Ideally, we should log a warning when JS code attempts to add a listener to the deprecated ""newIntent"" event to avoid confusion/tech-support issues."
"TIMOB-26645","Improvement","Android",3,"Android: Calling finish() on root splash screen activity should exit the app","*Summary:*  Calling {{Activity.finish()}} on the root splash screen activity should automatically close all child windows/activities and exit out of the app.    It should only work this way for the root activity. Finishing/closing an activity in the middle of the stack should not automatically close the child activities.    *Note:*  This is mostly needed for Titanium apps launched via the Java {{startActivityForResult()}} method. In this case, the Titanium developer must call the {{Activity.setResult()}} method on the root activity and exit out to respond to the other app with the result. You typically call {{Activity.finish()}} just after {{Activity.setResult()}} when following Google's examples.    *Steps to reproduce:*  # Build and run with the below code on Android.  # Tap on the ""Close"" button.  # Notice that the app does not exit out.      "
"TIMOB-26651","Bug","Windows",5,"Windows: Ti.Locale.setLangauge result is delayed","In our unit tests, we attempt to change languages and ensure we end up pulling the correct translation strings. Windows behaves oddly in that the language does get changed immediately in our model, but it still pulls the translation strings from the old language for a little while.    So ~3 tests fail in order by using the wrong language's strings, and it appears to be using the previous test's language. I'm not sure if there's some caching going on, or overriding the language is really done async - or maybe when we ask for the ResourceLoader for the current view it's outdated because it needs to load async when primary language changes?"
"TIMOB-26649","Bug","LiveView",3,"[LiveView] Unable to use LiveView with KitchenSink-v2","When trying to use liveView with KitchenSink the application throws the following error:      *Steps to reproduce*  # Download {{KitchenSink-v2}}  # Download the latest SDK version {{appc ti sdk install -b master -d}}  # In the project directory run the following command {{DEBUG=liveview:* appc run -p ios --liveview}}  # Above error is thrown in the console and an error can be seen in the iOS simulator     *Actual result*  Above error can be seen.    *Expected result*  Application should show no error and LiveView should work with KitchenSInk without any issues. "
"TIMOB-26648","Improvement","Windows",3,"Windows: ability to override global functions","Relates to https://github.com/appcelerator/HAL/pull/86 , https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/timers.test.js#L170-L176 and https://github.com/appcelerator/titanium_mobile/blob/master/common/Resources/ti.internal/extensions/binding.js    We already modified this behavior on iOS to allow to override global functions like `setTimeout`, which is typical of an environment like Node and is assumed by some of the popular JS testing frameworks.    I also ran into issues in overriding the standard require function in an effort to introduce cross-platform JS implementations of node-compatible ""core"" modules.    iOS PR: appcelerator/titanium_mobile#10155  unit tests we're skipping on Windows due to this        Expected: `Overridden require` should be shown before requiring files.  "
"TIMOB-26654","Story","Android",1,"Hyperloop Android:  How to get access the views in the inflate  layout","Hello!  How to get access the views in the inflate layout on android hyperloop? We have a button in inflate layout and we want to set button text form our js file.    Test code :  {code}  var window = Titanium.UI.createWindow();    var OnValueChangeListener = require('android.widget.NumberPicker.OnValueChangeListener');  var OnClickListener = require('android.view.View.OnClickListener');  var Activity = require('android.app.Activity');  var Button = require('android.widget.Button');  var Context = require('android.content.Context');  var LinearLayout = require(""android.widget.LinearLayout"");  var Inflater = require('android.view.LayoutInflater');  // var numberOnclickListener =  // require('android.content.NumberPicker.OnClickListener');    var activity = new Activity(Ti.Android.currentActivity);  var layout = new LinearLayout(activity);    var viewLayout = new LinearLayout(activity);    var okButton = new Button(activity);  // var field = new Field();  var cancelButton = new Button(activity);    var inflater = Inflater.cast(activity.getApplicationContext().getSystemService(    Context.LAYOUT_INFLATER_SERVICE));    var resId = activity.getResources().getIdentifier('button', 'layout',    activity.getPackageName());  var view = inflater.inflate(resId, null);  // numberPicker1 = activity.getResources().getIdentifier(""button"", ""id"",  // activity.getPackageName());  // numberPicker1.setMinValue(1);  // numberPicker1.setMaxValue(9);  var resid = Titanium.App.Android.R.id.cancelButtton;  // var id =  // Ti.Android.currentActivity.getIdentifier(Ti.Android.R.cancelButtton);  var myButton = new Button(view.findViewById(resid));  myButton.setText(""Hello!"");  window.add(view);    window.open();  {code}   Place it to the [app]/platform/android/res/layout/  {code:xml}  <?xml version=""1.0"" encoding=""utf-8""?>  <LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android"" xmlns:app=""http://schemas.android.com/apk/res-auto"" xmlns:tools=""http://schemas.android.com/tools"" android:layout_width=""match_parent"" android:layout_height=""match_parent"" android:orientation=""vertical"" android:gravity=""center_horizontal"" android:id=""@+id/parent_view"">   <LinearLayout android:id=""@+id/numberPickerViews"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:layout_gravity=""center"" android:orientation=""horizontal"">    <NumberPicker android:id=""@+id/numberPicker"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:layout_gravity=""center"" android:visibility=""visible"" />    <NumberPicker android:id=""@+id/numberPicker2"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:layout_gravity=""center"" android:visibility=""visible"" />    <NumberPicker android:id=""@+id/numberPicker3"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:layout_gravity=""center"" android:visibility=""visible"" />   </LinearLayout>   <LinearLayout android:id=""@+id/timeSetView"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:layout_gravity=""center"" android:orientation=""horizontal"">    <Button android:id=""@+id/setButtton"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:textColor=""@android:color/holo_blue_light"" android:text=""OK"" android:textAlignment=""center_horizontal"" android:gravity=""left"" android:textStyle=""bold"" android:textAlignment=""center"" />    <Button android:id=""@+id/cancelButtton"" android:layout_width=""wrap_content"" android:layout_height=""wrap_content"" android:textColor=""@android:color/holo_blue_light"" android:textStyle=""bold"" android:gravity=""right"" android:textAlignment=""center"" />   </LinearLayout>  </LinearLayout>  {code}    Test Environment:  {code}  Operating System    Name                        = Microsoft Windows 10 Pro    Version                     = 10.0.17134    Architecture                = 32bit    # CPUs                      = 4    Memory                      = 17091956736  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.1.1  Titanium SDK    SDK Version                 = 7.5.0.GA  {code}  Thanks "
"TIMOB-26662","Bug","Android",5,"Android. TableViewRow bugs","Currently on Android TableViewRow:  # always returns zeroes for {{getRect}} method (and rect {{property}})  # does not grow in height beyond original size (but can shrink)      "
"TIMOB-26660","New Feature","Tooling",5,"Support native modules in Karma Titanium Launcher","[karma-titanium-launcher|https://github.com/appcelerator/karma-titanium-launcher] currently supports testing for Apps and JS modules. Covering native modules is the last missing piece for a complete unit testing environment.    The workflow for unit testing of native modules should be as follows:  * Build the module for the current platform we are testing  * Create a temporary project serving as the test runner and integrate the built module into that project  * Run the test runner and spit out results  * Tests can be configured as usual with the Karma config. For example, tests for all platform can reside in {{<project-dir>/test}} with additional tests for each platform in the respective platform folder, i.e. {{<project-dir>/android/test}}."
"TIMOB-26664","Bug","Windows",3,"Windows: Ti.Geolocation.lastGeolocation should return string","{{Ti.Geolocation.lastGeolocation}} should return string. On Windows, it returns object.        Expected: It should print {{string}}.  "
"TIMOB-26669","New Feature","TiAPI",8,"TiAPI: Create Node-compatible assert module API","It'd be useful to create equivalents of some of the core Node modules in Titanium so that users could port/re-use node codebases on mobile devices. Some of the more common modules could map relatively easily to devices, and would be worth investigating.    https://nodejs.org/api/assert.html"
"TIMOB-26667","Bug","Windows",3,"Windows: Ti.Locale.getString should ignore non-string default value","If the supplied ""default"" value is a non-string, we should now ""reject"" it and treat it as if no default fallback was given. If no default was given, the original key is returned when no corresponding value is found.        Expected: key should be returned."
"TIMOB-26674","Improvement","iOS",3,"iOS: Un-deprecate ""Ti.UI.TabbedBar"" and deprecate ""Ti.UI.iOS.TabbedBar""","*Summary:*  We're adding {{Ti.UI.TabbedBar}} support to Android for parity. See [TIMOB-25953].    iOS currently has {{Ti.UI.TabbedBar}} flagged as deprecated in favor of {{Ti.UI.iOS.TabbedBar}}. Since Android will be have this feature soon, we should un-deprecate {{Ti.UI.TabbedBar}} on iOS and deprecate the other."
"TIMOB-26672","Bug","iOS",5,"iOS: Application crashes on launch on iOS9","h5.Description    Running a default application to iOS 9 crashes on launch with the below (this isn't logged either fwiw). This looks to be down to the usage of {{const}}, if I change addBinding to be declared with {{var}} it works, if I enable transpilation it work. I will investigate this further as there is usage of const/let throughout the new os/path code so I assume they will error.        h5.Steps to reproduce    # Create a default application  # Build it for iOS 9 (sim or device"
"TIMOB-26686","Improvement","Android",3,"Android: Allow Ti.Network.HTTPClient ""file"" parameter to be set to Ti.Filesystem.File object like iOS","*Summary:*  On Android, the {{Ti.Network.HTTPClient}} ""file"" property can only be set to a {{string}}.  On iOS, the ""file"" property can be set to a {{string}} or {{Ti.Filesystem.File}} object.    We should add {{File}} object support on Android for parity.    *Community PR:*  https://github.com/appcelerator/titanium_mobile/pull/10532  "
"TIMOB-26690","Bug","Windows",8,"Windows: TabGroup does not fire open/close events","Our TabGroup unit test suite has to skip a number of tests on Windows due to lack of firing key events like open, close, focus, blur. We should be firing those events for TabGroups (and Tabs)!"
"TIMOB-26689","Bug","Windows",8,"Windows: Wrong height for TableViewRow with Label","The height of first TableView row is rendered too big compared to other rows when row has a Label with relative width (e.g. ""_80%_"").        Expected: The height of first row should have same height with other rows.  "
"TIMOB-26705","Bug","iOS",2,"iOS: Ti.App._restart() crashes application","h5.Description    Calling the hidden {{Ti.App._restart();}} method on iOS crashes with the below, this is bad as it's used in liveview to restart the app.        h5.Steps to reproduce    1. Add the code below to and app.js    2. Click the window    h5.Actual    Above crash    h5.Expected    App should restart back to the clean state"
"TIMOB-26704","Bug","LiveView",5,"LiveView: Transpilation does not work if not set in tiapp","h5.Description    LiveView pulls whether it should transpile from the tiapp which was fine while it was opt-in (but it was still a bad thing), now it's opt-out the method needs to be updated.    h5.Steps to reproduce    1. Run kitchensink-v2 with liveview and transpile removed from the tiapp to ios (you'll probably hit TIMOB-26649, just follow the workaround)    h5.Actual  Error like below due to not transpiling      h5.Expected    No error"
"TIMOB-26702","Improvement","Windows",13,"Windows: Make HAL more lightweight"," HAL is heavy weight framework that is not quite efficient. We might be able to make it more lightweight."
"TIMOB-26700","Improvement","Windows",13,"Windows: Optimize UI rendering calls","Optimize UI rendering calls in our layout engine. "
"TIMOB-26713","Bug","Android",8,"Android: TabGroup ""tabsBackgroundColor"" property ignored when landscape","*Summary:*  {{TabGroup}} property ""tabsBackgroundColor"" will only apply the color to the top tab bar's background when the app is shown in ""portrait"" orientation. When ""landscape"", the color is ignored and will use the ActionBar's background color instead.    Not that this is because the tab bar is moved inside of the ActionBar when landscape. The work-around is to set the ActionBar's ""primaryColor"" via an XML theme instead. Also, note that implementing tab bars via an ActionBar is considered deprecated as of Android 5.0 as well.    *Steps to reproduce:*  # Build and run the below code on Android.  # Hold the device portrait.  # Notice that the top tab bar's background color is red. (This is good.)  # Rotate to landscape.  # Notice top tab bar is dark gray. (This is the issue.)        *Result:*   !TabGroupPortrait-Good.png|thumbnail!  !TabGroupLandscape-Bad.png|thumbnail!     *Expected Result:*   !TabGroupPortrait-Good.png|thumbnail!  !TabGroupLandscape-Good.png|thumbnail!   "
"TIMOB-26714","Bug","Android",8,"Android: TabGroup ""tabsBackgroundSelectedColor"" property is ignored","*Summary:*  Titanium documents that Android (and Windows) {{TabGroup}} supports a [tabsBackgroundSelectedColor|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.TabGroup-property-tabsBackgroundSelectedColor] property which sets the background color of the currently selected tab. This property is ignored on Titanium 6.0.0 and newer versions. (It might have stopped working before 6.0.0; have not confirmed.)    *Steps to reproduce:*  # Build and run the below code on Android.  # Notice that the selected tab's background color is not red.        *Result:*   !TabGroup-bad.png|thumbnail!     *Expected Result:*   !TabGroup-good.png|thumbnail!   "
"TIMOB-26719","Bug","Android",3,"Android: ListView no longer applying default row height","*Summary:*  {{ListView}} rows are supposed to have a default height if the template doesn't have one. On Android, the default height used to be {{45dp}} (assigned [here|https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/listview/TiDefaultListViewTemplate.java#L90]). As of Titanium 8.0.0, the default height is no longer being applied and the rows are auto-sizing to fit the height of the row's contents instead.    *Steps to reproduce:*  # Build and run the below code on Android.  # Notice that the rows just-fit the height of the row text. (This is the problem.)        *Result:*   !ListView-bad.png|thumbnail!     *Expected Result:*  This is how it used to work in Titanium 7.x.x.   !ListView-good.png|thumbnail!     *Note:*  We can't solve this issue by setting a min height to the row's root layout. While that would work, Titanium app developers have spoken out in the past that they don't want this behavior as can be seen in [TIMOB-19812]. We removed the min height as of Titanium 6.0.0 and we need to keep this behavior. But it's okay to apply a default height if one was not specified.  "
"TIMOB-26726","Improvement","LiveView",1,"Liveview: Autokill server after a period of time","h5.Description      It was suggested to autokill the liveview server if we receive no input for a certain amount of time.    https://github.com/appcelerator/liveview/pull/119"
"TIMOB-26725","Bug","LiveView",1,"Android: Liveview closes file/event server process after the first app reload & stops working","NOTE: To make liveview work with 8.0.0 use latest studio 5.1.2 from jenkins.    h5.Steps to reproduce:  1. Create a default app.  2. Enable liveview.  3. Build for android device/emulator.  4. After the app launches make changes to initiate app reload.  5. Make another change & again initiate app reload.    h5.Actual results:  1. Liveview closes the file/event server process & stops working :    2. I also get these warnings:      h5.Expected result:  1. Liveview should not close the file/event server & work as expected.    Additional logs:  "
"TIMOB-26724","New Feature","Android",0,"Android: How to achieve a service that can continue to run at regular intervals, even if the device goes to sleep.","Hello!  What we are trying to achieve is a service that can continue to run at regular intervals, even if the device goes to sleep. If calling ""foregroundNotify"" is meant to make the service run as a foreground service and foreground services are meant to behave like this, then why is this is not working?  What we are trying to achieve is an app that can regularly poll a user's position (using location services), even if the app is in the background.  Test Code:  {code}  function monitorLocation() {   function start() {    Ti.Geolocation.accuracy = Ti.Geolocation.ACCURACY_HIGH;    Ti.Geolocation.addEventListener(""location"", function(e) {     Ti.Media.vibrate();     Ti.API.info(""@@@ Location Received: "" + JSON.stringify(e.coords));    });   }   var hasPermission = Ti.Geolocation     .hasLocationPermissions(Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE);   if (!hasPermission) {    Ti.Geolocation.requestLocationPermissions(      Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE, function(e) {       if (e.success) {        start();       }      });   } else {    start();   }  }    var SECONDS = 20;    var intent = Ti.Android.createServiceIntent({   url : 'Service.js'  });  intent.putExtra('interval', SECONDS * 1000);  var service = Ti.Android.createService(intent);    service.start();  var window = Ti.UI.createWindow();  window.addEventListener(""open"", function(e) {   monitorLocation();  });    window.addEventListener(""open"", function(e) {   const forPermissions = [ 'android.permission.FOREGROUND_SERVICE' ];   Ti.Android.requestPermissions(forPermissions, function(e) {    if (e.success) {     Ti.API.info('SUCCESS');    } else {     Ti.API.info('ERROR: ' + e.error);    }   });  });    window.open();  {code}  Service.js  {code}  Ti.API.info(""@@@ Service started."");    // Gets an intent used to resume the app if running in the background.  function getAppResumeIntent() {   var intent = Ti.App.Android.launchIntent;   if (!intent) {    intent = Ti.Android.createIntent({});   }   return intent;  }    // Put this service into the foreground state.  var notificationId = 123;  Ti.Android.currentService.foregroundNotify(notificationId, Ti.Android.createNotification({   contentTitle: ""Foreground Service"",   contentText: ""Content Text"",   contentIntent: Ti.Android.createPendingIntent({    // Using the launch intent will resume the app when tapped.    intent: getAppResumeIntent(),   }),  }));  {code}  {code:xml}    <android xmlns:android=""http://schemas.android.com/apk/res/android"">          <services>     <service type=""interval"" url=""Service.js""/>    </services>    <manifest>           <uses-permission android:name=""android.permission.FOREGROUND_SERVICE""/>          </manifest>      </android>  {code}    On running this app, sure enough, it will consistency poll every 20 seconds as expected.  However, if you unplug the device (no longer being charged) and leave it unattended for 5 minutes, you will find that the polling stops almost as soon as the device goes to sleep. You can see this even with your supplied logic because a new notification titled ""Foreground Service"" should be received / updated every 20 seconds but you will find that it won't until you wake the device again (sending a unique notificationId may help to see multiple notifications rather than the 1 being overridden every time).    Basically, what I'm saying is we are experiencing the exact same issue on our application in that the service (doesn’t seem to matter if it’s a 'started' / 'bound 'or 'foreground' service) seems to simply stop processing when the device goes to sleep and will only start again when the device wakes up. THIS IS ONLY SEEN WHEN THE DEVICE IS NOT CONNETED TO A POWER SOURCE E.G. CONNETED TO A COMPUTER TO DEBUG.    *Note*:   On looking at previous posted solutions, I have seen some people saying to use a local notification with a ""wake lock"" (see ticket TIMOB-24629) or by using something known as Ti.Android.currentService.foregroundNotify (see ticket [TIMOB-16066|https://jira.appcelerator.org/browse/TIMOB-16066]) but both solutions don't appear to have any official documentation as to how to fully implement.    Note: Test Devices android 8 "
"TIMOB-26729","Improvement","TiAPI",13,"TiAPI: Ship baseline polyfills in built SDK","As part of our ES6/7/8 support we now use babel transpilation via preset-env and polyfills. Currently, we are injecting polyfills based on usage during the transpiration process. The avoids unnecessary polyfills, but may lead to the same polyfills being required across many files.    We can potentially move the polyfills into the app bootstrapping core js code we ship in the SDK itself so that the polyfills are required only once at startup.    Pros:  - potential speed boost when making use of polyfills by only loading them once (though also a potential startup perf hit!)  - make use of polyfills in our core js bootstrap code  - remove special polyfill copying done in node-titanium-sdk during app builds    Cons:  - shipping polyfills twice in built SDK right now (under node-titanium-sdk and in the bootstrap code) - can be fixed by removing from node-titanium-sdk  - no gain (but instead a perf hit!) if these polyfills are't actually being used"
"TIMOB-26727","Bug","Hyperloop",5,"Hyperloop: Android app using hyperloop 4.0.0 hangs on splash when built with 7.5.0.GA & latest 7.5.1 ","h5.Steps to reproduce:  1. Create a default app having hyperloop 4.0.0.  2. Build for Android device/emulator.    h5.Actual result:  1. App is stuck at splash at launch & we do see this error in logcat:      h5.Expected result:  1. App should not be stuck on the splash screen & should launch fine."
"TIMOB-26740","Story","Hyperloop",2,"Update Hyperloop to 4.0.1","Due to TIMOB-26727 we need a new version of Hyperloop compiled with the latest 8_0_X branch."
"TIMOB-26742","Bug","iOS",13,"TiAPI: App launch slowed down by 2-5 seconds in SDK 8","When using SDK 8, the app launch is now extremely slow. It looks like the ""core-js"" libraries take waaay to long. It needs to be solved differently in order to be used in production apps. Any kind of logs or insight in our app can be shared with the core team."
"TIMOB-26748","Bug","Windows",3,"Windows: Always send full analytics payload","- Always send full analytics payload for parity with iOS and Android  - Update endpoint to V4"
"TIMOB-26746","Bug","Android",3,"Android: Ti.App wrongly fires pause/resume event when opening/closing child windows","*Summary:*  {{Ti.App}} events ""pause"" and ""paused"" must only be fired when the app is put into the background. Events ""resume"" and ""resumed"" are to be fired when the app is returned to the foreground (include cold app startup).    Android correctly does the above when put into the background and foreground.    However, Android will also fire a ""pause"" and ""resume"" event when opening or closing a child window. This does not follow iOS' behavior and is a parity issue.    *Note:*  To be fair, the current pause/resume event behavior is how it natively works with Android's individual activities. However, app developers need these events to disable sensors when backgrounded and re-enable them when put back into the foreground, which is currently difficult to do in Titanium for the moment.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap the ""Open Child"" button.  # Observe the log.  # Notice that pause and resume events were logged. _(This is the bug.)_      "
"TIMOB-26758","Bug","Android",5,"Android: Changing TabbedBar properties ""labels"" and ""index"" before opening window causes a crash","*Summary:*  Changing {{Ti.UI.TabbedBar}} properties ""labels"" or ""index"" after creating the tabbed bar but before its parent window will cause a crash.    This is a parity issue. iOS allows these properties to be changed dynamically.    *Steps to reproduce:*  # Build and run the below code on Android.  # On app startup, notice it crashes.        *Result:*  Will get the below error when setting the ""labels"" property.  {code}  [ERROR] TiExceptionHandler: Error: Attempt to invoke virtual method 'void ti.modules.titanium.ui.widget.TiUITabbedBar.setNewLabels()' on a null object reference  {code}    Will get the below error when setting the ""index"" property.  {code}  [ERROR] TiExceptionHandler: Error: Attempt to invoke virtual method 'void ti.modules.titanium.ui.widget.TiUITabbedBar.setSelectedIndex(int)' on a null object reference  {code}    *Work-Around:*  Move all property {{TabbedBar}} property changing code to the window's open event handler.    Or avoid setting these property dynamically and assign them once via its creation properties.  {code:javascript}  var window = Ti.UI.createWindow();  var tabbedBar = Ti.UI.createTabbedBar({   labels: [""One"", ""Two"", ""Three""],   index: 1,  });  window.add(tabbedBar);  window.open();  {code}  "
"TIMOB-26767","Improvement","CLI|iOS",3,"Auto-select only valid certificate and/or provisioning profile when building to device","Don't make the user select their provisioning profile and development certificate when building to a device if there's only one valid option. It's pointless to ask them to choose from only one possible value."
"TIMOB-26766","Bug","Hyperloop|Windows",5,"Windows: Timeout error thrown when installing to wp-device ","When building to windows device a time out error is thrown     # Create a mobile app   # Build to device     *Actual*  *Error*      *Expected*  No error   "
"TIMOB-26772","Bug","iOS",0,"iOS: ListView with attributed strings shows ""Invalid type passed to function"" error.","*Issue Description:*  When I try to build a project using listView attributed string on iOS, it shows the following error on latest ti SDK 7.5.0.GA    *Error Log:*      *Steps to Reproduce:*  1. Replace index.xml, index.js, index.tss with the following test code.  *index.xml*      *index.js*      *index.tss*      2. Build the project on iOS simulator and observe the error.    *Expected:* ListView attributed string should work  *Actual:* It doesn't work, generates the said error.  "
"TIMOB-26774","Bug","Android",5,"Android: When backgrounded, data intent no longer re-executes ""app.js"" as of 7.5.0","*Summary:*  If the Android app's UI is in the background and you attempt to launch it via a data intent (aka: URL scheme, notification, or {{startActivity()}} intent), then the app's splash screen will be displayed but nothing will happen. This is a *regression* as of 7.5.0. Titanium 7.4.2 and older versions would re-execute the ""app.js"" in this case.    *Cause:*  What's happening is that a new UI activity stack is being created by the data intent while an existing UI stack already exists in the background. Titanium only supports running 1 JavaScript runtime at a time (does not support multiple JS runtimes). So, when the 2nd UI stack is displayed, it attempts to load the ""app.js"" when it was already loaded before.    In Titanium 7.4.2 and older versions, Titanium would re-execute the ""app.js"" for the JavaScript runtime, even though it was already loaded before. This was unintended behavior, but some app developers depend on this behavior.    As of 7.5.0, Titanium now loads a ""ti.main.js"" script on startup (our bootstrap script) and then loads the ""app.js"" via the {{require()}} function. But for the 2nd UI stack, since it's re-using an existing JavaScript runtime and the ""app.js"" was loaded before, the {{require()}} function won't re-execute the script and returns a cached module instead. This behavior is technically correct, but the old unexpected behavior is what's desired for Titanium 7.5.x.    *Note:*  As of Titanium 8.0.0, the above is not an issue. Intent handling was refactored in 8.0.0 to guarantee that only one UI stack exists at a time. Data intents will instead resume the existing UI stack like how iOS works. See [TIMOB-26075] for more details.    *Steps to reproduce:*  # Create a classic Titanium app.  # Set project name to ""IntentTest"". (This is {{<name/>}} in ""tiapp.xml"".)  # Set project's ""Application Id"" to ""com.appc.intent.test"". (This is {{<id/>}} in ""tiapp.xml.)  # Set up the ""app.js"" with the below code.  # Build and run on Android.  # Wait for the app to launch.  # Open the Mac ""Terminal"" app.  # CD (change directory) to: {{~/Library/Android/sdk/platform-tools}}  # In the terminal, enter: {{./adb shell am start -n com.appc.intent.test/.IntenttestActivity -a android.intent.action.VIEW -d https://www.google.com -f 0x04000000}}        *Result:*  A new splash screen window instance is displayed, but doesn't show the window and label implemented via the ""app.js"" code.    *Expected Result:*  It should re-execute the ""app.js"" when 2nd UI stack is displayed to maintain old behavior.    ----  *Original Description*  ----  Using 7.5.0.GA, application gets stuck on the splash screen when navigating back from the TargetApp towards the SourceApp after having the TargetApp opened from the SourceApp. Using 7.4.2.GA, it was working fine.    If you make 2 apps use the code below and tap their buttons to launch the other app, you can reproduce this behavior.   [^SourceApp.js]  [^TargetApp.js] "
"TIMOB-26778","Bug","Android",3,"Android: Default ""configChanges"" settings are lost when overriding root activity in ""tiapp.xml""","*Summary:*  Titanium generates an ""AndroidManifest.xml"" when building an Android app. By default, the root activity will be assigned the following ""android:configChanges"" settings:  * keyboardHidden  * orientation  * fontScale  * screenSize  * smallestScreenSize  * screenLayout  * density    But if you override the root activity in the ""tiapp.xml"" without setting the ""android:configChanges"" yourself, then most of the above settings will be lost in the generated ""AndroidManifest.xml"". Only the below will be remaining.  * screenSize  * density    *Why is this a problem:*  By default, the Android OS will destroy and recreate the window activity when a system event such as an ""orientation"" change occurs. Since ""android:configChanges"" such as ""orientation"" is lost in this case, rotating the app while its loading at the splash screen will cause the app to reload every time you change orientation.    Also note that app developers often do override the root activity in the ""tiapp.xml"" in order to set up their own custom intent-filters or to apply their own theme to the splash screen (such as a translucent status bar). So, this is a commonly done.    *Steps to reproduce:*  1. Create a Titanium app with project name ""MyApp"".  2. Insert the below XML into your ""tiapp.xml"".  3. Set up the ""app.js"" as shown below. It should be blank.  4. Build and run the app.  5. Verify the following gets logged on startup: {{MyApp 1.0 (Powered By Titanium ...)}}  6. Rotate the app from portrait to landscape or vice-versa.  7. Notice the {{MyApp 1.0 (Powered By Titanium ...)}} gets logged again. _(This means the app restarted. This is bad.)_  8. Go to app project folder: {{./build/android}}  9. Open the ""AndroidManifest.xml"" file.  10. Look for an XML {{<activity/>}} element with name "".MyappActivity"".  11. Notice that the ""android:configChanges"" attribute only has settings {{""screenSize|density""}} defined. _(This is the issue.)_    app.js      tiapp.xml      *Expected Result:*  Titanium's default ""android:configChanges"" listed up above should always be included when overriding the root activity... *unless* the app developer sets the ""android:configChanges"" themselves, in which case we should honor the developer's settings.    *Note:*  This used to be a bigger issue in Titanium 7.4.1 and below since the ""app.js"" would have been re-executed every time you change orientation on startup.    In 7.5.0 and above, Titanium loads ""ti.main.js"" instead which is lighter-weight and its call to {{require(""app.js"")}} would have no-op'ed upon re-execution of ""ti.main.js"" since the ""app.js"" was already cached.    "
"TIMOB-26777","Bug","Android",3,"Android: Window UI disappears when connecting/disconnecting keyboard","*Summary:*  The Titanium window UI will disappear when doing the following on Android:  * Connect or disconnect a bluetooth keyboard.  * Open or close a phone's slide-out keyboard. (Like the old Droid devices.)    *Steps to reproduce:*  # Connect a bluetooth keyboard to an Android device.  # Launch a Titanium app on that device.  # Turn off the bluetooth keyboard (or pull the batteries out).    *Result:*  The UI disappears when the keyboard disconnects.    *Cause:*  Titanium generates an ""AndroidManifest.xml"" when doing an Android build. The Titanium {{<activity/>}} elements have an ""android:configChanges"" attribute which are missing the ""keyboard"" value. This is needed to override the Android OS' default behavior of destroying the activity and recreating it when a keyboard disconnects. (We overriding the ""orientation"" change event for the same reason.)  https://developer.android.com/guide/topics/manifest/activity-element#config    *Recommended Solution:*  We need to updating Titanium's ""AndroidManifest.xml"" template and/or ""_build.js"" to automatically add the ""keyboard"" setting to all activities that do not load UI from XML such as the root activity, TiActivity, JSActivity, etc.    *Work-Around:*  Add the following to the ""tiapp.xml"" to override the the ""keyboard"" handling yourself. Note that the activity name is based on the app's name. If the app's name is ""MyAppName"", then the activity name will be ""MyappnameActivity"".      "
"TIMOB-26776","Bug","Windows",8,"Windows: App launch failed with ""cyclic redundancy check"" error on device","Application fails to launch and throws runtime error on Windows 10 mobile device with ""cyclic redundancy check"" error (See screenshot attached)    *Steps to reproduce;*  # Create a new alloy application {{appc new}}  # Build to device {{appc run -p windows -T wp-device}}  # Build to device again {{appc run -p windows -T wp-device}}    "
"TIMOB-26782","Story","Windows",5,"Windows: Error thrown when installing a packaged application to device using wptools","When installing a packaged windows application to a device the error below is thrown        *Steps to Reproduce*  # Create an alloy application  # Package the application to windows phone {{appc run -p windows -T dist-phonestore}}  # Follow the prompts   # Install the packaged application to device {{""C:\Program Files (x86)\Windows Kits\10\bin\x86\WinAppDeployCmd.exe"" install -file <appxbundle location> -ip 127.0.0.1}}  "
"TIMOB-26779","Bug","Android",2,"Android: Ti.UI.Android.SearchView only icon responds to search","- Pressing the SearchView bar does not gain focus and ability to search, only the icon responds.    *TEST CASE*  {code:js}  const win = Ti.UI.createWindow({ backgroundColor: 'gray' });  const search = Ti.UI.Android.createSearchView();  const table = Titanium.UI.createTableView({      data: [          Ti.UI.createTableViewRow({ title:'Apple' }),          Ti.UI.createTableViewRow({ title:'Banana' }),          Ti.UI.createTableViewRow({ title:'Orange' }),          Ti.UI.createTableViewRow({ title:'Raspberry' })      ],      search: search,      searchAsChild: true  });    win.add(table);  win.open();  {code}"
"TIMOB-26785","Bug","CLI",5,"Cease the inclusion of SOASTA in the SDK from 8.0.0+","SOASTA will not be supported for SDK 8.0.0+ . The module should no longer be available from that SDK version forward."
"TIMOB-26795","Bug","iOS",5,"iOS: Event listener on overlay is not working for camera when camera is kept idle for a few minutes","On click of simple label/button, we open the camera and one overlay is added on the camera view to show close/capture/gallery icons.   Following are the steps to reproduce the issue.      Case 1:  *  Open the application.  *  Click on the label to open the camera.  *  Keep app in the background for 1 or 2 minutes.  *  Open again  *  When we click Close button on the camera overlay, It is not clickable.      Case 2:  *  Open the application  *  Click on the label to open the camera.  *  Keep app in the foreground for few minutes.  *  Same here, when we click Close button on the camera overlay, It is not clickable."
"TIMOB-26792","Bug","Android",2,"Android: Text cursor should change color according to text color","- The text cursor maintains the color set by the parent theme, this can cause the cursor to disappear light backgrounds. The cursor should match the font color.  {code:js}  const win = Ti.UI.createWindow({ backgroundColor: 'white' });  const textArea = Ti.UI.createTextArea({ color: 'black' });  win.add(textArea);  win.open();  {code}"
"TIMOB-26791","Bug","Windows",8,"Windows: Ti.UI.View reports top/left/bottom/right values as Strings always","I'm in the process of updating our test suite to use the latest {{should.js}} library, which now uses a stricter equality check. As a result, the tests are now flagging a number of windows UI tests as failing due to comparisons against expected numeric values. (the comparison used to do {{==}} but now do {{===}} so won't coerce to Number)    Turns out we're reporting string values for top/left/right/bottom always on Windows where we report Numbers on Android/iOS. The properties themselves are Number or String, so Strings can be valid but would typically be reported when followed by the ""unit"" (i.e. ""px"", ""em"", ""%"").    For parity's sake, I think it'd be good to report the values as Numbers when they're purely numeric/have no units explicitly attached."
"TIMOB-26789","Bug","Android",3,"android: Ti.Buffer#clone() will copy over null type/value properties to cloned Buffer when undefined on original","Due to an updated {{shouldjs}} library, equality checks are stricter, exposing this bug where a clone Ti.Buffer will inherit {{null}} values for {{type}}/{{value}} when they're {{undefined}} on the original."
"TIMOB-26788","Bug","Android|iOS|Windows",5,"require fails on directory with package.json whose 'main' field points at another directory","If you attempted to require a directory (or npm package) that held a package.json in it whose 'main' field pointed at another directory - it failed to properly resolve that."
"TIMOB-26798","Bug","Tooling",13,"Angular: Project template is outdated ","Hello!  The *appc new -t app --ng* template is outdated. webpack.optimize.CommonsChunkPlugin has been removed, please use config.optimization.splitChunks instead.  Steps :   1. Create a new Angular project: *appc new -t app --ng*  2. Build and run Angular project : *appc run -p android*    *Error Log*:  "
"TIMOB-26797","Bug","Windows",5,"Windows: removeEventListener removes wrong callback","{{removeEventListener}} removes wrong callback. If module has multiple callbacks with same name, {{removeEventListener}} always removes first one only.        Actual: {{func1}} called once and {{func2}} & {{func3}} are called twice.  Expected: all {{func2}} should be removed and {{func1}} & {{func3}} should be called twice.  "
"TIMOB-26822","Improvement","Android",5,"Android: Improved customization of Ti.UI.Android.SearchView","Expose new properties to improve the customization of Ti.UI.Android.SearchView. They are as follow:   - {{iconSearchColor}} - color of the Search icon in collapsed view   - {{iconSearchCloseColor}} - color of the Search Close button in expanded view   - {{iconSearchHintColor}} - color of the default Search Hint icon"
"TIMOB-26860","Bug","iOS",8,"iOS: HTML assigned to WebView ""html"" property is unable to access app's local files as of 8.0.0.RC","*Summary:*  When loading an HTML string to a {{WebView}} via its ""html"" property, it is no longer able to access the app's local files under the ""Resources"" directory as of Titanium 8.0.0.RC.    *Steps to reproduce:*  # Create a Classic ""Default Project"" app.  # Replace the ""app.js"" code with the below code.  # Build with Titanium 8.0.0 and run on iOS.  # Notice that an image failed to load within the web view.  # Build with Titanium 7.5.x and run on iOS.  # Notice that the image successfully loaded within the web view.        *Note:*  Loading local resource files via {{app://Resources/}} also fails to load on iOS in Titanium 8.0.0.RC, but worked in older versions. Note that this URL scheme is undocumented and is not supported on Android.    *Work-Around:*  On iOS, the {{WebView.setHtml()}} method supports a 2nd argument where you can provide a ""baseURL"" parameter. This parameter allows you to set the directory (or URL) that file paths should be relative to. So, the below will work-around the problem.        \\  ----  *Original Bug Report Below*  ----  The upcoming change in 8.0 from UIWebView to WKWebView is major and because of my reliance on the WebView I wanted to start testing this. There is a ticket TIMOB-26095 that indicates the transition is complete and tested, but there are so many use cases that are not included in the sample tests provided that I have major concerns.    For example, I cannot get local resources like images to be rendered inside the WebView.    Test case:      Works fine in SDK 7.5.1, but the image does not load in 8.0.  Am I doing something wrong? Is there a low-level change that I should know about for this?"
"TIMOB-26824","Bug","Android",3,"Android: Build resources can fail to copy correctly","- Application resources can sometimes fail to copy into the build directory, causing the build process to fail.    "
"TIMOB-26827","Bug","iOS",1,"iOS: Localised splash screen is not visible.","When I add the splash screen in the ""app/i18n/es/"" path I am not able to see the splash screen. I get a black screen.    *Steps to reproduce:*  1. Create an alloy project  2. Place a splash screen image In app/i18n/es/ folder   3. Under tiapp.xml, ensure the following are false    <ios>      <enable-launch-screen-storyboard>false</enable-launch-screen-storyboard>      <use-app-thinning>false</use-app-thinning>    4. Run the app on the iPhone device  5. Make sure there are no splash screen image under app/assets/iphone  5. Run the app, depending on the device language setting you should see the correct splash screen image.    Expected: Splash screen should be visible when the app launches.  Actual: A black screen is shown instead of a splash screen image.    Reference: https://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens-section-src-29004897_IconsandSplashScreens-Localizedsplashscreens    Note: It works in the Simulator.  "
"TIMOB-26826","Bug","Android",5,"Android: Hybrid module commonjs extensions crash application","- CommonJS extensions for native modules do not load and cause the application to crash    *TEST CASE*  - Build https://github.com/appcelerator-modules/ti.playservices  - Include in Titanium Application, should not crash on startup"
"TIMOB-26835","Bug","iOS",5,"iOS: Unable to get call pop menu from a webView","This is a regression from 7.5.0.GA. When pressing the call me button on an application using webView the call popup is no longer shown.     *Test Code*      *Expected result:*  Above test case should show a pop up asking the user to make a call     *Actual result:*  No pop is shown.   "
"TIMOB-26834","Bug","Android",5,"Android: NavigationView root window displays back button","When creating a basic NavigationWindow in Android it displays a back button (see attachment) where it shouldn't, since it is the root window.        Basically, the hello world app with a wrapping NavigationWindow    *Expected result*    It should not display a back button on root window"
"TIMOB-26833","Bug","iOS",1,"iOS: Two startup log messages are output","h5.Description    When building to iOS there are two startup logs {{\[INFO\]  <app_name/<app_version (<sdk_version>.<sdk_githash)}} output, see below        h5.Steps to reproduce    1. Build an app to an iOS sim or device    h5.Expected    In the logs there are two startup logs    h5.Actual    There should be one startup log"
"TIMOB-26843","Bug","Android",8,"Android: Getting/Setting TabGroup ""activeTab"" property before open causes a crash as of 8.0.0.RC","*Summary:*  Getting or setting the {{TabGroup}} ""activeTab"" property (or calling {{getActiveTab()}} or {{setActiveTab()}} methods) before the {{TabGroup}} has been opened causes a crash on Android as of Titanium 8.0.0.RC.    *Steps to reproduce*  # Build and run the below code via Titanium 8.0.0.RC on Android.  # Notice the app crashes on startup.    *Testcase*      *Expected*  No error is thrown and the seconf tab is in focus    *Actual*      *Note:*  It will crash when set via a {{Ti.UI.createTabGroup()}} creation property as well.    *Work-Around:*  You can set the active tab after the {{TabGroup}} has been opened as shown below.    "
"TIMOB-26841","Bug","Android",3,"Android: Reading TextField ""backgroundDisabledColor"" will crash if background/border color is assigned","Using Android SDK 7.5.0, text field touch start event is failing with below error.         *Test steps:*    1. Create a new project  2. Paste the sample test code and run on android device  3. After running, start touching on the text field and got the error.    *Test code:*    *Test Environment:*      Device:Huawei Y9 2018"
"TIMOB-26840","Bug","iOS",1,"iOS: The xcode project created upon build of titanium project gives error when run to iOS device","When we build a titanium mobile project using Ti SDK 8.0 the Xcode project created in the builds folder runs the project on device with errors.  This does not happen when we build project using Ti DK 7.5.0    Steps to reproduce:  1. Create a default titanium project  2. Build it for iOS  3. Open the xcode project created under /build/iphone/  4. Run that project to a iOS device    Actual Result:  An error is shown when the app is run  "
"TIMOB-26850","Bug","Android",3," Android: Activity callbacks onStop/onDestroy not invoked on main thread as of 7.5.0","*Summary:*  If ""tiapp.xml"" property ""run-on-main-thread"" is set to {{true}}, then the activity's {{onStop}} and {{onDestroy}} callbacks are not invoked upon app exit. This is a regression as of 7.5.0.    *Steps to reproduce:*  # Set ""tiapp.xml"" property ""run-on-main-thread"" to {{true}} as shown below.  # Use the below ""app.js"" code.  # Build and run on Android.  # Wait for the app to launch.  # Notice in the log that ""onStart()"" and ""onResume()"" were successfully called.  # Back out of the app to exit.  # Notice in the log that ""TopActivity.onStop()"", ""TopActivity.onDestroy()"", and ""RootActivity.onDesroy()"" did *+not+* get called.    *tiapp.xml*  {code:xml}  <?xml version=""1.0"" encoding=""UTF-8""?>  <ti:app xmlns:ti=""http://ti.appcelerator.org"">   <property name=""run-on-main-thread"" type=""bool"">true</property>  </ti:app>  {code}    *app.js*  {code:javascript}  function addActivityListenersTo(activity, name) {   if (!activity) {    return;   }   if (!name) {    name = ""Activity"";   }   activity.onCreate = function() {    Ti.API.info(""@@@ "" + name + "".onCreate() called."");   };   activity.onRestart = function() {    Ti.API.info(""@@@ "" + name + "".onRestart() called."");   };   activity.onStart = function() {    Ti.API.info(""@@@ "" + name + "".onStart() called."");   };   activity.onResume = function() {    Ti.API.info(""@@@ "" + name + "".onResume() called."");   };   activity.onPause = function() {    Ti.API.info(""@@@ "" + name + "".onPause() called."");   };   activity.onStop = function() {    Ti.API.info(""@@@ "" + name + "".onStop() called."");   };   activity.onDestroy = function() {    Ti.API.info(""@@@ "" + name + "".onDestroy() called."");   };  }    addActivityListenersTo(Ti.Android.currentActivity, ""RootActivity"");    var window = Ti.UI.createWindow();  window.add(Ti.UI.createLabel({ text: ""Activity Callback Test"" }));  window.addEventListener(""open"", function() {   Ti.API.info(""@@@ Window 'open' event fired."");  });  addActivityListenersTo(window.activity, ""TopActivity"");  window.open();  {code}    *Work-Around 1:*  If you are building with Titanium 7.5.x, then setting ""run-on-main-thread"" to {{false}} then the {{onStop()}} and {{onDestroy()}} callbacks will be successfully invoked.    *Work-Around 2:*  Add a listener to the {{Ti.UI.Window}} object's ""close"" event instead. This event is supported on both Android and iOS, making it a portable solution.  "
"TIMOB-26848","Improvement","Android",5,"Android: Re-add ""baseURL"" support to WebView.setHtml() that was removed in 6.0.3","*Summary:*  Titanium currently documents that the {{WebView.setHtml()}} method supports a 2nd argument on Android and iOS which can provide a ""baseURL"" setting. Android used to support this, but it was inadvertently removed in Titanium 6.0.3. This feature should be re-added since it's needed by ""iframes"" to indicate which URL an iframe's embedded paths are relative to.    For example, a YouTube video embedded within an iframe will not play on Android or iOS unless a ""baseURL"" of ""https://www.youtube.com"" is provided.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the video to attempt to play it.  # Notice that the video won't play. Instead it reads ""Video Unavailable"".  # Build and run on iOS.  # Tap on the video play it.  # Notice that the video plays fine. _(This is because the ""baseURL"" is being used.)_        *Work-Around:*  The ""baseURL"" is not needed if the webpage was loaded from the Internet (ie: the ""url"" property). That is, ""baseURL"" is only applicable when loading HTML from string. So, hosting the webpage on your own web server will work-around this problem.  "
"TIMOB-26847","Bug","Android",3,"Android: Fix stringify of custom TableView row","- Prevent exception when {{JSON.stringify}} a custom TableViewRow  "
"TIMOB-26854","Bug","iOS",5,"iOS: Crash when handling user-activies","When trying to handle user activities, the app experiences a hard crash because the underlaying completion handler passed to the {{NSOrderedSet}} is GC'd due to a memory leak. It can be fixed by properly {{copy}}'ing the completion handler.    I scanned other parts of the SDK where this can happen and fixed some more cases as well. I also fixed some duplicate method definitions / leftovers from the SDK 8 Swift support migration."
"TIMOB-26855","Improvement","Windows",8,"Windows: Add ""baseURL"" support to WebView.setHtml()","*Summary:*  Titanium currently documents that the {{WebView.setHtml()}} method supports a 2nd argument on Android and iOS which can provide a ""baseURL"" setting. Android used to support this, but it was inadvertently removed in Titanium 6.0.3. This feature should be re-added since it's needed by ""iframes"" to indicate which URL an iframe's embedded paths are relative to.    For example, a YouTube video embedded within an iframe will not play on Android or iOS unless a ""baseURL"" of ""https://www.youtube.com"" is provided.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the video to attempt to play it.  # Notice that the video won't play. Instead it reads ""Video Unavailable"".  # Build and run on iOS.  # Tap on the video play it.  # Notice that the video plays fine. _(This is because the ""baseURL"" is being used.)_        *Work-Around:*  The ""baseURL"" is not needed if the webpage was loaded from the Internet (ie: the ""url"" property). That is, ""baseURL"" is only applicable when loading HTML from string. So, hosting the webpage on your own web server will work-around this problem.  "
"TIMOB-26859","Bug","Android",5,"Android: Something broken with tabsBackgroundColor &tabsBackgroundSelectedColor on TabGroup refactoring -regression ","*Test Steps:*  1.Run the app  Tab1: background color: yellow  background selected color: red  Tab2/Tab3: background color: blue  background selected color: red  3. Go to Tab 3, click on button  4. Now the following must be true:  Tab1: background/background selected color remains UNCHANGED  Tab2/Tab3: background color: orange  background selected color: white    *Actual:*   changing the ""tabsBackgroundColor"" & ""tabsBackgroundSelectedColor"" with a click eventlistener it does not change.after button clicked on tab3 tab2/tab3 background/background selected color not changed  app.js  "
"TIMOB-26862","Bug","Android",13,"Android: TextField/TextArea within a TableView can have performance issues with some keyboards","*Summary:*  Entering text into a {{TextField}}/{{TextArea}} embedded within a {{TableView}} can cause performance issues if the virtual keyboard shows/hides its top suggestion bar dynamically. It can also cause the cursor to suddenly move to the end of field and cause the field to flicker.    *Reason:*  By default, the ""windowSoftInputMode"" is set to {{Ti.UI.Android.SOFT_INPUT_ADJUST_PAN}} (aka: ""adjustPan""), which means that showing/hiding the virtual keyboards will cause the window to resize. The resizing of a {{TableView}} triggers its row recycling/update behavior which can cause the ""contents"" of each row (such as the {{TextField}}) to be re-parented to a new row container view, which causes havoc with the virtual keyboard.    For virtual keyboards that have a fixed height and do not pop-in/out a suggestion bar as you type, this isn't really an issue since the above mentioned resize behavior happens once. For example, this is not an issue on a Pixel phone.    But some device pop-in/out a suggestion bar as you type which causes the {{TableView}} to resize every time you type in a character. This will cause massive performance issues.    *Steps to reproduce:*  # Build and run [^TableOfTextFieldsTest.js] on Android.  # Tap on row 1's {{TextArea}}.  # Notice that the cursor is moved to end of the field. (The code is supposed to highlight the whole text instead.)  # Notice the below warnings get logged.    {code}  [WARN]  IInputConnectionWrapper: getTextBeforeCursor on inactive InputConnection  [WARN]  IInputConnectionWrapper: getSelectedText on inactive InputConnection  [WARN]  IInputConnectionWrapper: getTextAfterCursor on inactive InputConnection  {code}    *Work-Around 1:*  Set up the window to ""adjustPan"". This works-around the issue because it causes the virtual keyboard to be overlaid on top of the window instead of resizing it, which avoids the issue.  {code:javascript}  var window = Ti.UI.createWindow({   windowSoftInputMode: Ti.UI.Android ? Ti.UI.Android.SOFT_INPUT_ADJUST_PAN : null,  });  {code}    *Work-Around 2:*  Use a {{ScrollView}} instead of a {{TableView}}.  "
"TIMOB-26876","Bug","Hyperloop|iOS",0,"iOS: Cannot debug a project with hyperloop enabled","Cannot debug a project that has hyperloop enabled. The issue is with debug on iOS only as the debug on same project works fine wth Android    Steps to Reproduce:  1. Create a default titanium project with services enabled  2. Add a breakpoint in the js file  3. Debug on iOS simulator  or device    Actual Result:  The breakpoints are not hit during the debug. If we remove hyperloop from the project  the same breakpoints are hit successfully.    Expected Result:  The debug should work even for projects with hyperloop"
"TIMOB-26877","Improvement","Android",3,"Android: Ti.Database.install() should throw exception like iOS if source db file not found","*Summary:*  The [Ti.Database.install()|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Database-method-install] API is intended to copy a ""source"" database file embedded within the app to a writeable location. The idea being that the app developer can preconfigure a SQLite database's tables/columns/indexes, embed that preconfigured database file within the app, thus avoiding having to do set up a database dynamically within the app's code.    On iOS, if the 1st argument (the source database file path) is not found, then the {{install()}} function will throw an exception. This is good because this tells the app developer that he/she has set the path wrong to the embedded database file.    On Android, if the source database file is not found, then an empty database is installed to the given location. This may confuse the app developer. It should throw an exception instead like iOS to clearly indicate that it's a path issue.  "
"TIMOB-26898","Bug","Android",3,"Android: Build error ""Failed to run dexer"" can occur when including several libraries","With the recent update, android compilation gets stuck at the ""Running dexer"" step. This happens when I add the cloudpush module to the project.    To reproduce the error, you can simply create a blank project (alloy), add the cloudpush module for android, and try to compile the app for Android."
"TIMOB-26879","Bug","Hyperloop",1,"Hyperloop: iOS - Requiring Hyperloop files fails with SDK 8.0.0 RC","*Steps to reproduce the behavior*  Run the hyperloop-examples project with the latest 8.0.0 build.    *Actual behavior*  The app fails to boot with the following error:      *Expected behavior*  The app boots without error.  "
"TIMOB-26884","Improvement","Android",3,"Android: Update ti.playservices to 16.1.2","- Update bundled {{ti.playservices}} module to {{16.1.2}}"
"TIMOB-26888","Story","Windows",3,"Windows: Update Hyperloop apiversion for 8.0.0.GA","Update Hyperloop module apiversion for Windows because there's module binary incompatibility in upcoming 8.0.0.GA. Windows Hyperloop module needs re-compiled with updated 8.0.0."
"TIMOB-26886","Story","Windows",3,"Windows: Update module apiversion to 7","Update module apiversion because there's module binary incompatibility in upcoming 8.0.0.GA. All Windows module needs re-compiled to make it work with 8.0.0.  "
"TIMOB-26901","Bug","Android",3,"Android: Launcher icon uses Titanium's default icon instead of ""appicon.png"" as of 8.0.0","With this single change, the appicon.png is no longer applied to the android launcher icon.  I don't know if iOS is affected by this.        "
"TIMOB-26892","Bug","iOS",5,"iOS: Video player orientation is not changing properly in iOS 11.x","Hello,    The video player orientation is not changing properly in iOS 11.x but it's working fine for iOS 12 and above. Please have a look at the attachment videos.    *Steps to reproduce the issue:*  1.Let app orientation be in portrait and play the video(Using the below app.js file)  2. make video go in full screen  3. switch the device in landscape mode, video orientation will come in landscape mode  4. Do not change the orientation any more and tap on cross button to go back to app exiting full screen video mode  5. you will notice window/screen in portrait mode.     *Test Code:*  app.js      *Test Environment:*  Appcelerator Command-Line Interface, version 7.0.9  Operating System  Name = Mac OS X  Version = 10.14  Architecture = 64bit    CPUs = 4  Memory = 8589934592  Node.js  Node.js Version = 8.9.1  npm Version = 5.5.1  Titanium CLI  CLI Version = 5.1.1  Titanium SDK  SDK Version = 7.5.1.GA,7.5.0.GA  iOS simulator version: 12.1, 11.4    Thanks"
"TIMOB-26891","Story","Hyperloop",3,"Update Hyperloop to 4.0.2","Update the SDK's bundled Hyperloop version to 4.0.2    Required because of TIMOB-26888"
"TIMOB-26895","Bug","Android",3,"Android: APK signing will fail when using MD5 keystore and JDK 8 or newer","*Summary:*  Digitally signing an APK will fail when using a keystore using an MD5 encryption with JDK 8 or newer version.    *Steps to reproduce:*  # Go to a machine with JDK 8 or newer installed on it.  # Create a Classic Titanium app.  # Copy the [^testmd5.keystore] the project's root directory.  # In Appc Studio, select ""Package"" from the top-left-most dropdown box.  # In Appc Studio, select ""Android Play Store"" from the other dropdown box.  # Click the build button.  # For ""Keystore Location"", click the ""Browse"" button and select the ""testmd5.keystore"" file.  # For ""Keystore Password"", enter: {{testmd5}}  # For ""Keypair Password"", enter: {{testmd5}}  # For ""Key Alias"", enter: {{testmd5}}  # Click the ""Publish"" button.    *Result:*  Build fails with the following logged error messages.      *Cause:*  When reading the keystore file's information via the JDK ""keytool"", the algorithm returned will be ""MD5withRSA (weak)"" with "" (weak)"" appended to it as of JDK 8. The returned ""MD5withRSA (weak)"" string is being blindly passed to the signing tool, when we should be passing ""MD5withRSA"" instead.    *Note 1:*  Issue was raised on github below...  https://github.com/appcelerator/titanium_mobile/issues/10769    *Note 2:*  Newest JDK ""keytool"" versions will typically create a keystore using SHA1 or SHA256 by default. I think MD5 was the default for JDK 6.    *Note 3:*  You can create a keystore file with ""MD5withRSA"" at the command line on Mac by entering the below in the Terminal. Note that we don't recommend signing a real app with MD5. You should use SHA256 instead. The below is for testing purposes only.    "
"TIMOB-26954","Bug","Android",5,"Android: Reading a JSON file fails on Android Q","Running the following code, returns t==null  {quote}  var file=Ti.Filesystem.getFile(Config.PathRoot.resources,'some.json');  var d=file.read();  var t=d.text;  {quote}    Analysis:  TiBlob#getText checks TiMimeTypeHelper.isBinaryMimeType(mimetype) and if the file is binary, it only allows application/octet-stream. The detected mime type comes from android.webkit.MimeTypeMap#getMimeTypeFromExtension (in TiMimeTypeHelper#getMimeTypeFromFileExtension). This used to return the octet-steam mime on *.json files, but it was probably fixed to properly return application/json.  "
"TIMOB-26903","Bug","iOS",5,"iOS: Webview Cookies is not working with 8.0.0.GA","Hello,  Webview with cookies is working just fine with 7.5.1.GA but it's not working with 8.0.0.GA.    *Testing Environment:*  Appcelerator Command-Line Interface, version 7.0.10  Operating System    Name                        = Mac OS X    Version                     = 10.14    Architecture                = 64bit    # CPUs                      = 4    Memory                      = 8589934592  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.1.1  Titanium SDK    SDK Version                 = 8.0.0.GA, 7.5.1.GA    *Test Code One:*      *Test Code Two(ti.wkwebview):*      *Steps to reproduce the issue:*  1. Just add the app.js file on your project  2. Run using the 7.5.1.GA and  the webview is added to the controller it will print out the cookie (testCookie=works).  3. If you run the exact same code with 8.0.0.GA when the webview loads it will alert an empty value. This shows the 8.0.0 does not read the cookie value.    Note: The only difference between 7.5.1 and 8.0.0 is that 8.0.0 now uses WKWebview instead of UIWebview.  "
"TIMOB-26919","Improvement","Android",5,"Android: Support d8 dexer.","https://developer.android.com/studio/command-line/d8  bq. d8 is a command line tool that Android Studio and the Android Gradle Plugin use to compile your project's Java bytecode into DEX bytecode that runs on Android devices, and it allows you to use Java 8 language features in your app's code.    https://android-developers.googleblog.com/2018/04/android-studio-switching-to-d8-dexer.html    {quote}Android Studio switching to D8 dexer  06 April 2018  D8 now default dex compiler{quote}    With {{d8}} support, it will be possible to use libraries written with java 8 syntax.    [Example|https://github.com/NetrisTV/ti.exoplayer/issues/9#issuecomment-460235431]    related to [AC-5688]    P.S. Also {{dx}} will be deprecated soon."
"TIMOB-26909","Improvement","Android",13,"Android: Improve V8 cold start performance","*Summary:*  During an app cold start, Titanium will create a V8 {{Isolate}} one time for the lifetime of the app to be used as the JavaScript runtime. The C++ function call {{v8::Isolate::New()}} is unusually slow.  [V8Runtime.cpp#L228|https://github.com/appcelerator/titanium_mobile/blob/master/android/runtime/v8/src/native/V8Runtime.cpp#L228]    By running adding the following code, I'm able to benchmark this function call.  {code:cpp}  #include <time.h>  uint64_t GetCurrentTimeInMilliseconds()  {   struct timespec currentTime;   clock_gettime(CLOCK_MONOTONIC, &currentTime);   uint64_t value = (uint64_t)currentTime.tv_sec * (uint64_t)1000000;   value += (uint64_t)currentTime.tv_nsec / (uint64_t)1000;   return value / (uint64_t)1000;  }    JNIEXPORT void JNICALL Java_org_appcelerator_kroll_runtime_v8_V8Runtime_nativeInit(...)  {   // ...   uint64_t currentTime = GetCurrentTimeInMilliseconds();   isolate = Isolate::New(create_params);   LOGI(TAG, ""### Isolate::New() duration: %d"", (int)(GetCurrentTimeInMilliseconds() - currentTime));   // ...  }  {code}    The below are benchmarks from real physical devices:  * Pixel 2 (Android 9.0; ARM64): {{750ms}}  * Nexus 4 (Android 4.4; ARM32): {{2500ms}}    The above eats about half the startup time on a simple ""Hello World"" project. It's unusually slow.    *To be investigated:*  * Supposedly, creating the {{Isolate}} with an empty snapshot created at build time should significantly improve the performance.  * We should double check that the v8 {{.a}} static library was not compiled in debug mode.  "
"TIMOB-26908","Bug","iOS",3,"iOS: Focussed text-field freezes parent window","Closing a window with a search being in focus, the parent window freezes. We haven't been able to provide an isolated test case, but it can be reproduced with a list-view + search-bar. I suspect the search-controller does not hide before the parent window closes and then stays in the VC stack.    I don't see any possible workaround so far, except overriding the native back button with an own one which is a no go as well."
"TIMOB-26943","Bug","iOS",5,"iOS: WebView.setHtml() fails to load inner contents with ""file://"" URLs and relative paths if ""baseURL"" uses ""app://"" URL as of 8.0.0","*Summary:*  As of Titanium 8.0.0, a call to {{WebView.setHtml()}} with a ""baseURL"" set to an ""app://"" URL such as {{Ti.Filesystem.resourcesDirectory}} will fail to load HTML content such as {{<img/>}} or {{<script/>}} if they're assigned relative paths or ""file://"" URLs.    This is *not* an issue if:  * ""baseURL"" is set to a ""file://"" URL.  * If ""baseURL"" was never assigned in the {{setHtml()}} call.  * If the contents such as {{<img/>}} use an ""app://"" URL instead, but this is not support on Android or Windows.    *Steps to reproduce:*  # Create a Classic ""Default Project"" Titanium app.  # Set {{<use-app-thinning/>}} to {{false}} in the ""tiapp.xml"" as shown below.  # Copy the below code to the project's ""app.js"".  # Build and run on iOS.  # Notice that 3 of the 4 images fail to load within the {{WebView}}.    tiapp.xml  {code:xml}  <?xml version=""1.0"" encoding=""UTF-8""?>  <ti:app xmlns:ti=""http://ti.appcelerator.org"">   <use-app-thinning>false</use-app-thinning>  </ti:app>  {code}    app.js  {code:javascript}  var sourceFile = Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory, ""assets/images/tab1.png"");  var targetFile = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory, ""tab1.png"");  sourceFile.copy(targetFile.nativePath);    var htmlText =    '<!DOCTYPE html>\n' +    '<html>\n' +    ' <head>\n' +    '  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\n' +    ' </head>\n' +    ' <body>\n' +    '  <p>Resource File (Relative Path)</p>\n' +    '  <img src=""assets/images/tab1.png""/>\n' +    '  <br/>\n' +    '  <p>Resource File (app:// URL; iOS-only)</p>\n' +    '  <img src=""app://Resources/assets/images/tab1.png""/>\n' +  // <- This works.    '  <br/>\n' +    '  <p>Resource File (file:// URL)</p>\n' +    '  <img src=""' + sourceFile.nativePath + '""/>\n' +    '  <br/>\n' +    '  <p>App Data File (file:// URL)</p>\n' +    '  <img src=""' + targetFile.nativePath + '""/>\n' +    ' </body>\n' +    '</html>\n';  Ti.API.info(""### htmlText:\n"" + htmlText);    var window = Ti.UI.createWindow();  var webView = Ti.UI.createWebView({  // html: htmlText,  // <- This works.  });  //webView.setHtml(htmlText);  // <- This works.  webView.setHtml(htmlText, { baseURL: Ti.Filesystem.resourcesDirectory });  // <- This fails!!!  //webView.setHtml(htmlText, { baseURL: Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory).nativePath });  // <- This works.  window.add(webView);  window.open();  {code}    *Work-Around:*  Set ""baseURL"" to a ""file://"" URL instead. For example instead of doing this...  {code:javascript}  webView.setHtml(htmlText, { baseURL: Ti.Filesystem.resourcesDirectory });  {code}  ...do this instead...  {code:javascript}  webView.setHtml(htmlText, { baseURL: Ti.Filesystem.getFile(Ti.Filesystem.resourcesDirectory).nativePath });  {code}    Alternatively, don't set the ""baseURL"" in the {{setHtml()}} function call. By default, the HTML's contents are relative to the Titanium app's ""Resources"" directory.  "
"TIMOB-26948","Bug","iOS",8,"CLI: File provider extension capability not appropriately set","h3. Description  While creating an iOS project using the file provider extension, we found that the capability was not appearing correctly in the generated Xcode project    h3.  Steps to reproduce  1) Create an iOS project  2) Create a file provider target, add the app groups capability  3) Ensure you have the appropriate provisioning profiles  4) Build the project  5) Examine the capabilities in the generated xCode project    h3.  Result  The capability is not set correctly."
"TIMOB-26952","Story","Android",3,"Android: Verify that Ti.UI.Android.openPreferences() works on Android Q","Android Q is deprecating the ""android.preference"" library which Titanium's {{Ti.UI.Android.openPreferences()}} API uses.  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.Android-method-openPreferences  https://developer.android.com/preview/behavior-changes-all#preferences    Google's docs suggests that ""android.preference"" library is deprecated, not removed. So, we should first check that the deprecated usage still works while targeting API Level 29.    The best solution is to change Titanium to depend on the AndroidX libraries instead of the older Support libraries per [TIMOB-26472]. This is a much bigger change that effects all modules that we may want to defer to a later date.  "
"TIMOB-26957","Improvement","Android",13,"Android: Update V8 runtime to 7.3.492.26","- Upgrade V8 to the latest stable version {{7.3.492.26}}  - Includes snapshot support  - Maintain backwards compatibility"
"TIMOB-26973","New Feature","iOS",5,"iOS: Add accessibilityIdentifier","In UI testing one way of selecting element is by ""Accessibility ID"", e.g. in Appium:    http://appium.io/docs/en/commands/element/find-elements/index.html#selector-strategies  {quote}  *Strategy*  Accessibility ID  *Description*  Read a unique identifier for a UI element. For XCUITest it is the element's _+accessibility-id+_ attribute. For Android it is the element's _+content-desc+_ attribute.  {quote}    In Titanium SDK ""content description"" for Android views [composed from three other properties|https://github.com/appcelerator/titanium_mobile/blob/8_0_X/android/titanium/src/java/org/appcelerator/titanium/view/TiUIView.java#L2177]:  * accessibilityLabel  * accessibilityValue  * accessibilityHint    On iOS property [""accessibilityIdentifier""|https://developer.apple.com/documentation/uikit/uiaccessibilityidentification/1623132-accessibilityidentifier?language=objc] is not used by Ti SDK.    I suggest to compose ""accessibilityIdentifier"" value on iOS same way it is done on Android for ""content description""."
"TIMOB-26967","Bug","Core|iOS",13,"iOS: Memory leak in Ti.API.debug","h2. Description  We have tried the candidate sdk v8.1.0 and v8.0.1, however, the memory leak issue still exists. We have done a comparison between v6.3.0.GA, and candidates sdk v8.x.x, you can find the result in screenshots which indicate that the memory is not released.     It is the same issue as our previous bug report https://jira.appcelerator.org/browse/TIMOB-26811    h2. Sample App  https://github.com/lukeluluke/simpleApp    h2. How to reproduce   1. Clone the project and build with sdk v8.1.0.v20190328075104  2. Use Instruments to monitor the memory usage and leaks  3. You will find the memory keep increasing , and the are memory leaks for almost each api request.   4. Rebuild the app with sdk v.6.3.0.GA.  5. Use Instruments to monitor the memory usage and leaks  6. You will see memory is freed at some time    "
"TIMOB-26961","Story","Windows",8,"Windows: Save HttpClient instance until callback is fired","Currently HttpClient may be garbege-collected before its callback is fired under some circumstances if you don't save HttpClient instance from garbage collector. In that case application crashes. We might want to save HttpClient instance from garbage collection by protecting its instance until {{onerror}} or {{onload}} callback is called.    "
"TIMOB-26969","Bug","Windows",5,"Windows: Codec encodeNumber/decodeNumber should throw Error on invalid setup","{{Codec.encodeNumber}} and {{decodeNumber}} should throw Exception when specific parameter is not specified. See test case fro details: https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/ti.codec.test.js#L355 and https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/ti.codec.test.js#L390. "
"TIMOB-26976","Bug","iOS",2,"Html having links with target=""_blank"" is not working","Html having links with target=""_blank"" is not working from SDK 8.0.0 as we have moved to use WKWebView in TiUIWebview instead of UIWebView  The fix is provided by [~arif] in [PR|https://github.com/appcelerator-modules/Ti.WKWebView/pull/26] of WKWbView module.    Test Case -            Expected Result - It should open webpage on click of 'click me'."
"TIMOB-26981","Bug","iOS",5,"iOS: Module builds broken","Some of the iOS native module build are completely broken with SDK 8.0.0. {{appcelerator.encrytpeddatabase}} is one that breaks due to the removal of some headers in the packaged SDK's {{iphone/include}} folder.    The necessary headers are included in {{iphone/Classes}}, but used to have duplicates in {{iphone/include}}. we should have redirecting headers placed there.    Additionally, a good deal of the core code moved into the TitaniumKit framework and this headers are inside the framework. We need redirecting headers for those.    Lastly, we should consider some mechanism to automatically include the TitaniumKit framework into the module build. Otherwise module authors have to modify the {{titanium.xcconfig}} to add:  "
"TIMOB-26980","Bug","Android|CLI",5,"Android: module clean command deletes too much of libs folder","Our module clean command for Android is too aggressive with the {{libs}} directory, wiping it entirely. For most modules this is fine, but if a module has a pre-built static library inside, we'll blow it away. {{appcelerator.encrypteddatabase}} is one such module."
"TIMOB-26979","Story","Windows",5,"Windows: Save callback instances to stablize tests on Jenkins","Save object instance at callbacks around networking (e.g. {{Ti.Network}}/{{Ti.UI.WebView}}) to stablize Jenkins tests."
"TIMOB-26978","Bug","Android",13,"Android: Showing/hiding dialog while window is being destroyed by ""Don't keep activities"" sometimes crashes","*Summary:*  Showing or hiding a dialog (alert or progress indicator) from an activity window that is in the middle of being destroy, but not ""finished"", will sometimes cause the following crashes.    Note that an Android activity can be flagged as ""destroyed"", but not ""finished"", if the Android OS destroys it due to low memory or if system developer option ""Don't keep activities"" is enabled. When this happens, the Android OS intends to restore the activity when the end-user navigates back to it.    ----  *Steps to reproduce dialog ""dismiss"" crash:*  _Unknown._    Theoretically, this should be possible by calling a dialog's {{hide()}} method via the {{Ti.UI.Window}} object's {{window.activity.onDestroy}} callback, but it doesn't crash for me.    Below is the stack trace reported by some app developers when this issue happens  {code}  java.lang.IllegalArgumentException: View=DecorView@1a43283[TiActivity] not attached to window manager  at android.view.WindowManagerGlobal.findViewLocked(WindowManagerGlobal.java:485)  at android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:394)  at android.view.WindowManagerImpl.removeViewImmediate(WindowManagerImpl.java:124)  at android.app.Dialog.dismissDialog(Dialog.java:375)  at android.app.Dialog.dismiss(Dialog.java:358)  at ti.modules.titanium.ui.widget.TiUIProgressIndicator.handleHide(TiUIProgressIndicator.java:252)  at ti.modules.titanium.ui.widget.TiUIProgressIndicator.handleMessage(TiUIProgressIndicator.java:78)  at android.os.Handler.dispatchMessage(Handler.java:102)  at android.os.Looper.loop(Looper.java:193)  at android.app.ActivityThread.main(ActivityThread.java:6718)  at java.lang.reflect.Method.invoke(Native Method)  at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  {code}    ----  *Steps to reproduce dialog ""show"" crash:*  # Go to the Android device's main ""Settings"" screen.  # Tap on ""System"" under ""Settings.  # Tap on ""Developer options"" under ""System"" settings.  # Enable ""Don't keep activities"", which should be near the bottom of the list.  # Build and run the below code on the above Android device.  # Press the Android ""Home"" button.  # Resume the app.  # Press the Android ""Back"" button.  # Observe the Android log. You'll see one of the below exception stack traces.    app.js  {code:javascript}  var progressIndicator = Ti.UI.Android.createProgressIndicator({   message: ""Progressing..."",   location: Ti.UI.Android.PROGRESS_INDICATOR_DIALOG,   type: Ti.UI.Android.PROGRESS_INDICATOR_INDETERMINANT,   cancelable: false,  });  var window = Ti.UI.createWindow();  window.add(Ti.UI.createLabel({ text: ""Press Back"" }));  window.activity.onDestroy = function() {   var isShowingAlert = true;   if (isShowingAlert) {    alert(""Hello World!"");   } else {    var progressIndicator = Ti.UI.Android.createProgressIndicator({     message: ""Progressing..."",     location: Ti.UI.Android.PROGRESS_INDICATOR_DIALOG,     type: Ti.UI.Android.PROGRESS_INDICATOR_INDETERMINANT,     cancelable: false,    });    progressIndicator.show();   }  }  window.open();  {code}    Stack trace in 7.5.x...  {code}  [ERROR] TiExceptionHandler: (main) [611,6711] Attempt to invoke virtual method 'java.lang.Object org.appcelerator.kroll.KrollObject.callProperty(java.lang.String, java.lang.Object[])' on a null object reference  [ERROR] TiExceptionHandler:  [ERROR] TiExceptionHandler:     org.appcelerator.kroll.KrollProxy.handleMessage(KrollProxy.java:1210)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.proxy.ActivityProxy.handleMessage(ActivityProxy.java:394)  [ERROR] TiExceptionHandler:     android.os.Handler.dispatchMessage(Handler.java:102)  [ERROR] TiExceptionHandler:     android.os.Looper.loop(Looper.java:193)  [ERROR] TiExceptionHandler:     android.app.ActivityThread.main(ActivityThread.java:6669)  [ERROR] TiExceptionHandler:     java.lang.reflect.Method.invoke(Native Method)  [ERROR] TiExceptionHandler:     com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  [ERROR] TiExceptionHandler:     com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  [ERROR] TiExceptionHandler: (main) [34,6745] Unable to add window -- token android.os.BinderProxy@b66e705 is not valid; is your activity running?  [ERROR] TiExceptionHandler:  [ERROR] TiExceptionHandler:     android.view.ViewRootImpl.setView(ViewRootImpl.java:798)  [ERROR] TiExceptionHandler:     android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:356)  [ERROR] TiExceptionHandler:     android.view.WindowManagerImpl.addView(WindowManagerImpl.java:93)  [ERROR] TiExceptionHandler:     android.app.Dialog.show(Dialog.java:329)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiExceptionHandler.createDialog(TiExceptionHandler.java:233)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiExceptionHandler$1.onCurrentActivityReady(TiExceptionHandler.java:171)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.util.TiUIHelper.waitForCurrentActivity(TiUIHelper.java:193)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiApplication.waitForCurrentActivity(TiApplication.java:817)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiExceptionHandler.handleOpenErrorDialog(TiExceptionHandler.java:167)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiExceptionHandler.openErrorDialog(TiExceptionHandler.java:139)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiExceptionHandler.handleException(TiExceptionHandler.java:264)  [ERROR] TiExceptionHandler:     org.appcelerator.kroll.KrollRuntime.dispatchException(KrollRuntime.java:540)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.TiApplication$1.uncaughtException(TiApplication.java:362)  [ERROR] TiExceptionHandler:     org.appcelerator.kroll.KrollProxy.handleMessage(KrollProxy.java:1225)  [ERROR] TiExceptionHandler:     org.appcelerator.titanium.proxy.ActivityProxy.handleMessage(ActivityProxy.java:394)  [ERROR] TiExceptionHandler:     android.os.Handler.dispatchMessage(Handler.java:102)  [ERROR] TiExceptionHandler:     android.os.Looper.loop(Looper.java:193)  [ERROR] TiExceptionHandler:     android.app.ActivityThread.main(ActivityThread.java:6669)  [ERROR] TiExceptionHandler:     java.lang.reflect.Method.invoke(Native Method)  [ERROR] TiExceptionHandler:     com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  [ERROR] TiExceptionHandler:     com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  {code}    Stack trace in 8.0.0...  {code}  [ERROR] WindowManager: android.view.WindowLeaked: Activity org.appcelerator.titanium.TiActivity has leaked window DecorView@89a3790[TiActivity] that was originally added here  [ERROR] WindowManager:  at android.view.ViewRootImpl.<init>(ViewRootImpl.java:511)  [ERROR] WindowManager:  at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:346)  [ERROR] WindowManager:  at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:93)  [ERROR] WindowManager:  at android.app.Dialog.show(Dialog.java:329)  [ERROR] WindowManager:  at ti.modules.titanium.ui.widget.TiUIProgressIndicator.handleShow(TiUIProgressIndicator.java:231)  [ERROR] WindowManager:  at ti.modules.titanium.ui.widget.TiUIProgressIndicator.show(TiUIProgressIndicator.java:146)  [ERROR] WindowManager:  at ti.modules.titanium.ui.android.ProgressIndicatorProxy.handleShow(ProgressIndicatorProxy.java:59)  [ERROR] WindowManager:  at org.appcelerator.titanium.proxy.TiViewProxy.show(TiViewProxy.java:763)  [ERROR] WindowManager:  at ti.modules.titanium.ui.TiDialogProxy.access$001(TiDialogProxy.java:29)  [ERROR] WindowManager:  at ti.modules.titanium.ui.TiDialogProxy$1.onCurrentActivityReady(TiDialogProxy.java:47)  [ERROR] WindowManager:  at org.appcelerator.titanium.util.TiUIHelper.waitForCurrentActivity(TiUIHelper.java:194)  [ERROR] WindowManager:  at ti.modules.titanium.ui.TiDialogProxy.show(TiDialogProxy.java:42)  [ERROR] WindowManager:  at org.appcelerator.kroll.runtime.v8.V8Object.nativeCallProperty(Native Method)  [ERROR] WindowManager:  at org.appcelerator.kroll.runtime.v8.V8Object.callProperty(V8Object.java:75)  [ERROR] WindowManager:  at org.appcelerator.kroll.KrollProxy.callPropertySync(KrollProxy.java:753)  [ERROR] WindowManager:  at org.appcelerator.titanium.TiBaseActivity.dispatchCallback(TiBaseActivity.java:1304)  [ERROR] WindowManager:  at org.appcelerator.titanium.TiBaseActivity.onDestroy(TiBaseActivity.java:1589)  [ERROR] WindowManager:  at org.appcelerator.titanium.TiActivity.onDestroy(TiActivity.java:58)  [ERROR] WindowManager:  at android.app.Activity.performDestroy(Activity.java:7395)  [ERROR] WindowManager:  at android.app.Instrumentation.callActivityOnDestroy(Instrumentation.java:1306)  [ERROR] WindowManager:  at android.app.ActivityThread.performDestroyActivity(ActivityThread.java:4443)  [ERROR] WindowManager:  at android.app.ActivityThread.handleDestroyActivity(ActivityThread.java:4476)  [ERROR] WindowManager:  at android.app.servertransaction.DestroyActivityItem.execute(DestroyActivityItem.java:39)  [ERROR] WindowManager:  at android.app.servertransaction.TransactionExecutor.executeLifecycleState(TransactionExecutor.java:145)  [ERROR] WindowManager:  at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:70)  [ERROR] WindowManager:  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1808)  [ERROR] WindowManager:  at android.os.Handler.dispatchMessage(Handler.java:106)  [ERROR] WindowManager:  at android.os.Looper.loop(Looper.java:193)  [ERROR] WindowManager:  at android.app.ActivityThread.main(ActivityThread.java:6669)  [ERROR] WindowManager:  at java.lang.reflect.Method.invoke(Native Method)  [ERROR] WindowManager:  at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  [ERROR] WindowManager:  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  {code}    ----  *Solution:*  The dialog handling code will attempt to show a dialog use the top-most activity that is being shown. This activity is fetched via {{TiApplication.getCurrentActivity()}}. This method will checks the top-most activity's {{isFinishing()}} method and ignores skips them knowing that they are in the middle of being destroyed... but this code is also missing an {{isDestroyed()}} check since an activity can be destroyed but not finished for the ""Don't keep activities"" edge-case.  [TiApplication.getCurrentActivity()|https://github.com/appcelerator/titanium_mobile/blob/864d8f10b30b5d4fabb4d235a44e715973750c5a/android/titanium/src/java/org/appcelerator/titanium/TiApplication.java#L252]    Our dialog dismissing code needs to check if the hosting activity has been destroyed as well, not just finished. We should also wrap a {{dismiss()}} call with a try/catch block just in case since we don't know how to reproduce this issue (might be a bug on Google's end that we need to work-around?).  [TiUIDialog.java|https://github.com/appcelerator/titanium_mobile/blob/864d8f10b30b5d4fabb4d235a44e715973750c5a/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUIDialog.java]  [TiUIProgressIndicator.java|https://github.com/appcelerator/titanium_mobile/blob/864d8f10b30b5d4fabb4d235a44e715973750c5a/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUIProgressIndicator.java]  "
"TIMOB-26985","Bug","iOS",8,"iOS: Native modules are not protected","- Native modules are not protected from deallocation by JavascriptCore. This means cached modules can have their proxies released."
"TIMOB-26987","Bug","iOS",8,"iOS: ACA module is crashing with iOS 12 and later","Hello,  Just added the following line of code against a button click. When I clicked on, the app suddenly closed. We have attached the crash log on the attachment file.      *Tested this issue on with this environment:*  Ti SDK 8.0.0.GA  ACA v1.0.3  iOS device: iPhone 5s (12.2)    Please let us know if you need any more information.    Thanks"
"TIMOB-26993","Bug","Android",3,"Android: WebView sometimes crashes on window close after zooming content","*Summary:*  Android's {{WebView}} will sometimes crash when closing its parent window after zooming its web content.    *Result:*  The following stack trace happens when it crashes.      *Note:*  This issue is difficult to reproduce, but it sometimes occurs with our mocha unit tests here...  https://github.com/appcelerator/titanium-mobile-mocha-suite/blob/master/Resources/ti.ui.webview.test.js    This issue has been mentioned on Slack here...  https://ti-slack.slack.com/archives/C03CVLS0U/p1547721498070400  "
"TIMOB-26992","Bug","Android",13,"Android: HTTPClient may use SSLv3 by default on Android 4.x when it shouldn't","*Summary:*  Titanium's {{HTTPClient}} is internally coded to always disable the SSLv3 protocol and only support TLS 1.0 and higher protocols for ""https://"" communications. This is because SSLv3 is no longer considered secure as of 2014.  https://blog.mozilla.org/security/2014/10/14/the-poodle-attack-and-the-end-of-ssl-3-0/    Unfortunately, there is a bug on Google's end where Android 4.4 and older OS versions will ignore our TLS settings in Java and default to the SSLv3 protocol instead. This can cause communication errors since modern web servers typically respond to SSLv3 requests with an error since this protocol is not considered secure.    The Android bug report can be found here...  https://issuetracker.google.com/issues/37008635    *Steps to reproduce:*  # Acquire an Android 4.4 device.  # Make sure the device has Internet access.  # Build and run with the below code.  # Tap on the ""HTTP Get"" button.  # Notice an ""SSLProtocolException"" error is displayed on screen.  # Run the app on Android 5.0 or newer device.  # After tapping on ""HTTP Get"", notice that a valid HTTP response is displayed onscreen.        *Result:*  The following SSLv3 error gets logged when running on Android 5.1 and older OS versions.  {code}  [ERROR] :  TiHTTPClient: (TiHttpClient-1) [8913,9013] HTTP Error (javax.net.ssl.SSLHandshakeException): javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x76d92718: Failure in SSL library, usually a protocol error  [ERROR] :  TiHTTPClient: error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x733bdd74:0x00000000)  [ERROR] :  TiHTTPClient: javax.net.ssl.SSLHandshakeException: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x76d92718: Failure in SSL library, usually a protocol error  [ERROR] :  TiHTTPClient: error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x733bdd74:0x00000000)  [ERROR] :  TiHTTPClient:  at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:448)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.Connection.upgradeToTls(Connection.java:146)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.Connection.connect(Connection.java:107)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:294)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpEngine.sendSocketRequest(HttpEngine.java:255)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:206)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:345)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:296)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:503)  [ERROR] :  TiHTTPClient:  at com.android.okhttp.internal.http.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:136)  [ERROR] :  TiHTTPClient:  at ti.modules.titanium.network.TiHTTPClient$ClientRunnable.run(TiHTTPClient.java:1319)  [ERROR] :  TiHTTPClient:  at java.lang.Thread.run(Thread.java:841)  [ERROR] :  TiHTTPClient: Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x76d92718: Failure in SSL library, usually a protocol error  [ERROR] :  TiHTTPClient: error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:741 0x733bdd74:0x00000000)  [ERROR] :  TiHTTPClient:  at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)  [ERROR] :  TiHTTPClient:  at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:405)  {code}    *Work-around:*  Simplest solution is to change the app's min supported Android version to 5.0 (aka: API Level 21). This can be done by adding the following to the ""tiapp.xml"" file.  {code:xml}  <?xml version=""1.0"" encoding=""UTF-8""?>  <ti:app xmlns:ti=""http://ti.appcelerator.org"">   <android xmlns:android=""http://schemas.android.com/apk/res/android"">    <manifest>     <uses-sdk android:minSdkVersion=""21""/>    </manifest>   </android>  </ti:app>  {code}    Alternatively, this can be worked-around server side by allowing the SSLv3 protocol, but this is not advised since this protocol is not considered secure.    Unfortunately, setting the {{HTTPClient}} ""tlsVersion"" property will not work since Android 4.4 and older OS versions may ignore this setting and use SSLv3 instead, which is the bug on Google's end that this ticket is about."
"TIMOB-27030","Bug","iOS",3,"iOS: Mocha test Titanium.UI.TextField width test failure","Titanium.UI.TextField width please investigate the failure.   Please use https://github.com/ewanharris/titanium-mobile-mocha-suite/tree/TIMOB-24816 to find the related test You can use https://github.com/ewanharris/mocha-test to quickly debug (most) mocha tests)"
"TIMOB-27007","Bug","Android",3,"Android: Mocha test Titanium.UI.TextField width test failure","Titanium.UI.TextField width please investigate the failure.   Please use https://github.com/ewanharris/titanium-mobile-mocha-suite/tree/TIMOB-24816 to find the related test You can use https://github.com/ewanharris/mocha-test to quickly debug (most) mocha tests)"
"TIMOB-26996","Bug","Android",5,"Android: Window/TabGroup close() method call is ignored until ""open"" event has been fired","*Summary:*  On Android, a {{Ti.UI.Window}} or {{Ti.UI.TabGroup}} object's {{close()}} method call is ignored if it hasn't finished opening yet. The {{Window}} or {{TabGroup}} will remain open and not automatically close itself.    This means the following won't close the window. The window will remain open.      *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the ""Open/Close Window"" button.  # Notice a red window is displayed. (This is a bug. The {{close()}} method was ignored.)  # Press the Android ""Back"" button.  # Tap on the ""Open/Close TabGroup"" button.  # Notice a red tab group is displayed. (This is a bug. The {{close()}} method was ignored.)        *Note:*  For {{TabGroup}}, calling the {{close()}} method will crash if the app was built with Titanium 7.x.x or older versions. In Titanium 8.0.0, it does not crash and the method call is ignored.    *Expected Result:*  The {{close()}} method call should be respected, eve before the window has finished opening. This is how it works on iOS. The only time {{close()}} should be ignored is if the window has never been opened or has already been closed.    *Work-around:*  Don't call the {{close()}} method until the ""open"" event has been fired.  "
"TIMOB-27047","Improvement","iOS",2,"iOS: Version of SDKs default modules are not up to date","Default modules, which are shipped with sdk, do not have updated module versions.  e.g  1.  urlSession - latest version is 2.2.0 but sdk has 2.1.0  2.  ti.map - latest version is 3.1.2 but sdk has 3.1.0  3.  ti.safaridialog - latest version is 3.1.0 but sdk has 1.1.1  4.  ti.identity - latest version is 1.0.6 but sdk has 1.0.5  We need to update [module.json|https://github.com/appcelerator/titanium_mobile/blob/master/support/module/packaged/modules.json]"
"TIMOB-27045","Improvement","Android|CLI|iOS|Windows",8,"Pass along ENV variables to process.env on development builds","Currently we have an empty process.env object for Node API compatibility. We should consider passing along the current ENV variables to be used in some internal JSON file, similarly to how Ti.App.Properties are inserted. To protect apps, this should likely only be done in development builds, and we could consider suggesting using of https://github.com/motdotla/dotenv to developers who want to pass along/set ENV vars in production builds of the app (or maybe hook in some babel plugin that works in conjunction with dotenv to inline values? Not really sure any sensitive data should be in the app's contents at all though...)"
"TIMOB-27043","Improvement","iOS",13,"Cache JS processing between builds","The build times for apps was already increased in TIMOB-26917 by processing JS files in parallel. However, we still process JS on every build, ignoring wether they were changed or not.    Further improvements to the build time could be achieved by using the file change detection from [appc-tasks|https://github.com/appcelerator/appc-tasks]. This would only process the JS files that actually changed and avoid unnecessary transpilation and analyzation steps on every build."
"TIMOB-27042","Improvement","Android",3,"Android: Update ti.playservices to 16.1.3","- Update {{ti.playservices}} module to {{16.1.3}}"
"TIMOB-27056","Bug","iOS",2,"iOS: WebView HTML JS code can no longer access ""Titanium."" API (but ""Ti."" exists) as of 8.0.0","*Summary:*  The {{Titanium}} object is undefined within a {{WebView}}'s HTML {{<script/>}} as of 8.0.0.  Only the {{Ti}} object is defined.    *Steps to reproduce:*  # Set up a Classic Titanium ""app.js"" with the below code.  # Build and run on iOS with Titanium 8.0.0 or 8.0.1.  # Observe the log.        *Expected Result:*  The following should be logged. (You'll get the below with a 7.5.1 built app.)      *Actual Result:*  Only the 1st message gets logged in Titanium 8.0.0 or 8.0.1 because the script errors out when using the {{Titanium}} object. _(This is the bug.)_      *Recommended Solution:*  Add a {{var Titanium = Ti;}} to the code that gets injected into the WKWebView here...  [TiUIWebView.m|https://github.com/appcelerator/titanium_mobile/blob/3d1569dededb35387b197a71317ffa3e7fb42ea8/iphone/Classes/TiUIWebView.m#L390]    *Work-Around:*  Use the {{Ti}} object instead of the {{Titanium}} object within the HTML's script."
"TIMOB-27054","Bug","iOS",2,"iOS: Ti.API.log() function no longer works within WebView's HTML JS code as of 8.0.0","*Summary:*  The [Ti.API.log()|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.API-method-log] function no longer works within a {{WebView}}'s HTML {{<script/>}} code as of Titanium 8.0.0.    *Steps to reproduce:*  # Set up a Classic Titanium ""app.js"" with the below code.  # Build and run on iOS with Titanium 8.0.0 or 8.0.1.  # Notice that *none* of the below messages get logged.  # Build and run with Titanium 7.x.x.  # Notice that the below message do get logged.        *Work-Around:*  Use the following instead. They work in 8.0.x and older versions.    "
"TIMOB-27067","Bug","Android",3,"Android: UI sometimes disappears on Android 9.0 and higher when battery saver turns on/off","*Summary:*  On Android 9.0 and higher, a Titanium window's UI may disappear when the system's battery optimizer turn on or off. This can happen if the XML activities defined in the ""tiapp.xml"" are missing ""android:configChanges"" value ""uiMode"".    This issue can be reproduced consistently in an Android 9 (API 28) emulator.    *Steps to reproduce:*  # Create a new Titanium Classic ""Default Project"".  # Build and run on an Android 9 (aka: API 28) emulator.  # In the Android emulator's toolbar, click the ""..."" button.  # An ""Extended Controls"" window will open next to the emulator.  # Click on the ""Battery"" tab in this window.  # Go to the ""Charge level"" and lower it to 10%.  # Click the ""Charge connection"" drop-down and change it from ""AC charger"" to ""None"" (or vice-versa).  # In the emulator, if it asks if you want to enable the battery optimizer, tap ""Yes"".  # Notice that the Titanium app's UI disappears.  # Press the Android ""Back"" button.  # Relaunch the app. (The UI will appear as normal.)  # Click the emulator's ""Charge connection"" drop-down and change it back to ""AC charger"".  # Notice that the Titanium app's UI disappears again.    *Cause:*  The ""AndroidManifest.xml"" that is being generated by Titanium's build system is missing a setting. We need to add ""uiMode"" to every Titanium {{<activity/>}} elements ""android:configChanges"" attribute.    *Work-Around:*  You can work-around this issue by adding the following ""activity"" XML settings to the ""tiapp.xml"" file. The key thing here is to add all of the missing ""configChanges"" values. Particularly the ""uiMode"" value which solves this ticket's specific issue.    "
"TIMOB-27064","Bug","iOS",5,"iOS: Unable to load image on imaveView from nativePath on physical device","Hello,    We are unable to load image on imaveView from nativePath on physical device but it's showing the image on lower version of SDK (7.5.2.GA) and Simulator (with latest version of SDK).    *Test code:*      *Test Results on device:*      *Test Environment:*  Appcelerator Command-Line Interface, version 7.0.10  Operating System    Name                        = Mac OS X    Version                     = 10.14.4    Architecture                = 64bit    # CPUs                      = 4    Memory                      = 8589934592  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.1.1  Titanium SDK    SDK Version                 = 8.0.0.GA    Note: I have tried it with WKWebView for 8.0.0.GA but got the same results.    Thanks"
"TIMOB-27068","Bug","Windows",8,"Windows: Layout does not match with view size property","Following code reports {{height=200}} (which is right) but the {{viewChild}} red view does not display {{200}} height actually. It looks to have {{100}} height.        Expected: {{viewChild}} should display {{200}} height.    Same thing happens on {{width}} property.        Expected: {{viewChild}} should display {{200}} width.  "
"TIMOB-27159","Bug","iOS",5,"iOS: Ti.UI.WebView cannot load html files from cache","*Note: Issue can be reproduced only on device, webview works as expected on simulator*  New WebView fails to load html files stored in the app with the error:        Reading iOS documentation I noticed that local files should be loaded using *loadFileURL* method as in https://github.com/appcelerator-modules/Ti.WKWebView/blob/master/ios/Classes/TiWkwebviewWebView.m#L198 but I don't see that in https://github.com/appcelerator/titanium_mobile/blob/master/iphone/Classes/TiUIWebView.m#L664  "
"TIMOB-27075","Bug","Android",5,"Android: Cannot change TabGroup tab icon or title after creation","Setting a new icon on a tab does not update the icon. Works in 7.5.x. Icon renders properly on creation or add of a tab, but you cannot change/update it.    $.tab.icon = 'image.png'; "
"TIMOB-27074","Bug","iOS",8,"IOS: Rebuilding the app with simulator fails with due to log port being occupied","h5. Steps to reproduce:  1. Create a default app.  2. Build for IOS simulator.  3. After app launch, rebuild the app for the same simulator, without quitting the current simulator.    h5.Actual results:  1. The build fails with :    2. Works fine after quitting the emulator & then rebuilding.    h5.Expected result:  1. The build should not fail.  "
"TIMOB-27094","Bug","Android",5,"Android: ListView's SearchBar/SearchView wrongly overlaps rows as of 8.0.1","Android searchView is broken in 8.0.1.RC    Adding an Android.searchView to a listView is positioning it underneath the first item in the list and so can not be accessed at all. (see screenshots).     !8.0.1.v20190423123234.jpg|thumbnail! Shows the expected behaviour   !8.0.1.v20190426162041.jpg|thumbnail! Shows the exact same app with a different sdk selected and the search view is hidden under the first row.    8.0.1.v20190423123234 works correctly, 8.0.1.v20190426162041 does not.    "
"TIMOB-27080","Bug","iOS",5,"iOS: Memory leak and deadlock in SDK 8+","This is the follow-up ticket of TIMOB-27053. That ticket fixed some critical issues in regards to JSCore crashes, but now we still see *a lot* (on older iPhones every time) dead locks that cause the app to freeze and crash later. The worst thing is that those logs also do not show up on Crashlytics, so cannot know exactly where it crashes, although I assume it is JSCore as well.    Notable is that before every crash, it shows the following warning:      As discussed with [~jvennemann], this is likely the reason why it crashes - a deadlock in firing the event. Unfortunately he was not able to provide a workaround or fix to test so far, so we are escalating this ticket now."
"TIMOB-27112","Bug","iOS",8,"iOS : No javascript trace on IOS for requiring an unavailable module","h5. Steps to reproduce:  1. In the app.js use {{require('zzzz')}}.  2. Build it for IOS device/simulator.  3. The app will throw error/exception.  4. Go to the dashboard & check if you get the crash/exception logs from ACA.    h5.Actual results:  1. We do not see any javascript trace just native Objective C:  Please refer the attached screenshot.    h5.Expected result:  1. Javascript stack trace should be shown."
"TIMOB-27082","Bug","iOS",2,"iOS: Modules using TiBlob and built before SDK 8.1 causing app crash","Not much more to say. Reproducible using common modules like [Ti.AWS|https://github.com/hansemannn/titanium-aws/blob/master/ios/Classes/TiAwsMachineIoTDataManagerProxy.m#L125-L127] or the official [Ti.Map|https://github.com/appcelerator-modules/ti.map/blob/master/ios/Classes/TiMapSnapshotterProxy.m#L94]."
"TIMOB-27099","Bug","iOS",2,"iOS Debug: Error in console on variable view refresh during debug","When stepping through during debug an error is logged in console as the variable view refreshes on each step.  The error is shown only during debug on iOS with 8.1 Ti SDK.  If we close the variable window the error would not be shown.    Steps to reproduce:  1. Create a classic/alloy project  2. Add some breakpoints  3. Debug on iOS simulator  4. When the debugger suspends on a breakpoint click on Step in.    Actual Result:  An error is shown as soon as the debugger suspends for the first time. After step in the same error is shown in console again.  The error shown is:      Expected Result:  No error should be shown"
"TIMOB-27084","Bug","Android",3,"Android: ""tiapp.xml"" is unable to override ""AndroidManifest.xml"" settings defined in AAR or ""timodule.xml""","*Summary:*  The ""tiapp.xml"" file's ""AndroidManifest.xml"" settings is unable to override the XML elements such as {{<activity/>}}, {{<receiver/>}}, etc. that are defined in a native module's ""timodule.xml"" or a native AAR library's embedded ""AndroidManifest.xml"".    *Example Use-Case:*  Microsoft's authentication library (aka: MSAL) requires the app developer to override its {{com.microsoft.identity.client.BrowserTabActivity}} in the app project's ""AndroidManifest.xml"" and add an intent-filter to it. This is needed the Chrome web browser app will return the end-user back to the app that requested single-signon.  https://github.com/Azure-Samples/ms-identity-android-native    *Steps to Reproduce:*  # Create a Titanium Classic ""Default Project"".  # Insert the android manifest XML settings below into the ""tiapp.xml"" file.  # Create the follow subfolders under the project: {{./platform/android}}  # Copy this ticket's [^msal-0.2.2.aar] file to the {{./platform/android}} folder.  # Build the app for Android.  # Go to the project's {{./build/android}} directory via Finder/WindowsExplorer.  # Open the ""AndroidManifest.xml"" file.  # Notice that the {{<intent-filter/>}} shown below was not injected into the ""AndroidManifest.xml"" file. _(This is the bug.)_        *Recommended Fix:*  We should change the {{finalAndroidManifest}} merge order in the SDK's ""_build.js"" script [here|https://github.com/appcelerator/titanium_mobile/blob/2a16df7481b0a3331d2f56365463f0a9a8031d09/android/cli/commands/_build.js#L3909]. The order should be:  # {{this.androidLibraries.forEach(/* finalAndroidManifest.merge(am) */)}}  # {{this.modules.forEach(/* finalAndroidManifest.merge(am) */)}}  # {{finalAndroidManifest.merge(customAndroidManifest)}}  # {{finalAndroidManifest.merge(tiappAndroidManifest)}}    ----  *Work-Around:*  Delete the XML setting that you want to override from the ""timodule.xml"" file or AAR file. Note that you can unzip an AAR file, change its embedded ""AndroidMainfest.xml"" file, and then re-zip it. Changing the AAR library's extension from "".aar"" to "".zip"" is an easy way to unzip it."
"TIMOB-27091","Bug","Android",1,"Android: App crashes on incremental build in SDK 8.1.0+","We recently updated to latest master and noticed that our Android app (tested inside Simulator) sometimes randomly crashes with the following error:    We have no idea how to workaround this right now."
"TIMOB-27090","Bug","iOS",3,"iOS: Using a non-string value in alert() causes app to crash in SDK 8.0.0+","When using a non-string value like an object, the app crashes. This is a regression from moving to TitaniumKit and was caused by using the {{UIAlertController}} in the {{AlertCallback}} method directly instead of the {{TiUiAlertDialog}} proxy."
"TIMOB-27089","Bug","iOS",3,"iOS: App crashes when asking for location permissions (SDK 8.1.0+)","Our app crashes when asking for location permissions on SDK 8.1.0. The feature has not changed since a while and we noticed the crash after upgrading to latest master. Error:    Some quick research shown that the issue is in the GeolocationModule.m where the callback {{authorizationCallback}} (a {{JSManagedValue}} type) seems to be deallocated already:    JS code to reproduce:  {code:js}  /* eslint-disable strict */    var win = Ti.UI.createWindow({   backgroundColor: '#fff'  });    var btn = Ti.UI.createButton({   title: 'Request location permissions'  });    btn.addEventListener('click', function () {   Ti.Geolocation.requestLocationPermissions(Ti.Geolocation.AUTHORIZATION_WHEN_IN_USE, event => {    alert(event);   });  });    win.add(btn);  win.open();  {code}  Notes:  * We do have the {{NSLocationWhenInUseUsageDescription}} and {{NSLocationAlwaysAndWhenInUseUsageDescription}} plist keys added.   * We do not use the {{UIBackgroundModes}} key {{location}} since we only request the location while using the app  "
"TIMOB-27106","Bug","iOS",2,"iOS: MusicLibrary compilation error in 8.0.1.GA","A simple ios project get a compilation error with 8.0.1.GA when using Music Library:    E.g.        Gets the following error:        Note the project must be cleaned (e.g. `ti clean`) before building in order to replicate the bug.      "
"TIMOB-27097","Bug","iOS",3,"iOS: Incremental builds fail to install app when using dynamic frameworks","If a framework contains .png or .plist files our build will try to optimize those. Xcode will update code signing on the first build but fails to do so on subsequent builds. Frameworks should be left untouched to avoid this issue.    *Steps to reproduce the behavior*    # Place any framework containing PNG files into {{platform/ios}} (https://github.com/cjwirth/RichEditorView for example)  # Build and run the app for device  # Repeat!    *Actual behavior*  On incremental builds the app fails to install with the following error:      *Expected behavior*  The app can be installed as usual even on subsequent builds."
"TIMOB-27100","Bug","Android",5,"Android: TabGroup labels not displayed anymore (SDK 8.1.0+)","On SDK 8.1.0+, our tab-group labels are not visible anymore. Reverting [this commit|https://github.com/appcelerator/titanium_mobile/commit/2653e9c8f2d62862f5742c61a9ff1607fd7e870b] locally fixed it for us."
"TIMOB-27101","Bug","Android",5,"Android: Window open() wrongly does a shared-element fade-in animation by default as of 8.0.1","*Summary:*  As of Titanium 8.0.1, a {{Window.open()}} method call is opening with a fade-in animation instead of the system default animation (typically slides-up). What's happening is that the window is doing a ""shared-element"" animation instead, which is mostly intended to show a view moving from one window to another.    This regression was caused by [TIMOB-25678] which was intended to allow app developers to use the shared-element transition animation properties such as ""activityEnterTransition"" without having to set up any views as shared-elements via {{Window.addSharedElement()}}. This was meant to be more convenient to use than the {{Window.open()}} method's ""activityEnterAnimation"" and ""activityExitAnimation"" properties. The negative consequence of this change was that it was always defaulting to shared-element transition animations even if none of the transition properties were assigned.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the ""Open"" button to open a child window.        *Result:*  After pressing the ""Open"" button, it looks like the app fades to the Android system's home screen and then the app's child window fades-in.    *Expected Result:*  Child window should open with a slide-in animation instead.  "
"TIMOB-27108","Bug","Android",8,"Android: HTTPClient ""responseData"" blob returns 0 width/height for images over 512kb","*Summary:*  When downloading an image file greater than 512 KB via {{HTTPClient}}, the resulting ""responseData"" {{Blob}} will return zero ""width"" and ""height"". This is not an issue with smaller image files.    *Steps to reproduce:*  # Acquire an Android device that has Internet access.  # Build and run the below code on that Android device.  # Tap on the ""Download"" button.  # An alert is displayed indicating that the image blob width/height is {{0x0}}. _(This is the bug.)_  # Notice that the image blob is successfully displayed in an {{ImageView}}. Meaning this is only an issue with the ""width"" and ""height"" returned by the blob object.        *Cause:*  When the HTTP response is over 512 KB (Titanium's default max buffer size), then {{HTTPClient}} will download the response to a temp file instead of in memory. This bug happens because {{HTTPClient}} immediately wraps this temp file with a ""responseData"" blob before any bytes have been written to it (ie: the temp file is currently empty). This means that the blob will fail to fetch image info. The solution is to re-read the image file's info once {{HTTPClient}} finishes the download.    *Work-around:*  In the {{HTTPClient}} object's ""onload"" callback, you can work-around this issue by creating a new blob from the ""responseData"" blob's file. The new blob will re-read the image file's info now that it has finished downloading.    "
"TIMOB-27104","Bug","Android",5,"Android: ProgressIndicator logs ""WindowLeaked"" exception when hiding dialog and closing window at same time as of 8.0.2","*Summary:*  As of Titanium 8.0.2, hiding a {{Ti.UI.Android.ProgressIndicator}} and closing its parent window at the same time will log a ""WindowLeaked"" exception.    This is not a crash. Nothing harmful occurs.  This is merely an unsightly exception stack trace error that occurs in the log.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the ""Show Progress Dialog"" button.  # Wait 2 seconds for the progress dialog and its window to close.  # Observe the log.        *Result:*  The following gets logged when the progress dialog closes.  {code}  [ERROR] WindowManager: android.view.WindowLeaked: Activity org.appcelerator.titanium.TiActivity has leaked window DecorView@e74eabe[TiActivity] that was originally added here  [ERROR] WindowManager:  at android.view.ViewRootImpl.<init>(ViewRootImpl.java:518)  [ERROR] WindowManager:  at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:346)  [ERROR] WindowManager:  at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:94)  [ERROR] WindowManager:  at android.app.Dialog.show(Dialog.java:329)  [ERROR] WindowManager:  at ti.modules.titanium.ui.widget.TiUIProgressIndicator.handleShow(TiUIProgressIndicator.java:236)  [ERROR] WindowManager:  at ti.modules.titanium.ui.widget.TiUIProgressIndicator.show(TiUIProgressIndicator.java:146)  [ERROR] WindowManager:  at ti.modules.titanium.ui.android.ProgressIndicatorProxy.handleShow(ProgressIndicatorProxy.java:59)  [ERROR] WindowManager:  at org.appcelerator.titanium.proxy.TiViewProxy.show(TiViewProxy.java:765)  [ERROR] WindowManager:  at ti.modules.titanium.ui.TiDialogProxy.access$001(TiDialogProxy.java:29)  [ERROR] WindowManager:  at ti.modules.titanium.ui.TiDialogProxy$1.onCurrentActivityReady(TiDialogProxy.java:47)  [ERROR] WindowManager:  at org.appcelerator.titanium.util.TiUIHelper.waitForCurrentActivity(TiUIHelper.java:195)  [ERROR] WindowManager:  at ti.modules.titanium.ui.TiDialogProxy.show(TiDialogProxy.java:42)  [ERROR] WindowManager:  at org.appcelerator.kroll.runtime.v8.V8Object.nativeFireEvent(Native Method)  [ERROR] WindowManager:  at org.appcelerator.kroll.runtime.v8.V8Object.fireEvent(V8Object.java:63)  [ERROR] WindowManager:  at org.appcelerator.kroll.KrollProxy.doFireEvent(KrollProxy.java:978)  [ERROR] WindowManager:  at org.appcelerator.kroll.KrollProxy.handleMessage(KrollProxy.java:1207)  [ERROR] WindowManager:  at org.appcelerator.titanium.proxy.TiViewProxy.handleMessage(TiViewProxy.java:266)  [ERROR] WindowManager:  at android.os.Handler.dispatchMessage(Handler.java:102)  [ERROR] WindowManager:  at android.os.Looper.loop(Looper.java:193)  [ERROR] WindowManager:  at android.app.ActivityThread.main(ActivityThread.java:6694)  [ERROR] WindowManager:  at java.lang.reflect.Method.invoke(Native Method)  [ERROR] WindowManager:  at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  [ERROR] WindowManager:  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  {code}    *Note:*  The error appears to be harmless. The exception is being caught and logged. The reason it is happening is because the dialog is being shown again in a destroyed activity window. Why the code is automatically calling its {{show()}} method again after hiding/closing is what we need to track down (this is the real bug; but our safety mechanisms are catching it).    *Comment from Hans Knöchel:*  We suspect it being related to showing our [loader class|https://gist.github.com/hansemannn/20297e983e2b8c898975b600e7ab8418] that uses a {{Ti.UI.ActivityIndicator}}. This did not happen on earlier versions of the SDK.    *Work-around:*  Instead of hiding the dialog and closing its parent window back-to-back like this...  {code:javascript}  progressIndicator.hide();  childWindow.close();  {code}    Delay closing the window after hiding the dialog like this...  {code:javascript}  progressIndicator.hide();  setTimeout(function() { childWindow.close(); }, 1);  {code}"
"TIMOB-27111","Improvement","Android",13,"Android: Implement async Ti.Database.DB methods","- Implement asynchronous {{Ti.Database.DB}} methods for executing SQL queries.  - Implement method for executing multiple queries in one shot. (Useful for transactions)    {code:js}  Ti.Database.DB.executeAsync(callback, query, parameters...);    Ti.Database.DB.executeAll(queries);  Ti.Database.DB.executeAllAsync(callback, queries);  {code}"
"TIMOB-27117","Bug","Android",5,"Android: TabGroup bar's background color is wrongly transparent on Android 4.4 as of 8.0.0","*Summary:*  As of Titanium 8.0.0, the {{TabGroup}} tab bar's background color is transparent on Android 4.4. On Android 5.0 and higher, it shows the correct background color (defaults to dark gray).    This issue happens with both the top and bottom tab bar styles.    *Steps to reproduce:*  # Set up a Classic Titanium app project with the below code.  # Build with Titanium 8.0.0 and run it on Android 4.4  # Observe the displayed tab bar.        *Result:*  The {{TabGroup}} tab bar's background color is transparent when it shouldn't be.   !TabGroup-bad.png|thumbnail!     *Expected Result:*  The tab bar should use the same background color as the {{ActionBar}}, which by default is dark gray (depending on the assigned theme).   !TabGroup-good.png|thumbnail!     *Work-around:*  Set {{TabGroup}} property ""tabsBackgroundColor"" to the color you want.  The original dark gray color is {{""#FF212121""}}."
"TIMOB-27114","Epic","iOS",5,"iOS: Support iOS 13 and Xcode 11","This epic will track all the items required to enable support for iOS 13."
"TIMOB-27119","Bug","Android",0,"Android: Views inside horizontal layout are clipped to the top","Subviews inside a horizontal parent view are clipping to the top on Android. On iOS, they are centered on the y-axis like other views are as well. This is a parity issue.    Example:    {code:js}  var win = Ti.UI.createWindow({ backgroundColor: 'white' });    var view = Ti.UI.createView({ layout: 'horizontal', height: 50, backgroundColor: 'gray' });  view.add(Ti.UI.createView({ left: 10, width: 40, right: 10, backgroundColor: '#ff0', height: 20 }));  view.add(Ti.UI.createView({ left: 0, width: Ti.UI.FILL, right: 10, backgroundColor: '#f00', height: 20 }));    win.add(view);  win.open();  {code}  "
"TIMOB-27128","Story","iOS",5,"iOS: Install Xcode 11 betas on some build nodes","We should being the process of trying to install Xcode 11 betas on one or more of our Mac build nodes so that we can start adding PRs to target iOS 13/Xcode 11."
"TIMOB-27124","New Feature","iOS",3,"iOS 13: Support running on Xcode 11 Simulators ","In order to run with Xcode 11, ioslib and it's mappings need to be updated. Pull ready [here|https://github.com/appcelerator/ioslib/pull/88]."
"TIMOB-27135","Bug","Android",5,"Android: Broken incremental builds when using encrypted assets or referencing JS from HTML","*Summary:*  The changes made by [TIMOB-27043] is causing Android build issues as of 8.1.0.  Note that this issue was never released. We've caught it before RC.    ----  *Issue 1:*  Building an Android project with asset encryption enabled (which ""device"" and ""production"" builds do by default) will fail when built the 2nd time.    To reproduce, run the below command on a project twice. It'll fail on the 2nd attempt.  {code}  appc run -p android --build-only --deploy-type test  {code}    The above will typically fail on the 2nd attempt with...  {code}  [ERROR] :  Failed to compile Java source files:  [ERROR] :    [ERROR] :  /Users/lchoudhary/Desktop/workspaces/workspace_2019/kitchensink-v2-master/build/android/gen/com/appcelerator/kitchensink/KitchensinkApplication.java:40: error: cannot find symbol  [ERROR] :    KrollAssetHelper.setAssetCrypt(new AssetCryptImpl());  [ERROR] :                                       ^  [ERROR] :    symbol:   class AssetCryptImpl  [ERROR] :    location: class KitchensinkApplication  [ERROR] :  Note: /Users/lchoudhary/Desktop/workspaces/workspace_2019/kitchensink-v2-master/build/android/gen/com/appcelerator/kitchensink/KitchensinkApplication.java uses unchecked or unsafe operations.  [ERROR] :  Note: Recompile with -Xlint:unchecked for details.  [ERROR] :  1 error  [ERROR] Application Installer abnormal process termination. Process exit value was 1  {code}    ----  *Issue 2:*  A local HTML file that references a JavaScript file via the {{<script/>}} tag will cause an immediate build failure.    Steps to reproduce:  # Copy the below files to a Classic app.  # Build to an Android device or emulator.  # Note that the build will immediately fail.    _app.js_  {code:javascript}  var window = Ti.UI.createWindow();  window.add(Ti.UI.createWebView({   url: ""my.html"",  }));  window.open();  {code}    _my.html_  {code:html}  <!DOCTYPE html>  <html>   <head>    <script src=""myHtmlScript.js""></script>   </head>   <body onload=""onPageLoaded();"">    This verifies that a local HTML file can access a local JS file.   </body>  </html>  {code}    _myHtmlScript.js_  {code:javascript}  function onPageLoaded() {   alert(""Embedded script successfully accessed via HTML file."");  }  {code}  \\  \\  The above will cause the following build failure...  {code}  [ERROR] :  TypeError: Cannot read property 'cyan' of undefined      at AndroidBuilder.copyFile (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/android/cli/commands/_build.js:2352:53)      at AndroidBuilder.next (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/android/cli/commands/_build.js:2711:16)      at /Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/node_modules/async/dist/async.js:3880:24      at eachOfArrayLike (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/node_modules/async/dist/async.js:1069:9)      at eachOf (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/node_modules/async/dist/async.js:1117:5)      at _parallel (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/node_modules/async/dist/async.js:3879:5)      at Object.parallelLimit [as parallel] (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/node_modules/async/dist/async.js:3962:5)      at Object.parallel (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/node_modules/node-appc/lib/async.js:56:8)      at task.run.then (/Users/jquick2/Library/Application Support/Titanium/mobilesdk/osx/8.2.0/android/cli/commands/_build.js:2707:16)  {code}  "
"TIMOB-27133","New Feature","iOS",5,"iOS 13: Add support for SF Symbols","SF symbols is a new iOS 13 feature that allows developers to use build-in icons (1500 icons!) in iOS apps.    We should allow users to use these icons. They're supposed to replace the system icons up-to iOS 12    Source: https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview"
"TIMOB-27130","Improvement","Windows",13,"Windows: Support Node-compatible log formatting","- Log formatting is currently not supported on any platforms  - Our docs suggest our support is equivalent to node.js, which in this case is not true    {code:js}  console.log('%s', 'test'); // test  {code}"
"TIMOB-27155","Bug","iOS",5,"iOS: Incremental builds broken as of 8.1.0","_This issue is not in a released version. It was caught before release._  ----    Incremental builds are broken on ""master""… I informed the team via the related tickets on GitHub weeks ago but it seems like it has still not been fixed on latest master. In summary: Either TIMOB-27043 or TIMOB-27045. Please handle this asap, it causes a horrible dev exp.     Steps to reproduce:    1. Run a clean build with latest master  2. Change nothing and run again    Expected: A fast, incremental build happens  Actual: A slow, full build happens every time"
"TIMOB-27153","Bug","Android",3,"Android: Prevent multiple exception logs","- Prevent multiple exception logs when multiple handlers are present    *TEST CASE*  - Include {{com.appcelerator.aca}} module  - Throw an exception  {code:js}  throw new Error('exception');  {code}  - Should NOT see multiple {{TiExceptionHandler}} logs"
"TIMOB-27164","Improvement","iOS",13,"iOS: Implement async Ti.Database.DB methods","- *Parity ticket for Android implementation TIMOB-27111*    - Implement asynchronous {{Ti.Database.DB}} methods for executing SQL queries.  - Implement method for executing multiple queries in one shot. (Useful for transactions)    {code:js}  Ti.Database.DB.executeAsync(callback, query, parameters...);    Ti.Database.DB.executeAll(queries);  Ti.Database.DB.executeAllAsync(callback, queries);  {code}"
"TIMOB-27163","Improvement","iOS",5,"iOS: Update Xcode project template settings and resolve warnings","The Xcode project template was last update to recommended settings for Xcode 8.3. This needs to be updated for Xcode 10.2. The compiler also prints several warnings (including missing method selectors, nullability flags and strict prototypes) which should be addressed."
"TIMOB-27161","Story","iOS",1,"iOS: Remove TestModule from main repository","The [TestModule|https://github.com/appcelerator/titanium_mobile/tree/673a3b9117e3d185a09882b5f0409ead47454179/iphone/TestModule] directory in our main repo was used during development of Swift support and is no longer needed so it can be safely removed."
"TIMOB-27171","Improvement","iOS",5,"iOS 13: Support new UITableViewStyleInsetGrouped style in list-view","The new {{UITableViewStyleInsetGrouped}} should be supported in the list-view and table-view."
"TIMOB-27169","Improvement","iOS",3,"iOS 13: Prevent modal windows from being swiped down","iOS 13 will display modal windows as page sheets by default. To prevent this for certain screens, the {{isModalInPresentation}} property can be configured on the internal view controller. This should be exposed as a {{forceModal}} boolean property. Since Android does not support this so far, it'd be an iOS only property for now, but could be extended once Android supports it as well.    https://developer.apple.com/documentation/uikit/uiviewcontroller/3229894-modalinpresentation"
"TIMOB-27167","New Feature","CLI",13,"CLI: Move Alloy optimizations into core SDK build","Alloy does some additional work in specialized Babel plugins to ""optimize"" Alloy applications. But most of these can be generally useful for Titanium apps and should be moved into the mainline build process to benefit all apps (and to simplify Alloy's build process which is poorly written resulting in some hard to fix build/source map bugs and performance issues).    Specifically Alloy allows developers to make use of special references that get replaced by true/false:  - OS_IOS, OS_ANDROID, OS_WINDOWS  - ENV_DEV, ENV_DEVELOPMENT, ENV_TEST, ENV_PROD, ENV_PRODUCTION  - DIST_ADHOC, DIST_STORE    Then it strips out dead code as a result (because these are typically use in if/else guards for platform-specific code)"
"TIMOB-27256","Bug","Android",5,"Android: AlertDialog cannot be re-shown in a different window as of 8.0.1","It is working fine in 8.0.0 but not in 8.0.1  in 8.0.1 it return ""Dialog activity is destroyed, unable to show dialog with message: null""    so here the case  1. i have 1 component of alert dialog with android view which used in multiple page of screen  2. when i show the alert dialog in first screen it works fine  3. when i show the same alert dialog in second screen, the alertdialog not showing, but instead it's on the first screen (when i close the second page, i saw the alert dialog in 1st page)  4. in first page when i try to show the same alertdialog, it return error ""Dialog activity is destroyed, unable to show dialog with message: null""    Workaround for this  issue  1. Keep re-creating new alertdialog unlike previous approach which using 1 alertdialog and used in multiple places."
"TIMOB-27175","Bug","iOS",5,"iOS: Ti.Platform.id changes when updating to SDK 8.0.0","*Steps to reproduce the behavior*    # Create a new classic app  # Add {{console.log(Ti.Platform.id);}}  # Build and run the app using SDK 7.5.1.GA  # Note the identifier printed to the log  # Build and run the app again using SDK 8.0.0.GA  # Note the identifier printed to the log    *Actual behavior*  Two different identifiers are logged    *Expected behavior*  The same identifier is logged"
"TIMOB-27182","Story","Hyperloop",3,"Update Hyperloop to 4.0.3","Update the SDK's bundled Hyperloop version to 4.0.3"
"TIMOB-27188","Bug","Android",5,"Android: TabGroup crashes if tab ""title"" property is not set as of 8.0.2","*Summary:*  As of Titanium 8.0.2, setting up a {{TabGroup}} tab without setting the ""title"" property will cause a crash. This happens to both the top and bottom tab styles.    *Use-Case:*  Apps which want to show icon-only tab groups.    *Steps to reproduce:*  # Create a Classic ""Default Project"".  # Set up the project to build with Titanium 8.0.2.GA.  # Replace the project's ""app.js"" with the code below.  # Build and run on Android        *Result:*  App crashes with the following stack trace when using the top bar style.  {code}  [ERROR] :  TiExceptionHandler: (main) [122,122] Unable to start activity ComponentInfo{com.appcelerator.testing/org.appcelerator.titanium.TiActivity}: java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String java.lang.Object.toString()' on a null object reference  [ERROR] :  TiExceptionHandler:  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUITabLayoutTabGroup.updateTabTitle(TiUITabLayoutTabGroup.java:222)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUITabLayoutTabGroup.addTabItemInController(TiUITabLayoutTabGroup.java:155)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUIAbstractTabGroup.addTab(TiUIAbstractTabGroup.java:241)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.TabGroupProxy.handlePostOpen(TabGroupProxy.java:448)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.TabGroupProxy.onWindowActivityCreated(TabGroupProxy.java:430)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiBaseActivity.onCreate(TiBaseActivity.java:752)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiActivity.onCreate(TiActivity.java:47)  [ERROR] :  TiExceptionHandler:     android.app.Activity.performCreate(Activity.java:7144)  [ERROR] :  TiExceptionHandler:     android.app.Activity.performCreate(Activity.java:7135)  [ERROR] :  TiExceptionHandler:     android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1271)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2894)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3049)  [ERROR] :  TiExceptionHandler:     android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)  [ERROR] :  TiExceptionHandler:     android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)  [ERROR] :  TiExceptionHandler:     android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread$H.handleMessage(ActivityThread.java:1809)  [ERROR] :  TiExceptionHandler:     android.os.Handler.dispatchMessage(Handler.java:106)  [ERROR] :  TiExceptionHandler:     android.os.Looper.loop(Looper.java:193)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread.main(ActivityThread.java:6680)  [ERROR] :  TiExceptionHandler:     java.lang.reflect.Method.invoke(Native Method)  [ERROR] :  TiExceptionHandler:     com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  [ERROR] :  TiExceptionHandler:     com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  {code}    When using the bottom tab style, it crashes with the following stack trace...  {code:javascript}  [ERROR] :  TiExceptionHandler: (main) [114,114] Unable to start activity ComponentInfo{com.appcelerator.testing/org.appcelerator.titanium.TiActivity}: java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String java.lang.Object.toString()' on a null object reference  [ERROR] :  TiExceptionHandler:  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUIBottomNavigationTabGroup.updateTabTitle(TiUIBottomNavigationTabGroup.java:262)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUIBottomNavigationTabGroup.updateDrawablesAfterNewItem(TiUIBottomNavigationTabGroup.java:162)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUIBottomNavigationTabGroup.addTabItemInController(TiUIBottomNavigationTabGroup.java:150)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.widget.tabgroup.TiUIAbstractTabGroup.addTab(TiUIAbstractTabGroup.java:241)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.TabGroupProxy.handlePostOpen(TabGroupProxy.java:448)  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.TabGroupProxy.onWindowActivityCreated(TabGroupProxy.java:430)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiBaseActivity.onCreate(TiBaseActivity.java:752)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiActivity.onCreate(TiActivity.java:47)  [ERROR] :  TiExceptionHandler:     android.app.Activity.performCreate(Activity.java:7144)  [ERROR] :  TiExceptionHandler:     android.app.Activity.performCreate(Activity.java:7135)  [ERROR] :  TiExceptionHandler:     android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1271)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2894)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3049)  [ERROR] :  TiExceptionHandler:     android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)  [ERROR] :  TiExceptionHandler:     android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)  [ERROR] :  TiExceptionHandler:     android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread$H.handleMessage(ActivityThread.java:1809)  [ERROR] :  TiExceptionHandler:     android.os.Handler.dispatchMessage(Handler.java:106)  [ERROR] :  TiExceptionHandler:     android.os.Looper.loop(Looper.java:193)  [ERROR] :  TiExceptionHandler:     android.app.ActivityThread.main(ActivityThread.java:6680)  [ERROR] :  TiExceptionHandler:     java.lang.reflect.Method.invoke(Native Method)  [ERROR] :  TiExceptionHandler:     com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)  [ERROR] :  TiExceptionHandler:     com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)  {code}    *Work-around:*  Set tab title to empty string like this...  {code:javascript}  var tab = Ti.UI.createTab({   title: """",    // <- This works-around issue.   icon: ""/assets/images/tab1.png"",   window: window,  });  {code}  "
"TIMOB-27185","Improvement","Windows",8,"Windows: Add VideoPlayer ""scalingMode"" constants VIDEO_SCALING_RESIZE_*","*Summary:*  As of Titanium 7.0.0, we've added the following iOS-only {{Ti.Media.ViewPlayer}} constants. We need to add them to Windows as well for parity.  * [Ti.Media.VIDEO_SCALING_RESIZE|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Media-property-VIDEO_SCALING_RESIZE]  * [Ti.Media.VIDEO_SCALING_RESIZE_ASPECT|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Media-property-VIDEO_SCALING_RESIZE_ASPECT]  * [Ti.Media.VIDEO_SCALING_RESIZE_ASPECT_FILL|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Media-property-VIDEO_SCALING_RESIZE_ASPECT_FILL]     *Note:*  The above constants were added to iOS via [TIMOB-19040].  "
"TIMOB-27193","Bug","Android",5,"Android: Ti.Filesystem.File.createFile() may alter location of specified path","If I build a file path using path.join(Ti.Filesystem.tempDirectory, ""dir/file.txt"") and then attempt to create the file, Android will actually ignore the file path/URL I passed in and will try to force it to be created under appdata-private.    https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/org/appcelerator/titanium/TiFileProxy.java#L172-L177  "
"TIMOB-27191","Bug","Android",5,"Android: Ti.Filesystem.getFile is not tolerant of file: URIs without file:// prefix","A URI like this: ""file:/data/user/0/com.appcelerator.testApp.testing/cache/_tmp/rmdir1561643019762/myfile.txt"" should be valid and supported.    However, Android's logic uses some string matching rather than URI parsing to handle the value and it appears to use incorrect logic when the file URI does not have the two trailing slashes before the path."
"TIMOB-27207","Bug","iOS",8,"TableView / TableViewRow memory leak","Old table row references are not cleared when calling *tableView.setData(rows)*.    In a production app running SDK 7.4.1.GA this is causing serious memory issues. Because the row structure is quite complex, it's important that old rows are completely cleaned from memory before new ones are set.    We've been able to reproduce this issue in a example application for multiple SDK's (8.0.0.GA, 7.4.1.GA, 8.0.1.GA). As demonstrated in the attached video you can see that the objects are not cleared from memory. The source code for the app running in the video has also been attached to this issue.    We've tried calling `$.off();$.destroy();` on the `controllers/imagerow` controller, this does not destroy the proxies.    "
"TIMOB-27195","Bug","iOS",5,"iOS: Using a commonjs module in an itemtemplate fails in a classic app","h5.Description    When using a commonjs module as in an ItemTemplate the file fails to get required as it tries alloy first which throws an error, and then the classic code require is never executed, we need to nest the try catches to allow moving on    h5.Steps to reproduce    1. Get https://github.com/ewanharris/ti.imageview-listview-example  2. Build to iOS    h5.Actual    Error is thrown    h5.Expected    No error thrown"
"TIMOB-27194","New Feature","Windows",5,"Windows: WebView should expose Ti.API.warn and Ti.API.log","Windows WebView does not expose {{Ti.API.warn}} and {{Ti.API.log}} in its script content. Windows only exposes {{Ti.API.info}}, {{Ti.API.debug}} and {{Ti.API.error}} now.    https://github.com/appcelerator/titanium_mobile_windows/blob/master/Source/TitaniumKit/src/UI/webview.js#L6"
"TIMOB-27205","Bug","iOS",5,"Webview http redirects not working as on 7.5.1","We have an integration with Plaid (https://plaid.com/) where we use a web view and capture redirects on the site.    From their docs:  “Communication between the WebView and your app is handled by HTTP redirects rather than client-side JavaScript callbacks. These redirects should be intercepted by your app.”    Working code:      $.bankPlaidLinkWebView.addEventListener('beforeload', function(_e) {            if (_e.url.indexOf(schemaOrString) > -1) {                  $.bankPlaidLinkWebView.stopLoading();                  handleCommand(_e.url);            }      });    beforeload triggers with an url the same as the one I sent. After that we should listen for an url that has ""plaidlink"" as the scheme.    From the docs:  ""All redirect URLs have the scheme plaidlink. The event type is communicated via the URL host and data is passed via the querystring. There are two supported events, connected and exit, which are documented below.""    These redirects are never triggered and it always trigger my original url.    This is working on a published app but has stopped working since SDK 8.0.0.GA, I guess it’s related to the switch to WKWebview.    Checking TiUIWebView.m I found that changing line #995 from @""url"" : webView.URL.absoluteString to:  @""url"" : navigationAction.request.URL fixes the problem.    Don't know if you should fix it here or on the newly introduced 'redirect' event. This was working before 8.0 and works if I change the mentioned line.  "
"TIMOB-27204","Bug","Android|CLI|iOS",3,"CLI: apiversion validation always fails for native modules installed via npm","h5.Description    When installing a module from npm and building, the apiversion fails even if the apiversion is correct. This is because the apiversion passed in from the SDK is a string, whereas the version from the version we get from the module is a number. We should parseInt both of these before using them.    h5.Steps to reproduce    1. In the root of your titanium project {{alongside tiapp.xml}}, run {{npm init -y}} and then {{npm i @titanium/imagefactory}}  2. Add {{<module>ti.imagefactory</module>}} to your modules section in the tiapp  3. Build for Android or iOS (iOS will require TIMOB-27203 to be fixed first)    h5.Actual    Build errors with {{\[ERROR\] Found incompatible Titanium Modules:}}    h5.Expected    No error as everything is valid"
"TIMOB-27203","Bug","CLI|iOS",3,"iOS: no apiversion validation performed on application build","h5.Description    When building for iOS there is no module apiversion validation being performed, this is because the apiversion in the SDK is stored as {{iphone}}, and node-appc is looking for {{ios}}.     h5.Steps to reproduce    1. Add the following module to your tiapp modules section {{<module platform=""iphone"" version=""1.1.0"">com.appcelerator.aca</module>}}  2. Open the manifest file (probably at {{/Users/eharris/Library/Application Support/Titanium/modules/iphone/com.appcelerator.aca/1.1.0/manifest}})  3. Change the apiversion to anything other than 2  4. Build with {{ti build -p ios --build-only}}    h5.Actual    Build carries on past the module verification stage    h5.Expected    Build should error that module is incompatible"
"TIMOB-27202","Bug","iOS",5,"IOS:Rebuilding app on device throws Couldn't find module error","*Steps To Reproduce:*  1.Create a classic/alloy app with latest 8_1_X sdk or master.  2.Run against iOS device  3.Re run against same device again.    *Expected:*  App should get installed and should be able to  launch successfully  *Actual:*  Throws the following error after launching  [ERROR] :      column = 25;  [ERROR] :      line = 9498;  [ERROR] :      message = ""Couldn't find module: ./app for architecture: arm64"";  [ERROR] :      sourceURL = ""file:///var/containers/Bundle/Application/EC162335-7334-496E-B04D-39FFDFBAE114/test23.app/ti.main.js"";  [ERROR] :      stack = ""    at require@[native code]\n    at require(/ti.main.js:9498:25)\n    at (/ti.main.js:9719:10)\n    at loadAsync(/ti.main.js:9642:13)\n    at global code(/ti.main.js:9716:10)"";  [ERROR] :      toJSON = ""<KrollCallback: 0x1d426d300>"";  [ERROR] :  }  [WARN] :   Cannot serialize object, trying to repair ...  [WARN] :   Found invalid attribute ""toJSON"" that cannot be serialized, skipping it ...    Notes:  Works fine on 8.0.2 GA and happens only on master and 8.1_x  rerunning the same app on 2 times or 3 times throws error"
"TIMOB-27209","Improvement","iOS",5,"iOS: Be able to determine dark / light mode, as well as changes on it","A developer should be able to check the current userInterfaceStyle, e.g. dark mode vs light mode."
"TIMOB-27210","Bug","iOS",5,"iOS: Cannot find iOS 13 simulators in Xcode 11 Beta 3","We cannot find iOS simulators in Xcode 11 Beta 3 and up. After an investigation, we found out  that the ""CoreSimulator"" directory path moved, so ioslib could not find it.    Pull: https://github.com/appcelerator/ioslib/pull/90"
"TIMOB-27234","Bug","iOS",5,"iOS: VideoPlayer natural size","Since 7.0.0 VideoPlayers property {{naturalSize}}  and event {{naturalSizeAvailable}}  of are broken on iOS. They return video layer size instead of ""movie"" size.      {code:javascript}  // URL from https://jira.appcelerator.org/browse/TIMOB-25566    const win = Ti.UI.createWindow({      backgroundColor: '#fff'  });    const player = Ti.Media.createVideoPlayer({      url: 'http://techslides.com/demos/sample-videos/small.mp4', // 560x320      showsControls: false,      autoplay: true,      height: 200  });  win.add(player);    function onNaturalSizeAvailable(e) {      console.log(e.type, 'e.naturalSize', JSON.stringify(e.naturalSize));      console.log('player.naturalSize', e.source.naturalSize);  }  player.addEventListener('naturalsizeavailable', onNaturalSizeAvailable);    win.open();  {code}    output (will differ on different devices/simulators):      expected output (must be the same for one video):    "
"TIMOB-27230","Bug","CLI|iOS",5,"iOS: CLI prefers Xcode 11/iOS 13 even though Xcode 10.2.1 is selected","I have Xcode 11 beta2 and 10.2.1 installed. Xcode 10.2.1 is selected.    If I run {{ti build -p ios}} it will bomb out saying no Xcode's supporting iOS 13.0.    Ultimately, it looks the code to auto-select the iOS SDK version when unspecified is not always sorting the Xcode's to prefer to selected one. Specifically if a 2 member array, the custom sort only checks the second Xcode to see if it's selected, not the first. This can result in it not getting ""priority"" and Xcode's get sorted by version instead (preferring Xcode 11 and iOS 13)"
"TIMOB-27233","Story","Tooling",3,"Titanium CLI v5 deprecation notices","Titanium has 3 essential CLI's: Appc CLI, Titanium CLI, and Alloy CLI.    The Appc CLI and Alloy CLI will be deprecated. The Titanium CLI will be re-imagined to include the platform specific functionality in Appc CLI as an add-on and Alloy CLI as a Titanium CLI command.    As apart of this effort, the following CLI's and compabilities will be deprecated:    h4. Titanium CLI    * End of support for Node 8 and older  ** TIMOB-27250  ** Effective Titanium SDK 9  ** Node 12 being the recommended  ** Node 10.13.0 being the minimum supported (though the actual technical minimum is 10.2.0)  ** Notice added to Titanium CLI v5 and displayed only if Node version < 10.2    * End of support for non-build,clean Titanium CLI (v5.x or older) plugins  ** Effective Titanium SDK 10  ** Plugins must be ported to Appc Daemon plugins and new hook system    * End of support for ALL Titanium CLI (v5.x or older)  ** Effective Titanium SDK 11  ** Notice added to Titanium CLI for specific commands when output is text (not JSON)  ** NON-BUILD plugins must be ported to Appc Daemon plugins  ** Note: build-related plugins must be continue to be written as Titanium CLI v5 plugins    * End of support for {{ti setup}}, {{ti module}}, and {{ti plugin}} commands?  ** Effective Titanium SDK 10  ** Notice added to Titanium CLI v5 for these commands when output is text (not JSON)  ** Command will not likely be replaced in Titanium CLI v6    h4. Appc CLI    * End of Life for Appc CLI  ** Effective Appc CLI 9  ** End of Support sometime in 2020, possibly around Titanium SDK 10... notify to switch to Titanium CLI v6  ** Notice added to Appc CLI for specific commands when output is text (not JSON)  ** Users must switch to Titanium CLI v6    h4. Alloy CLI    * End of Life for the Alloy CLI  ** Effective Titanium SDK 10?  ** Notice added to Alloy CLI  ** Users must switch to {{ti alloy}} to create models, etc  "
"TIMOB-27232","Bug","Android",3,"Android: Setting Window ""barColor"" while using a theme without an ActionBar/TitleBar will cause a crash as of 8.1.0","*Summary:*  Setting {{Ti.UI.Window}} property ""barColor"" if it's using a theme without an {{ActionBar}} will cause a crash as of Titanium 8.1.0.    Note that this bug was never in a release version. It was caught before release.    *Steps to reproduce:*  # Set up a Classic project to build with Titanium 8.1.0.  # Copy the below code to your ""app.js"".  # Build and run on Android.        *Result:*  App crashes on startup and the following exception gets logged...  {code}  [ERROR] :  TiExceptionHandler: (main) [1,6371] Attempt to invoke virtual method 'void android.support.v7.app.ActionBar.setBackgroundDrawable(android.graphics.drawable.Drawable)' on a null object reference  [ERROR] :  TiExceptionHandler:  [ERROR] :  TiExceptionHandler:     ti.modules.titanium.ui.WindowProxy.windowCreated(WindowProxy.java:313)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiActivityWindows.windowCreated(TiActivityWindows.java:57)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiBaseActivity.windowCreated(TiBaseActivity.java:578)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiBaseActivity.onCreate(TiBaseActivity.java:726)  [ERROR] :  TiExceptionHandler:     org.appcelerator.titanium.TiActivity.onCreate(TiActivity.java:47)  [ERROR] :  TiExceptionHandler:     android.app.Activity.performCreate(Activity.java:6975){code}      ----    *Use-case:*  This issue is more likely to happen in apps that use theme/style XML file applied globally to the app. Like the one below supplied by [~andreas.pingas].    {code:xml}  <style name=""FullScreen"" parent=""@style/Theme.AppCompat.Light"">   <item name=""android:soundEffectsEnabled"">false</item>   <item name=""colorPrimaryDark"">#000000</item>   <item name=""colorPrimary"">#EF4938</item>   <item name=""colorAccent"">#FFFFFF</item>   <item name=""colorControlNormal"">#EF4938</item>   <item name=""colorControlActivated"">#2EA1FC</item>   <item name=""colorControlHighlight"">#F26D60</item>   <item name=""colorSwitchThumbNormal"">#FFFFFF</item>     <item name=""android:colorButtonNormal"">#00BCFF</item>   <item name=""android:colorEdgeEffect"">#EF4938</item>   <item name=""android:navigationBarColor"">#000000</item>   <item name=""windowNoTitle"">true</item>   <item name=""windowActionBar"">false</item>  </style>  {code}    {code:javascript}  var win = Titanium.UI.createWindow({       barColor:’#FFF’       theme:'FullScreen'  });  win.open();  {code}  "
"TIMOB-27242","Improvement","Android",2,"Android: Improve getter and setter warnings","Improve Titanium proxy getter and setter warnings:  - Show method and line number to aid in moving over from getter/setter methods"
"TIMOB-27240","New Feature","Android",8,"Android: Add Intl.NumberFormat support","We use the {{Intl.NumberFormat}} class to format currencies, e.g.:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat  {code:js}  const value = new Intl.NumberFormat('en-US', {      style: 'currency',      currency: 'USD',      minimumFractionDigits: 2  }).format(10.12);    console.log(value); // output: $10.12  {code}  It works fine on iOS but throws an error ""{{Intl is not defined}}"", although the web docs indicate it [should work on V8|https://v8.dev/blog/intl].    Workaround until then is writing another native module:  {code:java}    @Kroll.module(name=""TiCurrency"", id=""ti.currency"")  public class TiCurrencyModule extends KrollModule  {   private static final String LCAT = ""TiCurrencyModule"";   private static final boolean DBG = TiConfig.LOGD;     @Kroll.method   public String format(KrollDict params)   {    double value = params.getDouble(""value"");    String currency = params.getString(""currency"");      NumberFormat format = NumberFormat.getCurrencyInstance(Locale.getDefault());    format.setCurrency(Currency.getInstance(currency));      return format.format(value);   }  }  {code}"
"TIMOB-27248","Improvement","Android",8,"Android: Further improve launch time utilizing snapshots","- Futher improve launch time by including {{ti.main.js}} in our V8 snapshot"
"TIMOB-27247","Bug","Android",0,"Android 7: Content URL's are returned as MediaStore columns","On Android 7, different to Android 9 for example, content URL's are returned like the following:    Note {{_display_name}} for example, which is the raw column of the MediaStore class."
"TIMOB-27246","New Feature","Windows",13,"Windows: Implement Ti.Calendar.Attendee","https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Calendar.Attendee  https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.appointments.appointmentinvitee    "
"TIMOB-27250","Story","CLI",2,"Add Node 8 deprecation warning for SDK 9.0 release","Node 8 will not be supported in SDK 9.0. Please add a deprecation warning to the CLI in the next release."
"TIMOB-27249","Improvement","Android",5,"Android: OptionDialog without radio buttons should not auto-set ""selectedIndex"" property after clicking option","*Summary:*  As of Titanium 8.1.0, Android now supports displaying an {{OptionDialog}} without radio buttons if its ""selectedIndex"" property is not set (or set to {{-1}}). See: [TIMOB-26793]    But one usability issue with the current implementation is that tapping on an {{OptionDialog}} button causes the ""selectedIndex"" to be set to the index of the tapped button. The issue with this is if the {{OptionDialog}} is re-shown, it'll show radio buttons instead of plain buttons which is not desired. This happens because the ""selectedIndex"" was set.    *Proposed Solution:*  If the {{OptionDialog}} is not showing radio buttons, then it should not automatically set the ""selectedIndex"" property when tapping a button. The ""click"" event already provides the index of the button that was tapped on and this is enough. Besides, iOS does not support the ""selectedIndex"" property anyways, making this behavior portable.    However, if the developer does set ""selectedIndex"" via code to show radio buttons, then the {{OptionDialog}} should maintain the old behavior and update the ""selectedIndex"" property with the clicked button index.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the ""Show Dialog"" button.  # Tap on the dialog's ""Option 1"" button.  # Tap on the ""Show Dialog"" button again to re-show it.  # Notice the dialog shows radio buttons in front of every option button. _(This is the usability issue.)_        *Work-around:*  Set ""selectedIndex"" to {{-1}} before re-showing the dialog.    "
"TIMOB-27261","Bug","iOS",5,"iOS Unsupported Architecture [x86_64, i386]","Hello. Good afternoon.     I created an adhoc build with the specs mentioned on the section of environment, so after that, I use the application loader to upload the build, but I am getting the issues attached in the image.    Specs:   Titanium SDK : 8.0.2.GA  CLI: 7.0.12  Node : 8.9.1  Axway Appcelerator Studio, build: 5.1.2.201903111843  Xcode : 10.2          Note: If use the following specs,  I will not get any complaint of apple in the application loader.  Ti SDK : 7.5.1.GA  CLI: 6.2.2  Node Version : 8.9.1   Xcode: 10.2    I do not have a reproduce project for the issue, since the project which I am using is very extensive like to put it in this jira ticket.    Please let me know whether you have any doubt or question.    Thanks, and best,  Antonio Duran."
"TIMOB-27253","Bug","iOS",5,"[iOS] Titanium APIs are able to be used for remote webviews","When using a remote webview I am still able to log messages to the console (on Android I am unable to log messages when using a webview).    *app.js*      *Wv.html*      *Test Steps*  # Create an app with the above test files  # Click on the {{load html button}}  # Should display {{test0}} at the top  # Press {{Log Message}}  # Should log a message   # Press {{Reload Webview}}  # Press {{Log Message}}  # Should log a message   # Press {{remote load webview}}  # Should see google homepage   # Press {{Log Message}}    *Expected result*  Log message should not be logged when using a remote webview.    *Actual result*  Log message is still logged when using a remote webview.  "
"TIMOB-27369","Bug","Android",1,"Android: Border Radius once set on a view cannot be reset( i.e. set to 0)","        Currently as a workaround I am setting the borderRadius to 0.1 instead of 0."
"TIMOB-27260","Bug","Android",3,"Android: Minor memory leak occurs in runtime every time app relaunches","There is a minor string memory leak in our ""V8Runtime.cpp"" file that happens every time we launch an app. It happens in our JNI {{nativeAddExternalCommonJsModule()}} function below...  [V8Runtime.cpp#L379|https://github.com/appcelerator/titanium_mobile/blob/a263a54c3a6b2afa2b909c995eb0c6fb210012d3/android/runtime/v8/src/native/V8Runtime.cpp#L379]    We're calling {{GetStringUTFChar()}} to create a {{char*}} string, but we're missing a call to {{ReleaseStringUTFChar()}} to delete it. This is the leak.  "
"TIMOB-27257","Bug","Windows",1,"[Windows] Error is shown when packaging a windows module ","When packaging a windows module an error is shown is Studio and the CLI. The CLI error is shown below:         Test Steps (CLI):   # Create a new Windows module  # {{cd}} into the Windows directory  # run {{appc run}}    *Expected result*   Module should package successfully     *Actual result*  Above error is shown   "
"TIMOB-27263","Bug","iOS",5,"iOS 13: Modal windows with large titles do not honor barColor ","On iOS 13, modal windows with large titles do not honor their {{barColor}} property. Natively, it seems like iOS 13 receives it's modal bar color from the background (see native app attached), but doing the same in Titanium also doesn't work. Here is what I tried (both with backgroundColor and barColor):  {code:js}  var win = Ti.UI.createWindow();     var btn = Ti.UI.createButton({      title: 'Open VC'  });     btn.addEventListener('click', function() {      var win2 = Ti.UI.createWindow({ backgroundColor: 'red', title: 'Hello', largeTitleEnabled: true });        var nav = Ti.UI.createNavigationWindow({          window: win2      });            nav.open({ modal: true })  });     win.add(btn);  win.open();  {code}    In addition, it seems like Titanium applies the default bar tint color different to native iOS, which should be investigated in a different ticket!"
"TIMOB-27266","Bug","CLI",5,"Titanium ""Failed to encrypt JavaScript files"" error on >=8.0.1.GA on Windows when using 32 bit java","There is a bug on Titanium 8.0.1.GA & 8.0.2.GA, where when running a simple compile:        Gives the error:        I narrowed down the issue to changes made to *titanium_prep.win32.exe*.    Looking at the history:  https://github.com/appcelerator/titanium_mobile/commits/master/support/android/titanium_prep.win32.exe    It seems that one of the 2 commits to be blamed are:  https://github.com/appcelerator/titanium_mobile/commit/3eaf55c596402078321632c682549428b7c57371#diff-81660f9ac67f928cddca3a1e35855580  or  https://github.com/appcelerator/titanium_mobile/commit/86b3fc01230a0ec09c0b2577a3e68c1e488e48b1#diff-81660f9ac67f928cddca3a1e35855580    A temp workaround is to copy the *titanium_prep.win32.exe* and *titanium_prep.win64.exe* from 8.0.0.GA and replace the ones in the newer 8.0.1.GA or 8.0.2.GA.              "
"TIMOB-27264","Story","Windows",8,"Windows: Jenkins tests regularly crashing","Jenkins unit tests seems to be regularly crashing on Windows. Ended up skipping some tests in following suites.    - -ti.filesystem.file.test.js-  - -ti.media.videoplayer.test.js-  - -ti.filesystem.filestream.test.js-  - -ti.ui.tabgroup.test.js-  - -ti.map.test.js-    "
"TIMOB-27270","Bug","iOS",8,"iOS: Allow capture of signal exceptions","- Allow ability to capture and handle signal exceptions"
"TIMOB-27269","Bug","Android",3,"Android: Do not retry sending events if no connectivity","- Do not attempt to retry sending events if no connection is established"
"TIMOB-27271","Bug","Android",8,"Android: Resuming with intent using ""FLAG_ACTIVITY_MULTIPLE_TASK"" can hang the app","*Summary:*  Resuming an app with an intent having {{FLAG_ACTIVITY_MULTIPLE_TASK}} set causes it to hang in Titanium 8.0.0 if the app does not immediately open a window via its ""newintent"" event.    Titanium 7.x.x and older isn't much better. It won't hang on startup, but will instead create a new splash screen activity instance and do nothing.    *Note:*  The Android OS will automatically add the {{FLAG_ACTIVITY_MULTIPLE_TASK}} to intents assigned the {{ACTION_SEND}} action. So, apps whose intent-filter do not handle ""intent-filter"" {{ACTION_SEND}} typically don't have to worry about this issue.    *Steps to reproduce:*  # Create a classic Titanium app.  # Set project name to ""IntentTest"". _(This is {{<name/>}} in ""tiapp.xml"".)_  # Set project's ""Application Id"" to ""com.appc.intent.test"". _(This is {{<id/>}} in ""tiapp.xml"".)_  # Set up the ""app.js"" with the below code.  # Build and run on Android.  # Open the Mac ""Terminal"".  # CD (change directory) to: {{~/Library/Android/sdk/platform-tools}}  # In the terminal, enter the following...    {code}  ./adb shell am start -n com.appc.intent.test/.IntenttestActivity -a android.intent.action.VIEW -d https://www.appcelerator.com -f 0x08000000  {code}    app.js  {code:javascript}  Ti.Android.rootActivity.addEventListener(""newintent"", function(e) {   label.text = ""New Intent:\n"" + JSON.stringify(e.intent, null, 4);   Ti.API.info(""@@@ newintent: "" + JSON.stringify(e.intent));  });    var window = Ti.UI.createWindow();  var scrollView = Ti.UI.createScrollView({   scrollType: ""vertical"",   width: Ti.UI.FILL,   height: Ti.UI.FILL,  });  var label = Ti.UI.createLabel({   text: ""Launch Intent:\n"" + JSON.stringify(Ti.Android.rootActivity.intent, null, 4),   width: Ti.UI.FILL,   height: Ti.UI.SIZE,  });  scrollView.add(label);  window.add(scrollView);  window.open();  {code}    *Result:*  In Titanium 8.0.0 and higher, the app hangs. Also notice in the log that the ""newintent"" is being logged non-stop, meaning the ""newintent"" event is being fired repeatedly when it should only be fired once.    In Titanium versions older than 8.0.0, a new splash screen activity window is displayed, but nothing happens. Note that the app is not hung and you can back-out of the splash window, but this is still not good behavior.    *Expected Result:*  The ""newintent"" event should only be fired once and not hang the app.    *Work-around:*  Immediately open a window when a ""newintent"" is received set with this flag.    If you don't want to open a window immediately, then you can instead quickly open/close a temporary window when this flag is set. Note that closing a window immediately as shown below prevents it from ever being shown, because Titanium destroys it via the activity's {{onCreate()}} method.  {code:javascript}  Ti.Android.rootActivity.addEventListener(""newintent"", function(e) {   // This works-around the issue.   if (e.intent.flags & Ti.Android.FLAG_ACTIVITY_MULTIPLE_TASK) {    var window = Ti.UI.createWindow();    window.open();    window.close();   }  });  {code}    _(I've tested the below on Android Q while target API Level 29. It works fine.)_  "
"TIMOB-27277","Bug","iOS",1,"iOS: Invalid analytics platform","- Analytics payload {{os.name}} was set to the wrong field"
"TIMOB-27283","Improvement","Android",5,"Android: Add ""contentSize"" property to Ti.UI.ScrollView ""scroll"" event","Parity for contentSize inside the scroll event of a ScrollView. iOS has this since 5.2.0.    *Example:*        Will output height: 1020 (height of the red view) and your screen width."
"TIMOB-27279","Bug","iOS",5,"iOS: App rejected when using Swift module","We have received multiple reports that using Swift based modules will result in an App Store rejection with the following reason:    Invalid bundle - A nested bundle contains simulator platform listed in CFBundleSupportedPlatforms Info.plist key    Also see https://github.com/appcelerator-modules/titanium-onboarding/issues/6"
"TIMOB-27296","Improvement","Android",8,"Android: Unnecessary conversion from UTF-8 to UTF-16 loading JS assets","- Prevent an unnecessary conversion from UTF-8 to UTF-16 and back when loading Javascript assets"
"TIMOB-27286","New Feature","TiAPI",8,"TiAPI: Create Node-compatible String Decoder module API","It'd be useful to create equivalents of some of the core Node modules in Titanium so that users could port/re-use node codebases on mobile devices. Some of the more common modules could map relatively easily to devices, and would be worth investigating.    https://nodejs.org/api/string_decoder.html    Once Node's Buffer module is implemented it is a relatively small effort to implement the String Decoder module."
"TIMOB-27300","Bug","Android",8,"Android: AssetCryptImpl buffer overflow for large JS assets","*Summary:*  A buffer overflow or out-of-memory exception can occur for device builds (ie: encrypted assets) if the total byte size of all JavaScript source code exceeds the max heap size. This is more likely to happen when transpiled and source-maps are enabled.    *Steps to reproduce:*  # Create a Classic Titanium app project using current *8_1_X*  # Unzip the attached [^TIMOB-27300.zip] to the project's ""Resources"" directory.  # Build and run on a physical Android device. (Alternatively, build with deployment type {{-D test}}.)  # When the app launches, note that an exception occurs in the log.    *Result:*  - An ""BufferOverflowException"" gets logged.    *Expected Result:*  - App should have successfully started and display a green window.    *Notes*  - If you receive an ""OutOfMemory"" exception, test on a different device that has enough RAM to load the test case.    *Recommended Solution:*  Refactor {{titanium_prep}} to prevent {{BufferOverflowException}} for large Javascript files.  "
"TIMOB-27298","Improvement","Android|Hyperloop",5,"Android: Hyperloop should allow access to a Java inner class within an inner class","*Summary:*  Hyperloop can currently access the 1st level of inner classes under a Java class, but cannot access an inner class belonging to an inner class (ie: 2 inner classes deep).    This makes using certain Android classes such as {{MediaStore}}'s 2 level deep nested classes impossible.  https://developer.android.com/reference/android/provider/MediaStore    *Test:*  # Create a Classic Titanium project.  # Add ""hyperloop"" module to ""tiapp.xml"".  # Copy the below code to your ""app.js"".  # Build and run on Android.  # Notice that an exception happens for the last line of code below.      "
"TIMOB-27297","Improvement","Android|Hyperloop",5,"Android: Allow Hyperloop to access Titanium's core Java classes","*Summary:*  Hyperloop is unable to access the Titanium SDK's core Java classes. Hyperloop is also unable to access the Java classes of the JAR/AAR libraries included with the SDK such as the ""java_websocket.jar"" (except for the Google support libraries).    We should modify Hyperloop to reference the Titanium SDK's JARs/AARs as well and not just the project's ""modules"" directory.    *Test:*  # Create a Classic Titanium project.  # Add ""hyperloop"" module to ""tiapp.xml"".  # Copy the below code to the ""app.js"".  # Build and run on Android.  # Verify the following gets logged every second: {{### Is app in foreground: true}}      "
"TIMOB-27304","Bug","Android",5,"Android: Setting <uses-feature/> required ""true"" in ""tiapp.xml"" should override ""false"" setting in libraries","*Summary:*  The ""AndroidManifest.xml"" file's {{<uses-feature/>}} ""android:required"" attribute value can be set to {{true}} or {{false}}. When multiple manifests declare the same {{<uses-feature/>}}, the merge process must do a logical OR of these values. This means that if one of the manifest files sets it to {{true}}, it can be made {{false}} at the end of the XML merge. (The {{true}} setting wins.)  https://developer.android.com/studio/build/manifest-merge    When the Titanium build merges ""timodule.xml"" and ""tiapp.xml"" settings, it does not ""OR"" the ""android:required"" values. Instead the original ""timodule.xml"" value always wins. This means if the ""timodule.xml"" sets it {{false}}, the ""tiapp.xml"" is never able to set it {{true}}. (The reverse is not an issue though.)    *Note:*  The behavior of the XML merge has changed as of Titanium 8.0.2. Before 8.0.2, the ""tiapp.xml"" manifest settings used to blindly overwrite the ""timodule.xml"" manifest settings, which was not technically correct but did allow the ""tiapp.xml"" to override {{<uses-feature/>}} to {{true}} or {{false}} (it still wasn't {{OR}}ing the values though). Titanium 8.0.2 improved the merge to better follow Google's merging rules, but it is not {{OR}}ing the values which is what's needed.    *Steps to reproduce:*  # Create a Classic Titanium app project.  # Add modules ""ti.barcode"" to ""tiapp.xml"". (Can download from [here|https://github.com/appcelerator-modules/ti.barcode].)  # Add the {{<uses-feature/>}} settings in ""tiapp.xml"" as shown below.  # Build for Android.  # Open Mac's ""Finder"" window. (Or ""Windows Explorer"" on Windows.)  # Go to project subdirectory: {{./build/android}}  # Open file ""AndroidManifest.xml"".  # Observe its {{<uses-feature/>}} XML elements.        *Result:*  The merged ""AndroidManifest.xml"" file's {{<uses-feature/>}} for ""android.hardware.touchscreen"" is {{false}} when it should be {{true}}.    *Expected Result:*  The {{<uses-feature/>}} for ""android.hardware.touchscreen"" should be {{true}}, not {{false}}. The values need to be {{OR}}'ed together.  "
"TIMOB-27303","Bug","Windows",8,"Windows: Issue with TableView scrollend event (Windows 10 uwp apps)","Hello!  Scroll event attached in Ti.UI.createTableView. After scroll event-triggered then the user wants to refresh table view. While scrolling, the table view shows blank.  This is happening in Windows 10 app (UWP) but working fine in android/iOS    Teste project: TestUWP.zip  *Steps to reproduce:*  1. Import attached project.  2. Build with sdk 8.0.2.GA or 7.0.2.GA on Windows 10 uwp apps on Windows Desktop  3. Scroll the table view  4.  It showing blank        Thanks     "
"TIMOB-27306","Bug","Windows",8,"Windows: callback of tableview scroll function not getting the content size and contentoffset in UWP application","Hello!  Callback of tableview scroll function not getting the content size and contentoffset in UWP application. It works as expected in android and iOS.   I have implemented custom tableview using createTableView. I have attached scroll event to tableview. but callback of scroll function not getting the content size and contentoffset    *Test Project*: TestUWP.zip  Steps to reproduce:  1. Import attached project.  2. Build with sdk 8.0.2.GA or 7.0.2.GA on Windows 10 uwp apps on Windows Desktop  3. Check the log.      Test Environment :      Thanks "
"TIMOB-27310","Improvement","iOS",5,"iOS 13: Support new type of UIBlurEffectStyle constants","In iOS 13, couple of new UIBlurEffectStyle constants are given. We need to expose these constants to developers.  "
"TIMOB-27309","Bug","Android",5,"Android: Cannot re-show ""ProgressIndicator"" dialog if auto-hidden by closed window","*Summary:*  If a {{Ti.UI.Android.ProgressIndicator}} dialog was auto-closed by a window (ie: you did not call its {{hide()}} method yourself), then you will not be able to re-show the dialog ever again. The {{ProgressIndicator}} object becomes unusable.    *Note:*  This is more likely to happen if Android developer option ""Don't keep activities"" is enabled.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the ""Show Progress Dialog"" button.  # A new window displaying a progress dialog will be shown.  # Wait 2 second for the window and dialog to auto-close.  # Tap on the ""Show Progress Dialog"" button again.  # Notice that the child window is empty. The progress dialog was not shown. (This is the bug.)        *Work-Around:*  Hide the progress dialog when via its window's ""close"" event.    "
"TIMOB-27308","Bug","Android",5,"Android: Determinant ""ProgressIndicator"" ignores ""value"" property before shown","*Summary:*  The {{Ti.UI.Android.ProgressIndicator}} set up as ""type"" {{PROGRESS_INDICATOR_DETERMINANT}} ignores the ""value"" property when the {{show()}} method is called. The displayed progress is initialize to zero. Setting the ""value"" property only works after progress indicator is shown.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the ""Show Progress Dialog"" button.  # Observe the dialog's progress bar position.        *Result:*  The dialog's progress bar is at {{0%}}, which is wrong.    *Expected Result:*  The dialog's progress bar should be {{50%}}.    *Work-Around:*  Set the progress value after the {{show()}} method is called.    "
"TIMOB-27313","Bug","iOS",5,"IOS:Regression-Console.log does not concatenate and log if it has multiple arguments with space","Steps to Reproduce:  1.Create a classic app  2.Run on IOS  *Expected:*  should log  movie size  *Actual:*  displays only the first argument    notes:  if using concatenation like ""console.log(e.type + ' e.naturalSize ' + JSON.stringify(e.naturalSize))"" then logging correctly.  console.log is working fine on 8.0.2 GA and below.not working on 8.1.0    App.js:  "
"TIMOB-27324","Bug","LiveView|Windows",8,"Windows: Error on app launch when Liveview is enabled","Error is shown in the app during the app launch on windows device when the liveview is enabled.  The issue consistently reproduces on windows device however on windows emulator it does work few times.    Steps to Reproduce:  1. Create a default Alloy/Classic project  2. Enable liveview and build to a windows device    Actual Result:  After the splash screen an error is shown as the app launches. Following are the error logs      Expected Result:  The liveview should work on win device"
"TIMOB-27319","Story","Windows",5,"Windows: Jenkins TabGroup default style test regularly crashing","The Jenkins tests for TabGroup {{icon-only tabs - default style}} regularly crashing.      "
"TIMOB-27318","Improvement","iOS",5,"iOS: Use swift 5 for apple watch template","Currently we are using swift 3.1 for Apple Watch template. Need to update to swift 5. For module templates we have already done in TIMOB-26770."
"TIMOB-27325","Bug","Android",3,"Android: Adding <uses-library/> within ""tiapp.xml"" file's <manifest/> block creates invalid entry in ""AndroidManifest.xml""","*Summary:*  Adding a {{<uses-library/>}} element within the ""tiapp.xml"" file's {{<manifest/>}} block will create an invalid entry within the generated ""AndroidManifest.xml"" when doing a build.    *Note:*  The {{<uses-library/>}} entry is supposed to go within the {{<application/>}} block, not the {{<manifest/>}} block. So, doing this would have been invalid anyways. This makes this bug a very minor issue.  https://developer.android.com/guide/topics/manifest/uses-library-element    *Steps to reproduce:*  # Setting a project's ""tiapp.xml"" with the {{<uses-library/>}} entry below.  # Build the project.  # Open Finder or Window Explorer.  # Go to project's subdirectory: {{./build/android}}  # Open the ""AndroidManifest.xml"" file.        *Result:*  The following invalid XML element can be found within the ""AndroidManifest.xml"" file. This doesn't prevent the app from running, but it's still not good that this is there.      *Expected Result:*  Build system should either omit the {{<uses-library/>}} entry or add it as-is.    *Solution:*  As noted above, the {{<uses-library/>}} is supposed to go within the {{<application/>}} block. So, all Titanium app devs should be doing the following instead. The build system will correctly inject this into the ""AndroidManifest.xml"" file.    "
"TIMOB-27328","Bug","Android",5,"Android: Splash screen open animation sometimes stutters on cold start","*Summary:*  As of Android Q beta 4, the OS displays activity windows via a zoom-in animation on some devices such as the Pixel 3. Because of this new open animation, Titanium's splash screen might stutter during a cold start (but not subsequent startups) as shown by the attached ""AndroidQ-Launch.gif"" below.   !AndroidQ-Launch.gif!     This issue can happen on older Android OS versions as well, but is less likely to happen and difficult to reproduce. The attached ""AndroidP-Launch.gif"" shows this happening on Android P with a slide-up transition.   !AndroidP-Launch.gif!     *Notes:*  * This does not happen with Android Q on a Pixel 2 device. (Does not do zoom-in animations.)  * This stutter only happens when opening a window while the splash screen is still doing its open animation. (Can work-around by delaying opening the first window.)  * This appears to be a bug on Google's end, but we should attempt to work-around it.    *Steps to reproduce:*  # Acquire a Pixel 3 device/emulator with Android Q beta 4 or newer.  # Download kitchensink-v2 project. (Can be found [here|https://github.com/appcelerator/kitchensink-v2].)  # Build and run on the Pixel 3.  # Notice that the splash screen stutters while opening as shown in GIF above.  # To re-test, ""force-quit"" the app and relaunch the app.    *Work-Around:*  In your ""app.js"" or ""alloy.js"", delay opening the first window by about {{100ms}}. Waiting for the splash screen open animation to end works-around the issue.  "
"TIMOB-27331","Bug","iOS",13,"Xcode 11: No logs shown on recurring builds","Using the latest Xcode 11 B5, application logs are no longer visible. Logs:  "
"TIMOB-27330","Bug","iOS",0,"Xcode 11: Cannot build to device","When using Xcode 11 B5, I cannot build for device anymore. Production builds work fine. The following error is shown, indicating certificate issues, which is not true since all certs are valid and can be used with Xcode 10:        To reproduce, build a simple app for device in Xcode 10 and then Xcode 11."
"TIMOB-27336","Improvement","Android",8,"Android: Pre-cache common JS assets","- Common Javascript assets such as {{app.js}} or {{alloy.js}} etc.. could be pre-loaded and cached until they are used, speeding up {{require()}} calls.  - A {{cache.json}} could list the assets to be loaded upon launch and can be generated at build time."
"TIMOB-27335","Bug","Windows",8,"Windows: TableView constantly fires scrollend during mouse drag","TableView constantly fires {{scrollend}} event during dragging scroll bar with PC mouse.     !drag.png|thumbnail!         Expected: {{scrollend}} happens only when you finish scrolling bar with mouse drag.    "
"TIMOB-27338","Bug","CLI|iOS",0,"iOS: Invalid iOS simulator error is shown when doing concurrent builds with iOS 13","When running concurrent iOS builds on simulators the following error is seen in Studio:    The cli also shows this error:      *Test Steps*  # Create a titanium project   # Run the project in APPC studio or through the CLI (e.g. {{appc run -p ios -C 8B89634B-0E8B-4286-8839-7CEE6A035700 -I 13.0}})  # Re-run the project without closing the Simulator    *Actual result*  Above error is shown    *Expected result*  Above error should not be shown and application should launch on the simulator       "
"TIMOB-27342","Bug","iOS",5,"iOS regression: Console.warn/error don't log all parameters","When using console.log/warn/error usually all parameters get logged, however since SDK 8.1.0 this is no longer the case.    If you run this code:  {code:js}  console.log('a', 'b');  console.warn('a', 'b');  console.error('a', 'b');    [INFO]  a b  [WARN]  a  [ERROR] a   {code}    It should log {{a b}} for all 3 types.    It works fine for Android and iOS SDK 8.0.0.GA"
"TIMOB-27406","Bug","Android",3,"Android: Cannot select content from downloads","I downloaded the following image to the device, so after that in the app I am selecting the image from the gallery of download, and it is causing a black/ gray window after selecting the image.    http://www.effigis.com/wp-content/uploads/2015/02/Airbus_Pleiades_50cm_8bit_RGB_Yogyakarta.jpg    The purpose of use this huge image it is that I am using the ti.imagefactory module to compress the image, but at the moment I am selecting the image downloaded the app is behaving in this way showing a black or gray window.     Note this issue is not happening in iOS.    XML:          JS:            Please let me know whether you have any doubt or question.    Thanks, and best,  Francisco Antonio Duran Ramirez.  "
"TIMOB-27348","Bug","Android",5,"Android: WebView.stopLoading() is not functional when triggered by events","{{Titanium.WebView.stopLoading()}} has no effect when called from events.    *TEST CASE*  {code:js}  const win = Ti.UI.createWindow();  const webView = Ti.UI.createWebView({ url: 'https://google.com/' });    // prevent page from loading.  webView.addEventListener('beforeload', e => {      webView.stopLoading();  });    win.add(webView);  win.open();  {code}    *EXPECTED*  - Page is prevented from load, displaying a blank screen.    *ACTUAL*  - Page loads."
"TIMOB-27353","Bug","iOS",5,"iOS: Unable to send Date() object in event payload","- iOS is unable to properly serialize a Javascript {{Date}} object in an event payload    *TEST*  {code:js}  Ti.Analytics.featureEvent('test.date', { date: new Date() });  {code}    *EXPECTED*  - Should not crash    *ACTUAL*  - Crashes application"
"TIMOB-27352","Improvement","Android|iOS",8,"Analytics: Improve event batching","- Improve event batching for both iOS and Android  - Send batches of 20 events for improved reliability in low connectivity environments  - Increase batch frequency to accommodate for a large number of events"
"TIMOB-27351","Bug","iOS",5,"iOS: Unit tests failing on Xcode 11 / iOS 13","Once we started building and running against Xcode 11 and iOS 13, we have two unit tests that started failing:    ios.Titanium.UI.iOS.#createPreviewContext() - expected 0 to equal 300  ios.Titanium.UI.Window..safeAreaPadding for window inside navigation window with extendSafeArea true - expected 34 to equal 0    This can be found on any of our recent master branch builds on master"
"TIMOB-27350","Bug","iOS",2,"iOS: httpClient returning image response as undefined.","*Customer issue:* As part of Titanium SDK migration from 7.5.2.GA to 8.1.0.GA titanium SDK, we are encountering an issue when we are fetching image from server and checking if the response is Blob or not by converting to .toString().   It is returning “undefined” with 8.1.0.GA but returning blob object with 8.0.2.GA, 7.5.2.GA.     Steps to reproduce:   1. Create a classic mobile app with 8.1.0 SDK.   2. Replace app.js file content with attached app.js.   3. Run on iOS device.   4. check the info in the console.     Thanks"
"TIMOB-27360","Bug","iOS",8,"Watch app does not get installed on the watch with watch OS 6.0 & IOS 13","h5. Steps to reproduce:  1. Use the watch app here : https://github.com/appcelerator-developer-relations/appc-sample-watchos2  2. Build it to a watch & iPhone simulator.    h5.Actual result:  1. You will see the app installs on the phone but does not install on the watch.    h5.Expected result:  1. The app should install on both phone & watch."
"TIMOB-27358","Improvement","CLI|iOS",8,"iOS: Support Apple Developer certificates","h5.Description    Apple has introduced a new ""Apple Developer"" certificate that encompasses signing for iOS, MacOS, tvOS, and WatchOS applications. I believe this was the root cause of TIMOB-27330.    Places we need to update:    Titanium CLI/SDK:    ioslib@v1 - update cert.js to also scan for ""Apple Development"" and ""Apple Distribution""    Daemon:    ioslib@v2 & v3: Update the regex to include ""Apple Development"" and ""Apple Distribution""    Studio:    Might need to update the property it uses from the cert object to display in the UI, currently it's possible for two certs to share an identical {{name}} i.e. {{Ewan Harris (EH123J4ST56)}}, so only one appears to be added to the cert list, the only way to differentiate is via the {{fullname}} i.e. {{Apple Distribution: Ewan Harris (EH123J4ST56)} vs {{iPhone Distribution: Ewan Harris (EH123J4ST56)}}"
"TIMOB-27430","Bug","Android",5,"EncryptedDB ResultSet field and fieldByName functions are returning incorrect values on Android","Calling .field() or .fieldByName() on an encrypteddatabase (3.0.4) ResultSet returns a boolean false if the value of the field is NULL.  This issue seems to be isolated to this module on Android with the 8.1.0.GA SDK.  8.0.0.GA and iOS don't have this issue, nor does the built-in Ti.Database.ResultSet.  A small sample project is linked below.  Run this app on an Android device and see the discrepancies between the console log outputs for non-encDB and encDB.  Running on iOS or switching back to 8.0.0.GA alleviates the discrepancy.    Sample project:  https://drive.google.com/file/d/1HW1jxvUPZ67_HVx1Phe-PqgJKeVQygLp/view?usp=sharing"
"TIMOB-27362","Bug","Hyperloop",13,"Hyperloop example with Xcode 11 throws error on pod","**Steps To Reproduce:**  1.import Hyperloop example  2.Run on iOS simulator 13     *Expected:*  Hyperloop should be installed and launch fine   *Actual:*  throws error  [WARN]  [Hyperloop] CocoaPods 2019-08-28 16:10:45.042 xcodebuild[36945:2593098]  DTDeviceKit: deviceType from aa9928797e2fd58e6dce8e858e5e8afcbce393bf was NULL  [WARN]  [Hyperloop] CocoaPods 2019-08-28 16:10:45.085 xcodebuild[36945:2593092]  DTDeviceKit: deviceType from aa9928797e2fd58e6dce8e858e5e8afcbce393bf was NULL  [TRACE] [Hyperloop] CocoaPods note: Using new build system  [WARN]  [Hyperloop] CocoaPods 2019-08-28 16:10:45.387 xcodebuild[36945:2593095] unable to create build operation: Error Domain=com.apple.xcbuild Code=1 ""unknown error while handling message: missingTarget(guid: ""345a28d23c8e4235945c90e2e6ffcfba1a6c203c29e67926a1f49846b3a914d9"")"" UserInfo={NSLocalizedDescription=unknown error while handling message: missingTarget(guid: ""345a28d23c8e4235945c90e2e6ffcfba1a6c203c29e67926a1f49846b3a914d9"")}  [WARN]  [Hyperloop] CocoaPods ** BUILD FAILED **  [ERROR] An error occurred during build after 5s 671ms  [ERROR] the xcodebuild failed running from /Users/kmahalingam/Documents/Appcelerator_Studio_Workspace/hyperloop-examples2/Pods    Note:  on Xcode 10 it is hyperloop example works fine with cocoa pod version less that 1.6  on Xcode 11 it throws the error"
"TIMOB-27366","Bug","iOS",1,"iOS: Video player not getting closed in iOS version 10.x.x and below","Hello,    Video player is not getting closed in iOS version 10.x.x and below but on iOS version 12 or above it's working fine.     *Test Environment:*  Appcelerator Command-Line Interface, version 7.1.0  Operating System    Name                        = Mac OS X    Version                     = 10.14.5    Architecture                = 64bit    # CPUs                      = 4    Memory                      = 8589934592  Node.js    Node.js Version             = 8.9.1    npm Version                 = 5.5.1  Titanium CLI    CLI Version                 = 5.2.1  Titanium SDK    SDK Version                 = 8.1.0.GA  iOS device: iPhone 6plus(12.4), iPod 5G(9.3.3),  iPhone OS 10.3.3    *Test code:*  app.js    playvid.js      *Steps to reproduce the issue:*  1. Run the project on iOS 10.x.x enable device  2. Click on the red window video play button.  3. Opened the video player window and it's paying the video  4. Make it full Screen and wait until complete the video  5. It's not returning to the Red window on iOS 10.x.x device(Check Screenshot).    But it's working fine on iOS 12 or above device.    Thanks"
"TIMOB-27367","Bug","iOS",5,"iOS: Apps can be rejected when including UIWebView refs","Users submitting apps this week are seeing the following notification:  {quote}  ITMS-90809: Deprecated API Usage - Apple will stop accepting submissions of apps that use UIWebView APIs . See https://developer.apple.com/documentation/uikit/uiwebview for more information.  {quote}    This even occurs for SDK 8+ apps that use the WKWebView instead of the (deprecated) UIWebView. The reason is (I think) that there are still some UIWebView* left overs that aren't even used anymore. Removing them will very likely fix the issue."
"TIMOB-27376","Improvement","iOS",1,"iOS: Malformed Xcode project warning printed on every build","The following is printed as red error text when building for iOS:        Those are warnings that indicate a malformed Xcode project. Since they will be printed as red warning messages they get especially confusing when the build actually fails."
"TIMOB-27379","Bug","Windows",8,"Windows:Using hint text on Textfield and 'passwordMask' property is true, the hint text is not shown when the TextField is cleared programmatically","For a TextField with hint text, if the 'passwordMask' property is true, the hint text is not shown when the TextField is cleared programmatically like on click of a button like below.    But, it works fine case of manual clearing of the same TextField. Also, for a TextField with 'passwordMask' property as false, it works without any issue in both manual and programatic clearing of the field.The customer is facing issue on *Windows 10 version 1809 desktop*.It Works fine for Android and iOS.    A screenshot is posted to the click of Reset button. On that button click, text fields are cleared. But, hint text is restored only for the Username field and not for Password field.    *Testing Environment:*            *Sample test case:*          *Test Steps:*    1. Open the app.  2. Enter some values in Username and Password fields.  3.Click the Reset button which programmatically clear the Text Fields.        *Test Output:*    *Curent Result:* Password field cleared and hint text is not shown.  *Expected Result:* Password field cleared and hint text to be shown.    "
"TIMOB-27382","Bug","iOS",0,"iOS: CORS Issue, origin of header is always null since SDK 8","h6.Problem Description:    As of SDK 8, any XMLHttpRequest performed inside a WebView from a file has a header of origin: null. This is a behavior that was not present in SDK 7 and only affects IOS. (It seems to be due to the change to WKWebview.)    We use the WebView in an authentication workflow where we have an intermediate HTML file with the necessary javascript to perform the redirections/progress the sign in. This is an HTML page in resources/www.    Due to the fact this header is now   A) Being set for seemingly all requests, even GET   B) is always null   This is breaking our authentication process and we cannot continue developing our application until it is fixed.    There does not appear to be any way to currently set this via titanium, there is also nothing in the documentation. We cannot set Access-Control-Allow-Origin * / null as this would pose a security risk server-side.    We need to be able to switch back to using UIWebview in the new SDK, the origin header dropped, or, the origin header has a correct value (https://localhost/.....).    h6.Reproduce  1. Create a new alloy projet.  2. Add attached file.  3. Run the app to iOS device  4. Monitor network traffic so you can see the request headers (as per screenshot attached)."
"TIMOB-27398","Bug","Android",5,"Android: Random assets missing after compiling","    I have some local websites in my ""/app/assets/www/"" folder to display charts and barcodes. While it worked fine with 8.0.2.GA I have some big issues with the latest 8.1.1.GA or CLI version listed above. Every compile a different item out of the ""/app/assets/www"" is missing!     !Screenshot_20190907_200524.png|thumbnail!     on the left side is my folder. I've open the APK inside a zip tool: the middle is the first run, the right image is the last run. Some files are the same but some files are missing.   I've tried to rename the files but that didn't work either"
"TIMOB-27384","Bug","iOS",0,"iOS 13: App can crash if deprecated ""statusBarFrame"" property is called","When accessing the (in iOS 13 deprecated) ""statusBarFrame"" property, e.g. for rare view controller changes, the app can crash. Migrating to the iOS 13+ ""statusBarManager"" API of the ""UIWindowScene"" will fix the issue.    It can be reproduced by trying my [titanium-scanner|https://github.com/hansemannn/titanium-scanner] module and clicking ""Cancel"" on the scanner view controller.    Pull request: https://github.com/appcelerator/titanium_mobile/pull/11201"
"TIMOB-27386","Bug","iOS",3,"iOS: Correctly decode push notification token","h5.Description    On iOS 13 registering for push notifications returns an invalid device token, this is because the way we decode the device token has been broken by apple (although it seems it wasnt a recommended way anyways)    See https://github.com/OneSignal/OneSignal-iOS-SDK/pull/509        h5.Steps to reproduce    1. Add the below code to an app.js or alloy.js    h5.Actual    The device token printed looks like       h5.Expected    The device token should look like    "
"TIMOB-27390","Story","Hyperloop",3,"Update Hyperloop to 4.0.4","Update the SDK's bundled Hyperloop version to 4.0.4"
"TIMOB-27395","Improvement","iOS",3,"iOS: Support new devices in os.cpus()","- {{os.cpus()}} will fail for newer devices    **TEST CASE**  {code:js}  const os = require('os');  console.log(JSON.stringify(os.cpus(), 1));  {code}"
"TIMOB-27403","Bug","CLI|iOS",3,"CLI: Semantic colors file lookup does not work correctly in classic applications","h5.Description    When looking up the {{semantic.colors.json}} file for classic applications we look in {{Resources/iphone}} this isn't really the place we want to find it. We want to also look in {{Resources}} as it's intended to be cross-platform    h5.Steps to reproduce    1. Get the project from https://github.com/ewanharris/darkmode-example-classic  2. Build to an iOS 13 sim/device  3. Toggle dark mode    h5.Actual    App has white window and black label always    h5.Expected    App should change between a yellow window with a red label (light mode) and green window with a pink label (dark moe)"
"TIMOB-27409","Bug","LiveView",5,"Kitchensink : Liveview is not working ","Steps To Reproduce:  1.import kitchen sink   2.run on android or iOS device./simulator with live view    Notes:  live view works fine on default classic and alloy app  Expected:  live view should work fine    Actual:  [ERROR] :  Script Error {    [ERROR] :      column = 24;    [ERROR] :      line = 666;    [ERROR] :      message = ""[LiveView] File Server unavailable. Host Unreachable @ 192.168.0.17:8324\n[LiveView] Please ensure your device and computer are on the same network and the port is not blocked."";    [ERROR] :      sourceURL = ""file:///Users/kmahalingam/Library/Developer/CoreSimulator/Devices/2A09648F-A541-4DD5-9E06-3B6087C54CB3/data/Containers/Bundle/Application/BFC9131E-82B1-42A3-AABC-3756D8287256/KitchenSink.app/app.js"";    [ERROR] :      stack = ""    at _getRemoteSource(/app.js:666:24)\n    at _getSource(/app.js:682:35)\n    at _compile(/app.js:718:30)\n    at require(/app.js:586:25)\n    at patch(/app.js:424:45)\n    at (/app.js:763:15)\n    at (/app.js:768:3)\n    at global code(/app.js:771:70)\n    at require@[native code]\n    at (/ti.main.js:11677:10)\n    at loadAsync(/ti.main.js:11603:13)\n    at global code(/ti.main.js:11674:10)"";    [ERROR] :      toJSON = ""<KrollCallback: 0x600001d9dfc0>"";    [ERROR] :  }    [DEBUG] :  Firing app event: uncaughtException    [ERROR] :  Script Error {    [ERROR] :      column = 10;    [ERROR] :      line = 11677;    [ERROR] :      message = ""Module \""app.js\"" failed to leave a valid exports object"";    [ERROR] :      sourceURL = ""file:///Users/kmahalingam/Library/Developer/CoreSimulator/Devices/2A09648F-A541-4DD5-9E06-3B6087C54CB3/data/Containers/Bundle/Application/BFC9131E-82B1-42A3-AABC-3756D8287256/KitchenSink.app/ti.main.js"";    [ERROR] :      stack = ""    at require@[native code]\n    at (/ti.main.js:11677:10)\n    at loadAsync(/ti.main.js:11603:13)\n    at global code(/ti.main.js:11674:10)"";    [ERROR] :      toJSON = ""<KrollCallback: 0x600001d87400>"";    [ERROR] :    "
"TIMOB-27419","Bug","iOS",5,"Ti.Contacts.getAllPeople() fails on iOS 13","Apple have added a new entitlement com.apple.developer.contacts.notes which allows apps to access the notes field of the contact db. The new entitlement is on a per app basis with developers required to put their case to Apple to gain it.    Titanium requests CNContactNoteKey as part of the Ti.Contacts.getAllPeople method. This triggers a CNErrorDomain error 102.    Any app compiled for iOS 13 without this entitlement will not be able to use the Ti.Contacts module for anything; regardless of needing the notes field.    To test create an empty project with the following in tiapp.xml            <key>NSContactsUsageDescription</key>          <string>Contacts test</string>    Add the following to alloy.js  var people = Ti.Contacts.getAllPeople();    error in console        "
"TIMOB-27413","Bug","iOS",5,"iOS: Window hideShadow and shadowImage property doesn't works on iOS 13","There was a trick to remove the shadow on navigation bar. It consisted on set a image of the same color as the background and set it to *barImage* property and set *hideShadow* to true.    It is working with 8.2.0.GA on iOS 13 < but not on iOS 13.    tss:            This line could be related with:    https://github.com/appcelerator/titanium_mobile/blob/11aef9cc1069c395e8f9a45570633e40dd80f76e/iphone/TitaniumKit/TitaniumKit/Sources/Modules/TiUIWindowProxy.m#L442    On the screenshot attached:    - iOS 13 on the left side.  - iOS 12 on the right side.    "
"TIMOB-27412","Bug","Android",5,"Android: App stuck at launch screen when opened through notification","We noticed a strange behavior where the app sometimes hangs on the launch screen when opened through the click on a notification (Firebase powered). For sample code, please refer to our app thats internally shared."
"TIMOB-27420","Bug","Android",3,"Android: ImageView.toImage() does not return the correct Ti.Blob","- {{Titanium.UI.ImageView.toImage}} does not return the image {{Blob}} for the current image.    *TEST CASE*  {code:js}  const Map = require('ti.map');    const win = Ti.UI.createWindow({ backgroundColor: 'white' });    const img = Ti.UI.createImageView({      width: 28,      height: 28,      image: 'appicon.png'  });    const map = Map.createView({      region: { latitude: -33.87365, longitude: 151.20689, latitudeDelta: 0.1, longitudeDelta: 0.1 },      annotations: [          Map.createAnnotation({              latitude: -33.87365,               longitude: 151.20689,              title: 'Icon',              image: img.toImage() // Should see icon center of map              // image: 'appicon.png'          })      ],  });    win.add(map);  win.open();  {code}"
"TIMOB-27424","Bug","Android",0,"Android: Video player splashing black screen just before playing video","*Issue Description:*  When trying to play video in video player, it shows a black screen just before playing video using Ti SDK 8.2.0 on android 8 and 8.1.0    *Steps to reproduce:*  1. Create an alloy project and replace the code  2. Download ""test.mp4"" video file from the attachment and place that in app/assets/android/video folder.  2. Build the project and observe it'll show a black screen before playing the video.    *Expected:* Shouldn't show any black screen before playing the video.  *Actual:* Shows a black screen before playing the video.    *Attachment:* See the screencast ""black_screen_issue.mp4""     *Test Code:*  *index.xml:*      *index.js*      "
"TIMOB-27427","Bug","iOS",5,"iOS 13: Natively presented modal windows are not dismissed properly","When using iOS 13, native modal windows like the one from {{Ti.Media.showCamera}} are not presented correctly, causing the underlaying view controller to not be dismissed correctly.    {code:js}  var win = Ti.UI.createWindow();  var btn = Ti.UI.createButton({ title: 'Show camera' });    btn.addEventListener('click', () => {    Ti.Media.requestCameraPermissions(event => {      Ti.Media.showCamera({        success: () => {},        error: () => {},        cancel: () => {},      });    });  });    win.add(btn);  win.open();  {code}  "
"TIMOB-27435","Bug","iOS",2,"iOS: Building using Xcode 10.3 and 8_2_X Throws a Compile Error","Building for target 12.4 simulators on Xcode 10.3 errors out with a compile error when building on SDK 8.2.1.v20191001063013.        [~eharris] points to this being from the following changes:  https://github.com/appcelerator/titanium_mobile/commit/b1d6ce01a164e8a7d23edae8ba22d0f788a87716#diff-e1a4da0f4a0b16271e27fc854bcd357fR10    https://github.com/appcelerator/titanium_mobile/commit/b1d6ce01a164e8a7d23edae8ba22d0f788a87716#diff-e1a4da0f4a0b16271e27fc854bcd357fR215-R223"
"TIMOB-27434","Bug","Android",5,"Android: Re-layout of deeply nested views can cause performance issues as of 7.5.0","*Summary:*  If you have very deeply nested views (say 15 or more), then anything that causes them to be re-laid out can cause noticeable performance issues as of Titanium 7.5.0.    *Steps to reproduce:*  # Build and run the below code on Android.  # Tap and hold on the text within the {{TextField}}.  # Notice that the app hangs for a couple of seconds.  # Rotate the device to landscape.  # Notice that the app hangs for a couple of seconds.        *Cause:*  This regression was introduced in 7.5.0 when we added the ""extendSafeArea"" and ""safeAreaPadding"" feature. The performance issue is caused by our Java [TiCompositeLayout.onApplyWindowInsets()|https://github.com/appcelerator/titanium_mobile/blob/3b925d3b89e0d59bf89b846bfa127e9656746dbf/android/titanium/src/java/org/appcelerator/titanium/view/TiCompositeLayout.java#L460] method when you have deeply nested views (say 15 or more layers). The dispatched window inset handling appears to get exponentially worse the more views you have nested. Especially since each child view that applies those insets triggers a request-layout.    *Work-around:*  Only known work-around is to not nest your views so deeply. Try not to nest more than 10 layers deep.  "
"TIMOB-27461","Bug","Android",1,"Android:Extra padding if enableZoomControl is true for imageView on 8.2.0.GA","The customer has a requirement where they need to display an image inside a scrollview and provide zoom controls for that image. But they are able to see the extra spacing at top and bottom of the image. If the ""enableZoomControls"" is set to false, image displayed properly without any extra spaces. Currently they are using 8.0.2.GA SDK.   Note: We tested the issue on 8.2.0.GA, Huawei Gr3 2017(Android 7) and the issue is reproduced on our end.      *Test steps:*    * Create a classic project  * Download the image file and paste it on resources  * Paste the sample code to app.js  * Run the project on device. After running, we are able to see the extra spacing at top and bottom of the image.    *Test Code:*        *Test Output:*  ""enableZoomControls"" is true:   !Screenshot_20191010-155604.png|thumbnail!       ""enableZoomControls"" is false:   !Screenshot_20191010-155205.png|thumbnail! "
"TIMOB-27460","Bug","iOS",5,"iOS: tintColor not working for TabbedBar/ButtonBar on iOS 13","With iOS 13 the styling of the {{UISegmentedControl}} significantly changed. Previously the color of the selected element and the border color could simply be set with {{tintColor}}. Now this requires a combination of {{backgroundColor}} / {{selectedSegmentTintColor}} / {{setTitleTextAttributes}} and manual settings for borders using the underlying {{layer}}.    See also https://stackoverflow.com/a/56874473/1168989    *Steps to reproduce the behavior*  {code:js}  const win = Ti.UI.createWindow({   backgroundColor: 'black'  });  var test = Ti.UI.createTabbedBar({   labels: [ '1', '2', '3', 'AUTO' ],   tintColor: 'white'  });  win.add(test);  win.open();  {code}    *Actual behavior*  The controls has no border and unselected elements are barely visible. !Schermata 2019-10-10 alle 11.21.28.png|thumbnail!     *Expected behavior*  The control has a border and unselected element are colored according to {{tintColor}}. !Schermata 2019-10-10 alle 11.21.24.png|thumbnail! "
"TIMOB-27471","Bug","Android",1,"Android: Unable to load large image to image view","The customer has a requirement where they need to get image and display it in the image view. Few images are not displayed even though images are bind to the image view.    *It is throwing warning “[WARN] : OpenGLRenderer: Bitmap too large to be uploaded into a texture (4196x3363, max=4096x4096)”.*   I    {panel}  This issue is happening because of size 4196x3363, max=4096x4096. The log mentions the max size max=4096x4096. Is there any solution or workaround for this issue?  Note : This issue is on Nexus 7(OS 6.0.1) and Samsung s4(OS 4.4) devices. It is working fine on Pixel(9.0) device. Tested with 8.0.2.GA Ti SDK and 8.2.0.GA Ti SDK.    {panel}      Sample Test Code:    *Steps to reproduce:*  1. Create a sample classic project  2. Replace the app.js with attached app.js content.  3. Place the attached test.png under “Resources” folder.  4. Run the app in Nexus 7 device.    *Expected*: Image should bee rendered properly.  *Actual:* Image not rendered and throwing warning in the console.    *Note:*  We tested it and able to reproduce with the big image as like the customer image on HTC M8 eye v6.0.1      "
"TIMOB-27469","Bug","iOS",5,"iOS: SelectedBGColor of list item is overriding the BG color view","h6.Problem  When adding background color for Ti.UI.View/Label of the ListView item.  But on the select of list view item, ""selectedBackgroundColor"" of the list item is overriding the background color of the Ti.UI.View.    h6.Reproduce  1. Create a default classic app.  2. Use the attached app.js code.  3. Run the code on SDK 8.1.0 and 8.2.0    h6.Expected  When clicking on the ListView item, we should still see the background color of the Ti.UI.View.    h6.Actual  When clicking on the ListView item,  unable to see the background color of the Ti.UI.View. (attached screenshot)    h6.Note  1. This happens on simulator and device on iOS 12 and below  2. Based on the customer's comment, it happened to the iOS 13 devices.  3. I do test that It is working well on iOS 13 simulator. "
"TIMOB-27476","Improvement","Android|iOS",2,"docs: deprecate Ti.Analytics.navEvent","- Deprecate old and unused {{Ti.Analytics.navEvent}}"
"TIMOB-27473","Improvement","Android",8,"Android: Replace clang Java formatter with gradle ""checkstyle"" tool","*Summary:*  The Android gradle build system includes its own ""checkstyle"" tool. This tool is used to enforce Java coding standards and to check for common Java coding errors. It can be used to trigger build errors that fails to pass the configured rules defined in a ""checkstyle.xml"" file.  https://docs.gradle.org/current/userguide/checkstyle_plugin.html  https://checkstyle.org/index.html    *To-Do:*  We should replace our existing clang-format tool in favor of this gradle checkstyle tool. The main reason is because the dev team does not know they are violating the clang linter's rules until its been ran on Jenkins (or ran manually via node).    * Jenkins is verifying the clang formatting rules by reformatting changed Java files and doing a comparison of files. This is too restrictive because the reformat of the files sometimes looks worse from a readability standpoint. (Too restrictive.)  * The dev team sometimes doesn't know they are violating clang's rules until a PR has been submitted to Jenkins or we run it manually via node. (Common mistake.)  "
"TIMOB-27472","Improvement","Android",5,"Android: Add Java 8 support","*Summary:*  Titanium currently support ""Java 7"" language features.    In Titanium 9.0.0, we would like to add ""Java 8"" language features for the core SDK and all modules. This is needed since some 3rd party Android libraries use the Java 8 language, but we're currently unable to compile them into a module or via hyperloop.    *Limitations:*  Android has limited support for Java 8 language features which Google documents below. Note that older Android OS versions support less Java 8 features.  https://developer.android.com/studio/write/java8-support#supported_features    *Recommended Solution:*  We don't support Java 8 because Titanium is currently limited to using the ""dex"" command line tool in the Android SDK which only supports up to Java 7. Google's ""d8"" command line tool supports Java 8. If we update our Titanium build system to use gradle, then we can easily add support for this.    Support can be added via the following ""build.gradle"" settings...  {code:groovy}  android {   compileOptions {    sourceCompatibility JavaVersion.VERSION_1_8    targetCompatibility JavaVersion.VERSION_1_8   }   // When we add Kotlin support in the future,   // then we must do the following as well.   kotlinOptions {    jvmTarget = ""1.8""   }  }  {code}    *Testing:*  We should add a Java 8 feature to our core Titanium code to prove that Java 8 compilation works for both the SDK and an app build. In our [TiUIView.java|https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/src/java/org/appcelerator/titanium/view/TiUIView.java] code, I recommend that we change the following code...  {code:java}  protected void setOnClickListener(View view)  {   view.setOnClickListener(new OnClickListener() {    public void onClick(View view)    {     fireEvent(TiC.EVENT_CLICK, dictFromEvent(lastUpEvent));    }   });  }  {code}    ...to use a Java 8 lambda as follows...  {code:java}  protected void setOnClickListener(View view)  {   view.setOnClickListener((clickedView) -> {    fireEvent(TiC.EVENT_CLICK, dictFromEvent(lastUpEvent));   });  }  {code}    We can then test the above via a Titanium {{Ti.UI.Button}} object's ""click"" event.  {code:javascript}  var window = Ti.UI.createWindow();  var button = Ti.UI.createButton({ title: ""Show Alert"" });  button.addEventListener(""click"", function() {   alert(""Button clicked!"");  });  window.add(button);  window.open();  {code}  "
"TIMOB-27479","New Feature","Tooling",5,"Webpack: Automatically exclude Titanium modules","Titanium modules need to be marked as external so Webpack does not try to parse/bundle them."
"TIMOB-27482","Bug","iOS",8,"iOS: App is crashing with SDK 8.2.0.GA on iOS 13 devices","If repeat the following operations on ios13, the app will crash. Crash logs and videos are attached herewith.What is the cause?    *Test steps:*    1. Start application  2. Select a video  3. Click on Choose  4. Wait for compressing video  5. Then move the app to the background with the home button. Wait for a few seconds after moving the app to the background and then click on the App icon for opening it.    It should be reproducible if repeated several times.    *Test project:* Click [here|https://drive.google.com/file/d/1d8KSP9olLafRle2O44ydMztlJ5H_oPkh/view?usp=sharing]    *Output:* [Video|https://drive.google.com/open?id=1np1TSXQ52D-1Op4cZXj8y30w0kmU-z_E]    *Note:* We also tested this on iPhone SE(13.1.3) and the issue is reproduced on our end. Video is uploaded on output section."
"TIMOB-27487","Improvement","Android",5,"Android: Build x86_64 module libraries","- Include {{x86_64}} ABI by default  - Build {{x86_64}} compatible V8 library  - Possibly drop {{x86}} ABI from defaults?"
"TIMOB-27484","Bug","iOS",5,"iOS: App fails to launch with ""undefined is not an object"" on iOS 9","h5.Description    When building to an iOS 9 device/simulator the following error is seen, it's probable this is down to some of the recent refactorings in the build scripts relating to ti.main        h5.Steps to reproduce    1. Build an app to iOS 9    h5.Actual    Error above    h5.Expected    App should launch fine"
"TIMOB-27493","Bug","Android",5,"Android: Videos do not play correctly on Android 5.1 (API 22)","*Summary*  When playing a video from URL using Media.VideoPlayer, the video freezes after 2-3 seconds and errors are displayed on Android 5.1 (API level 22).    *Steps to reproduce*  # Create a Classic titanium app project  # Add the below code to _app.js_  # Use any of the affected SDK versions (e.g. 8.2.0.GA)  # Run on Android API 22 emulator or device    {code:js}  var window = Ti.UI.createWindow({ fullscreen: true });  var videoView = Ti.Media.createVideoPlayer({   url: ""http://assets.appcelerator.com.s3.amazonaws.com/video/media.m4v"",   autoplay: true,   width: Ti.UI.FILL,   height: Ti.UI.FILL,  });  window.add(videoView);  window.open();      *Expected Result*  The video should play as normal and there should not be any errors in the terminal."
"TIMOB-27498","Bug","iOS",1,"iOS: Intermittent UI Layout test failures","We are seeing intermittent UI Layout test failures. Specifically here's a failure from a build: https://jenkins.appcelerator.org/job/titanium-sdk/job/titanium_mobile/job/8_2_X/46/testReport/    The test failures are variants of a test around TIMOB-23372, and expect a post layout event to have a rect with an x property equal to 10 (the left padding). Sometimes this event fires with a value of 9.    This appears to be related to simulators being created by our appium suite?    Failures:  Building for iOS Simulator: appiumTest-63D0910A-9E17-4437-AF50-781E3BCBC590-iPhone 7  Building for iOS Simulator: appiumTest-C4E4A63F-7A15-4130-A574-6E7FA5B5D620-iPhone 7    Passed:   Building for iOS Simulator: iPhone 11 Pro Max  Building for iOS Simulator: iPhone 11 Pro Max"
"TIMOB-27496","Bug","Android",5,"Android: Setting ListView row item property not in template will be wrongly duplicated on offscreen rows","The customer discovered a bug with ListView on Android. The issue happens when having a very long list. They use one template for all items and show/hide certain parts of it depending on their business logic. They've noticed that when scrolling below the fold and scroll back up items are being re-rendered using styles from the LAST item in the list. Instead of showing/hiding items, they colored them red. Notice that when rendered it looks correct. When scrolling down and encounter accounts colored with red background and scroll up - previously non-colored accounts also get the red background. The customer tested on Samsung S6, S7, S8, S9, S10 with SDK 8.2.0 GA.  Note: We tested the issue on 8.2.0.GA, Sumsang Galaxy A7(Android 9) and the issue is reproducible on our end.    *Test steps:*  1. Download the attached project.  2. Open appcelerator studio and import the project.  2. Run the project on a device.    *Test code:* https://drive.google.com/file/d/14BetKOnAO_JN7Kr33sJti65Jcmdrkga3/view?usp=sharing    *Test result:* https://drive.google.com/file/d/10PFwqwx-CYTnJzfft6PmFpZG_UF1TDGp/view?usp=sharing    Note: On iOS it works as expected."
"TIMOB-27525","Bug","LiveView",3,"Commented out line with Ti.include in it causes LiveView failure","On any project, add the following line:          Make sure the line is *COMMENTED OUT* with the single line prefix *//*. Compile the app with LiveView turned on. The file load will fail. Remove the line and save, the file will load without issue.    It seems that somehow, LiveView is ignoring the fact the line is commented out and trying to process the 'include' function, causing the error.    If you surround by a multi line comment like this instead, then it works.      "
"TIMOB-27503","Bug","iOS|iPad",5,"iOS : Open an iPad Popover crash the app","From SDK > 8.2.0.GA opening a Popover crash the app. Tested on iOS 11,12,13 simulator.  With SDK 8.2.0.GA no problems.    Code from http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.iPad.Popover    "
"TIMOB-27616","Bug","Android",13,"Android: TextField with decimal keyboard type does not allow comma for decimal separator","*Summary:*  When using a {{TextField}} with ""keyboardType"" set to {{KEYBOARD_TYPE_DECIMAL_PAD}} or {{KEYBOARD_TYPE_NUMBERS_PUNCTUATION}}, the end-user is only allowed to enter a period '.' for the decimal point. It ignores the current locale and does not allow other types of decimal separators such as a comma ',' which is used Europe and South America.    *How to add languages on Android:*  # Go to Android's main Settings screen.  # Tap on ""System"".  # Tap on ""Language & Input"".  # Tap on ""Languages"".  # Tap on ""Add Language"".  # Select a European language such as ""German""/""Deutsch"".  # Drag-and-drop the language to the top of the list.    *Steps to reproduce:*  # Build and run the below code on Android.  # Select a European language. (See language instructions above.)  # Tap on the {{TextField}}.  # Attempt to enter {{1,5}} with a comma.  # Notice it won't let you use a comma ',' for the decimal separator.  # Enter {{1.5}} with a period.  # Notice that it allows a period, but this is not correct for the current locale.        *Note:*  This is actually a bug on Google's end. They have a *+partial+* fix for it as of Android 8.0 by using passing the current {{Locale}} to a {{DigitsKeyListener}} constructor.  https://developer.android.com/reference/android/text/method/DigitsKeyListener#DigitsKeyListener(java.util.Locale)    Unfortunately, Google's fix is incomplete and has the following issues:  * Fullscreen edits (when in landscape) is not fixed. Only allows period for decimal point.  * Does not support Arabic decimal separator at all.  * Android OS versions older than 8.0 can't use their fix. We need a solution for Android 4.4 too.    \\  \\  ----    *Original Post:*  In Denmark the decimal separator is comma (,)  But when setting     Titanium Shows a keyboard with a dot (.) instead...   And when parsing a value with Danish Locale 20.50 becomes 2050  On IOS the keyboard is shown with a comma (,) and everything works as expected  "
"TIMOB-27524","Bug","Android",0,"Android: imageView toBlob() method returns null.","*Issue:* imageview toBlob() method returns null but it should return as a blob object. It returns a proper value in iOS    Steps to Reproduce  1. Run the following sample code on an emulator or a device  2. Then check the console log.       {code:title=app.js}  var win = Titanium.UI.createWindow({    className : 'win'   });     var img = Ti.UI.createImageView({    image : 'http://ursinus.prestosports.com/sports/wbkb/2019-20/photos/KRR_48190-1.jpg?max_width=160&max_height=120',    top : 40,    width : 200,    height : 200   });     win.add(img);     Ti.API.info(""ImgeView:"", img.toBlob());     win.open();    {code}      {code:java}  WARN] :   TiDrawableReference: (main) [137661,138015] Could not open stream to get bitmap  [INFO] :   ImgeView: null  [INFO] :   Choreographer: Skipped 1797 frames!  The application may be doing too much work on its main thread.  [INFO] :   APSAnalyticsStore: session.end  [INFO] :   APSAnalyticsService: Successfully sent 1 stored event(s)    {code}  "
"TIMOB-27530","Bug","Android",5,"Android: UI glitches out when using 'applyProperties' with Scroll View Touch Listeners","Application UI glitches out when trying to drag a label horizontally.     *Test case:*      *Test Steps*  # Create a Titanium application  # Add the code above in to the ((app.js}}  # Run on Android  # Try to drag a label horizontally    *Actual result*  Whole application moves and UI glitches out    *Expected result*  Only label should move horizontally"
"TIMOB-27533","Bug","iOS",5,"iOS: TabbedBar backgroundColor is not working with latest SDK ","Hello!  TabbedBar backgroundColor is not working with the latest SDK  on iOS.   *Test Code*:      *Test Environment*:  I tested with 12.1 simulators both Ti SDK 8.2.0.GA, 8.2.1.GA    Please take a look at the attached screenshot.       "
"TIMOB-27573","Bug","Android",3,"Android: Hiding/Showing progress indicator back-to-back puts it in a bad state as of 8.1.1","*Summary:*  Hiding and showing a progress indicator dialog like the below prevents the dialog from being hidden ever again.      *Steps to reproduce:*  # Build and run the below code on Android.  # Tap on the button.  # Notice the progress dialog never closes. (Supposed to close in 5 seconds.)    {code:js}  var self = Ti.UI.createWindow({    backgroundColor:'#ffffff',    navBarHidden:true,    exitOnClose:true   });      var button = Ti.UI.createButton({     title: 'Show Progress Dialog'   });      var progressIndicator = Ti.UI.Android.createProgressIndicator({     message: 'Loading...',     location: Ti.UI.Android.PROGRESS_INDICATOR_DIALOG,     cancelable: true,   });      button.addEventListener('click', function (e) {     progressIndicator.show();          setTimeout(function(){       progressIndicator.hide();       progressIndicator.show();     }, 3000);          setTimeout(function(){       progressIndicator.hide();     }, 5000);   });      self.add(button);   self.open();  {code}"
"TIMOB-27574","Improvement","Android",5,"Android: Replace SDK ""build.properties"" with gradle generated ""BuildConfig"" class","*Summary:*  When building the Titanium SDK, we generate a ""build.properties"" file (similar to an {{INI}} file) providing the Titanium library's version and build time information. This file is stored under APK ""assets"" and is read on app startup via the Java method below.  [TiApplication.loadBuildProperties()|https://github.com/appcelerator/titanium_mobile/blob/5fbe78276e04049874e13bcc0a3874593f27254e/android/titanium/src/java/org/appcelerator/titanium/TiApplication.java#L300]    By default, gradle generates a {{BuildConfig}} Java class for all libraries and apps. We should use this feature instead of generating our own ""build.properties"" file. It will simplify our build process... and access to this info at runtime will be faster.  https://developer.android.com/studio/build/gradle-tips#share-custom-fields-and-resource-values-with-your-app-code    *Example:*  {code:groovy}  // The ""build.gradle"" file.  android {   defaultConfig {    buildConfigField('String', 'BUILD_VERSION', '""9.x.x""')    buildConfigField('String', 'BUILD_TIMESTAMP', '""YYYY/MM/DD HH:MM""')    buildConfigField('String', 'BUILD_GIT_HASH', '""HEAD""')   }  }    <AppName> <AppVersion> (Powered by Titanium <Version>.<GitHash>)  {code}    The above message gets logged in the code below...  [ti.main.js#L15|https://github.com/appcelerator/titanium_mobile/blob/5fbe78276e04049874e13bcc0a3874593f27254e/common/Resources/ti.main.js#L15]  "
"TIMOB-27605","Story","CLI",3,"Drop support for Node 8, Make Node.JS 10.13 new minimum","Node.JS is officially ending support for Node 8 at the end of this year (12-31-2019). In preparation we should move to the next LTS line, which is Node 10.13+.    https://nodejs.org/en/about/releases/    (Note that Node 10 will go into maintenance LTS starting in April next year, and Node 12 has just become an active LTS)"
"TIMOB-27601","Story","Windows",5,"Windows: remove analyzeJsFile hook from titanium_mobile & hyperloop code ","h5.Description    Windows uses a non standard hook in the hyperloop module which we currently patch around in the processjstask, we should try to remove that hook from hyperloop and use the standardized hook if possible"
"TIMOB-27611","Bug","Android",1,"[Windows - Android] 'Failed to read ""bootstrap.json"". Reason: Unexpected token � in JSON at position 0' can be seen intermittently ","When running a Titanium/alloy application sometimes the error below can be seen in the logs, although it seems to have no effect on the app.       *Test Steps:*  # Create a Alloy/Titanium application   # Run app to an Android emulator   # Check logs for above message     *Actual result*  Above error can be seen intermittently.    *Expected result*  Error should not be seen.        "
"TIMOB-27639","Improvement","TiAPI",13,"Documentation for events' properties","1. Current documentation validator considers ""type"" fiels for ""properties"" on ""events"" as optional.  Information about types must be always provided in documentation.    2. Validator does not allow ""property"" on ""event"" to be optional. Actually in the SDK they could be missing (for [example|https://github.com/appcelerator/titanium_mobile/blob/bf8a6bfd3ca17d3389cb6c8fc775886638226093/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUIImageView.java#L520]: ""image"" property on event ""error"" for ""Titanium.UI.ImageView"" on Android)"
"TIMOB-27620","Improvement","Windows",8,"Windows: Remove deprecated Geolocation values, only use new ones","http://docs.appcelerator.com/platform/latest/#!/api/GeocodedAddress    Specifically, it is insane that we:   - have a postalCode property on Android, but zipcode on iOS/Windows.   - latitude and longitude are Numbers on iOS/Windows, but String on Android.   - have both country_code (on all platforms), and countryCode (only on Android) (we should likely have the same property, and given our naming scheme, it should be called ""countryCode"")    {{zipcode}} and {{country_code}} were deprecated as part of TIMOB-23496 and should be removed."
"TIMOB-27619","Story","iOS",8,"iOS: Remove Ti.Network.createTCPSocket","We *still* have {{Ti.Network.createTCPSocket}} hanging around even though it has been deprecated since SDK 1.7.0!    My understanding is that it is only used in the Ti.Network.BonjourService class. That implementation should be modified to use/accept Ti.Network.Socket.TCP proxies.    Then we can mark Ti.Network.TCPSocket and Ti.Network.createTCPSocket as removed in our apidocs; and we can get rid of the TiNetworkTCPSocketProxy source files in the SDK."
"TIMOB-27618","Story","Android",5,"Android: remove Ti.UI.WebView.onStopBlacklistedUrl event","Since we now have a cross-platform event, we should remove this event which has been deprecated since 6.1.0"
"TIMOB-27627","Bug","Android",5,"Android: Prevent snapshot failure from breaking build","- Depending on build platform, some snapshots may not be generated. This can cause issues as applications may attempt to load snapshots that don't exist.  - To resolve this, we need to implement a fallback for when snapshots do not exist for particular platforms."
"TIMOB-27633","Bug","Android",8,"Android: Additional parameters in require cause app to crash","*Steps to reproduce the behavior*    # Create a new JS files that can be required, for example {{test.js}}. The content doesn't matter  # Require that JS file with an additional parameter    # Run on Android    *Actual behavior*  The app crashes during runtime with the following error:      *Expected behavior*  Additional parameter to require will be ignored.    *Additional notes*  If the file was required before without any additional parameters the require works as expected.    "
"TIMOB-27638","Bug","Windows",8,"Windows app fonts become small when titanium sdk version changed from 7.0.2.GA  to 8.2.1 GA","Hi ,     I have upgraded the titanium SDK 7.0.2.GA  to 8.2.1 GA in Windows Desktop application. After upgrade the application font becomes smaller than the previous. Also font changes happen in all pages in the application   Find below tiapp.xml details:  <property name=""ti.ui.defaultunit"" type=""string"">dp</property>  <property name=""run-on-main-thread"" type=""bool"">true</property>   <deployment-targets>          <target device=""iphone"">false</target>          <target device=""ipad"">false</target>          <target device=""android"">false</target>          <target device=""windows"">true</target>      </deployment-targets>      <sdk-version>8.2.1.GA</sdk-version>     <windows>          <manifest>              <Capabilities>                  <Capability Name=""internetClient""/>                  <Capability Name=""internetClientServer""/>                  <Capability Name=""privateNetworkClientServer""/>                  <!-- in case you need Internet connection -->                  <Capability Name=""picturesLibrary""/>                  <!-- This line is required to request access to the photo library -->                  <Capability Name=""videosLibrary""/>                  <DeviceCapability Name=""location""/>                  <DeviceCapability Name=""webcam""/>              </Capabilities>              <Applications>                  <Application>                      <VisualElements>                          <SplashScreen BackgroundColor=""#FFFFFF""/>                      </VisualElements>                  </Application>              </Applications>          </manifest>  <TargetPlatformVersion>10.0.16299.0</TargetPlatformVersion>          <TargetPlatformMinVersion>10.0.14393.0</TargetPlatformMinVersion>      </windows>    Can you please provide the reason for smaller font and how to fix "
"TIMOB-27641","Improvement","iOS",1,"iOS: Drop support for iOS 9","Analytics suggest that only < 1.5% events are from iOS 9 devices.  We should stop supporting iOS 9 and make iOS 10 as minimum target.   It will help us to clean our conditional codes. "
"TIMOB-27640","Bug","Windows",5,"Windows: unit specifier for fontSize should be ignored ","Setting {{fontSize}} with unit specifier for {{Font}} shows smaller fonts. It also could end up throwing runtime exception when display information is not provided by Windows. We might want to just ""ignore"" unit specifier in order to keep parity between iOS.        Expected: Both Labels should be shown with same font size {{48}}.  "
"TIMOB-27805","Bug","iOS",3,"Open Photo Gallery not requiring permissions","When requesting access to the user's photo gallery on iOS, the app should not allow the gallery to display if permission has not been granted.    Simple test:  index.js          The photo gallery will display and you can select a photo and get a successful result.  "
"TIMOB-27697","Improvement","Android",5,"Add ""progress"" event to Ti.UI.WebView for Android (parity)","For some reason the progress event in Ti.UI.WebView is only available for iOS, so I did an attempt to add it (disclaimer: I am not a java programmer)    Adding this function to TiWebChromeClient.java seems to fix it;        I tested it on SDK 8.3.0 and 9.0.0. Both tests successful.    EDIT: created a PR: https://github.com/appcelerator/titanium_mobile/pull/11383  "
"TIMOB-27779","Bug","Android",5,"Android: Setting ""labels"" via TabbedBar ""click"" event hangs app","*Steps to reproduce:*  # Build and run the below code on Android.  # Tap on one of the tabs.  # Notice that the app hangs.        *Cause:*  Setting the ""labels"" property causes the ""click"" event to be fired. So, setting ""labels"" within a ""click"" event listener will cause infinite recursion to occur which will eventually cause a crash.    *Work-Around:*  Defer setting the ""labels"" property via {{setTimeout()}} within the ""click"" listener.  "
"TIMOB-27650","Story","Android|iOS",5,"Remove deprecated modules from SDK distribution","h5.Description    We have a couple modules that we have deprecated due to them being replaced, these should be removed from distribution to avoid people using them going forward    * ti.safaridialog - replaced with ti.webdialog  * ti.touchid - replaced with ti.indentity"
"TIMOB-27684","Bug","Android",3,"Android: Cold-start launch animation may occur twice","- Launching a Titanium application may show a duplicate window launch animation"
"TIMOB-27686","Improvement","Android",5,"Android: Auto-download build system dependencies via gradle","*Summary:*  Gradle supports automatically downloading build system related dependencies such as Google's ""build-tools"" and targeted API Level libraries. We should leverage this feature so that app developer's won't have to download/install them manually via Google's ""Android SDK Manager"" dialog. This will make building Android apps more convenient and minimize tech-support issues.    *Recommended Solution:*  Once gradle build support has been added via [TIMOB-19300] in Titanium 9.0.0, we get this feature for free when we start the ""gradlew"" app build.    But in order for this to happen, we need to ignore some of the error results returned by our [node-titanium-sdk|https://github.com/appcelerator/node-titanium-sdk] module's Android detect API [here|https://github.com/appcelerator/node-titanium-sdk/blob/master/lib/android.js] in our Titanium SDK's [_build.js|https://github.com/appcelerator/titanium_mobile/blob/master/android/cli/commands/_build.js] script's {{validate()}} function.    The error string IDs we need to ignore are:  * {{'ANDROID_BUILD_TOOLS_TOO_NEW'}}  * {{'ANDROID_BUILD_TOOLS_NOT_SUPPORTED'}}  * {{'ANDROID_BUILD_TOOLS_CONFIG_SETTING_NOT_INSTALLED'}}  * {{'ANDROID_API_TOO_OLD'}}  * {{'ANDROID_API_TOO_NEW'}}  * {{'ANDROID_NO_APIS'}}  * {{'ANDROID_NO_VALID_APIS'}}  * {{'ANDROID_SDK_MISSING_PROGRAMS'}}    *Note 1:*  We still need our Android SDK/NDK detection code, because there is no way to run the Android gradlew tool without first setting up a ""local.properties"" file that reference the SDK/NDK directories.    *Note 2:*  Our Titanium CLI still needs to keep its existing Android tooling detection code since the CLI needs to support Titanium SDK versions older than 9.0.0.  "
"TIMOB-27685","Improvement","Android|Hyperloop",13,"Android: Update hyperloop module to support gradle dependencies","*Summary:*  In Titanium 9.0.0, we will be changing the Android app build system from ""ant"" to ""gradle"". This will be a breaking-change that will require the hyperloop module to change how it hooks into the build. But this is also a good opportunity to support gradle's ""dependencies"" feature which allows the hyperloop user to reference dependencies via their maven {{<groupId>:<libraryName>:<version>}} references.    *Recommended Solution:*  Add support for an optional ""build.gradle"" file to the following Titanium app project directory...  {{./platform/android/build.gradle}}    The file can then reference dependences like this...  {code:groovy}  repositories {   google()   jcenter()  }    dependencies {   implementation 'com.google.android.gms:play-services-ads:18.3.0'  }  {code}    *Note:*  This feature depend on [TIMOB-19300] to be completed first.  "
"TIMOB-27688","Improvement","iOS",13,"TiAPI: Clean up apidocs to use common types","Our APIdocs frequently re-use similar arguments to methods but are not consistent in referring to those object shapes as defined types. Additionally, there may be duplicated types, types that haven't been defined but should be, or types that are defined but methods/properties don't refer to them and instead use generic Object/Dictionary type.    This is relevant to have properly define docs, but also in that we have started to ship typescript definitions generated from he docs and can rely on these more formal definitions in editors/IDE for more reliable content assist."
"TIMOB-27687","Improvement","Android",8,"Android: Update V8 runtime to 7.9","- Upgrade V8 to the latest stable version {{7.9.317.32}}    - Maintain backwards compatibility"
"TIMOB-27691","Bug","iOS",2,"iOS: App is crashing after recording the video on device","Hello,    Customer have an issue very strange. This app is for ios, He is working with TiSDK 8.3.0. Please have a look at the video. The error has not logs files on Studio console but it is crashing on physical device. The first error is related to crash app after recording video. The other error is related to go to background navigate between apps and return to my app. The same situation the app is crashing.     Example code: Available on [Here| https://github.com/jorgehip/hipCameraCrash/tree/02-MoveCameraToAlloy]    I have tested on following environment and able to reproduce the issue:  SDK: 8.3.0.GA, 8.1.0.GA  Appcelerator Command-Line Interface, version 7.1.2  Device: iPhone 6 plus (12.4.3)  Customer is getting this issue on iPhone X (iOS 13.x)    1. I cannot reproduce the second issue (background crash issue).  2. I can reproduce the first issue but not every time. It occurs after capturing video 3/4 times.    Please let us know if you need any more information. Thanks"
"TIMOB-27694","Bug","Android",3,"Android: Textfield.focus() method is not working in Ti SDK 8.3.0.GA ","*Issue:* Textfield.focus() method is not working properly on android after updating to 8.3.0. It is getting focused but no keyboard is shown. The keyboard is only showing on the click of the TextField but if I call TextField.focus() then textfield is getting focused without a keyboard.    *Steps To Reproduce:*  1. Create a classic project  2. Paste this code in app.js file  3. Run it on android device or emulator  4. Click on the ""Focus Test"" Button    *Note: Works as expected with Ti SDK 8.2.0.GA*    {code:title=app.js}  var win = Ti.UI.createWindow({   title : ""Focus Test"",   backgroundColor : 'red',   layout : ""vertical""    });    // Create a TextField.  var aTextField = Ti.UI.createTextField({   height : 40,   top : 30,   left : 20,   right : 20,   backgroundColor : ""gray"",   hintText : 'This is hint text',   softKeyboardOnFocus : Ti.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS, // Android only   keyboardType : Ti.UI.KEYBOARD_DEFAULT,   returnKeyType : Ti.UI.RETURNKEY_DEFAULT,   borderStyle : Ti.UI.INPUT_BORDERSTYLE_ROUNDED  });    // Listen for return events.  aTextField.addEventListener('return', function(e) {   aTextField.blur();   alert('Input was: ' + aTextField.value);  });    // Add to the parent view.  win.add(aTextField);    // Create a Button.  var test = Ti.UI.createButton({   title : 'Focus Test',   height : Ti.UI.SIZE,   width : Ti.UI.SIZE,   top : 50,    });    // Listen for click events.  test.addEventListener('click', function() {     aTextField.focus();   //alert('\'aButton\' was clicked!');  });    // Add to the parent view.  win.add(test);    win.open();    {code}    "
"TIMOB-27696","New Feature","Android",5,"Android: Add ""gradle.properties"" support to app builds","*Summary:*  Titanium app developers would like the ability to set up their own ""gradle.properties"" file according to Google's documentation. We should add support for this and allow this file to override the properties defined by Titanium's build system.  https://developer.android.com/studio/build#properties-files    *Recommended Solution:*  Copy the properties from the following project file...      These properties should be copied to the end of the Titanium generated ""gradle.properties"" file so that the app dev's properties can override the ones we set."
"TIMOB-27720","Bug","Android",3,"Android: Error building SDK if python 3 is installed","Using Fedora 31 (Linux) to compile the latest (2019-12-28) git SDK code you will run into problems            since it is using ""python"" to run genBootstrap.py. But in Fedora it will use python 3 since that is mapped as a default python. Changing   https://github.com/appcelerator/titanium_mobile/blob/f687e3bbf8266707e6e5fdfdba6580e141a2221b/android/titanium/prebuild.js#L111  and  https://github.com/appcelerator/titanium_mobile/blob/f687e3bbf8266707e6e5fdfdba6580e141a2221b/android/titanium/prebuild.js#L141   to python2 fixed the issue.     A better solution to either port it to python3 or check for the correct python version at the beginning would be better. Python 2 won't be supported after April 2020 (last version was released 19th October)    *Recommended Solution:*  Use ""python2"" command line tool if available on system before using ""python"" command.    *Best Solution:*  Remove python dependency via ticket: [TIMOB-27719]  We'll need to do this in the near future since Apple will no longer pre-install python on future macOS versions.  "
"TIMOB-27709","Story","Tooling",8,"Remove windows platform from SDK build/bundling","Since we no longer will be supporting Windows universal as app targets, we should remove the download/inclusion of windows in the SDK builds."
"TIMOB-27706","Bug","Android",5,"Android: Native modules having uppercase ""name"" are excluded from build on case-sensitive systems","*Summary:*  Native Android modules such as ""ti.facebook"" will not have their main JAR included in the app if built from a case-sensitive file system. The app will succeed to build, but attempting to use the module's APIs will fail.    For ""ti.facebook"", the following warning will be logged when doing a build.      _(This is more of an issue on Linux where the file system is case-sensitive by default.)_    *How to create case-sensitive disk image on macOS:*  # Open the ""Disk Utility"" app.  # From the menu, click: {{File -> New Image -> Blank Image}}  # Click on the ""Image Format"" drop-down and select ""sparse bundle disk image"".  # In ""Save As"" field, enter: {{CaseSensitive.sparsebundle}}  # In ""Where"" field, select destination to write this image file to.  # In ""Name"" field, enter:  {{CaseSensitive}}  # In ""Size"" field, enter:  {{1 GB}}  # Click ""Format"" drop-down and select ""Mac OS Extended (Case-sensitive)"".  # Click the ""Save"" button.    You can mount the above image by double clicking the ""CaseSensitive.sparsebundle"" file. You can find the ""CaseSensitive"" volume in ""Finder"" under the ""Locations"" section.    *Steps to reproduce:*  # Download [kitchensink-v2|https://github.com/appcelerator/kitchensink-v2] to the case sensitive volume.  # Download the newest release version of the [ti.facebook|https://github.com/appcelerator-modules/ti.facebook] module.  # Unzip module to folder: {{kitchensink-v2/modules/ti.facebook/...}}  # Open the ""tiapp.xml"" file.  # Build and run on Android.  # Notice the following gets logged:    # Tap on the app's ""Mashups"" tab.  # Tap on the Facebook row.  # Notice the app crashes.    *Reason:*  Titanium's build script is doing a {{toLowerCase()}} on the JAR file name [here|https://github.com/appcelerator/titanium_mobile/blob/243afd00e0760f2060e797312942ee65d47b9f5f/android/cli/commands/_build.js#L1575].    *Note:*  This issue causes a build failure in Titanium 9.0.0 since moving to gradle.  "
"TIMOB-27705","Bug","Android",3,"Android: Can't set versionCode via AndroidManifest.xml as of 9.0.0","*Summary:*  As of Titanium 9.0.0, setting the ""versionCode"" via the ""AndroidManifest.xml"" file no longer works.    _(This regression was caught before release.)_    *Steps to reproduce:*  # Create a Titanium app project.  # Set up the ""tiapp.xml"" file with the below.  # Build for Android.  # Go to folder: {{./build/android/app/build/intermediates/merged_manifests/debug}}  # Open the ""AndroidManfiest.xml"" file.  # Notice {{android:versionCode}} attribute is set to {{""1""}}. _(This is the bug.)_        *Reason:*  When building with gradle, the ""versionCode"" and ""versionName"" attributes are ignored in the ""AndroidManifest.xml"" file. These settings can only be set via a ""build.gradle"" file. This is by Google's design.    *Recommended Solution:*  Titanium's build script should read the ""versionCode"" from the app developer's ""AndroidManifest.xml"" write it to the Titanium generated ""build.gradle"" file. This way it will be backward compatible.    *Work-Around:*  Set the ""versionCode"" via your own ""build.gradle"" file as shown below.    {{./platform/android/build.gradle}}  {code:groovy}  android {   defaultConfig {    versionCode 5   }  }  {code}  "
"TIMOB-27711","Story","TiAPI",13,"TiAPI: Add state querying methods to UI components","This is a glaring issue when we look at our test suite and see the common {{before}} hooks we've written to clean up open windows/etc.    We have no means of telling if a Window is closed or open. So instead we fire off a 3-second {{setTimeout}} fallback to handle the ""isClosed"" case, and then hang an event listener for the close event and try to close the window. So in the case where the test never opened the window (or already closed it), we basically do nothing for 3 seconds and assume since the {{close}} event never fired that it must have been closed.    We have {{Ti.UI.View.visible}} which should tell us if a view is hidden or visible.    Proposed APIs:  {{Ti.UI.Window.closed}} - {{boolean}}, {{true}} or {{false}}   * tells us if the window is closed (do we need {{opened}} equivalent? I assume they'd just be inversions of one another)  * Potential alternates? {{isClosed}}, {{closed}}, {{opened}}, {{isOpened}} (properties versus methods?)      * Note that JavaFX uses {{showing}} as a roughly equivalent API here: https://openjfx.io/javadoc/13/javafx.graphics/javafx/stage/Window.html      * Android equivalent may be {{isActive}}? https://developer.android.com/reference/android/view/Window.html#isActive()    {{Ti.UI.View.focused}} - {{boolean}}, {{true}} or {{false}}  * Potential alternates? {{isFocused}}, {{hasFocus}} (properties versus methods?)      * https://developer.android.com/reference/android/view/View#hasFocus()"
"TIMOB-27717","Bug","iOS",1,"iOS: 'click' event in Ti.UI.TextField is not working for iOS >= 11.x ","In iOS 10.x 'click' event is working fine for TI.UI.TextField but for iOS >= 11.x it is not working.  On some experiment I found that in iOS >= 11.x there are restriction on touch event callbacks.    Probably document need to be updated.    Workaround to this issue is -  Use 'touchstart' event or set 'enabled' property to false.    Test Case -       "
"TIMOB-27715","Story","Hyperloop|Windows",5,"Remove windows platform from hyperloop","h5.Description    With Windows platform being removed from the SDK in 9, we should also remove it from the hyperloop distribution"
"TIMOB-27718","Improvement","Android",5,"Android: Log build warnings if ""res"" files have invalid names","*Preface:*  An Android APK's ""res"" files (such as drawables) have the following restictions:  * File names can only have lower-case letters, numbers, or underscores.  * File names cannot start with a number.  * Cannot be placed in subdirectories.    The above limitations are by Google's design, because the Android build system turns ""res"" file names into Java constants under the generated {{R}} class. Violating the above will result in a build failure.    However, Titanium allows app developers to violate the above rules and will lower-case the file name and replace illegal characters and directory separators with {{'_'}} underscores.    *App Changes for Titanium 9.0.0:*  For app builds, we want to maintain backward compatibility. This means allowing app developer to continue to violate Google's ""res"" file naming rules, but we should log a build +WARNING+ for every ""res"" file in violation to compel app developer's to follow Google's best-practices. This will also help minimize confusion when attempting to access a ""res"" file via native Java APIs using the illegal name, which won't work.    *Module Changes for Titanium 9.0.0:*  Native modules built with Titanium 9.0.0 and higher will no longer be allowed to violate Google's ""res"" file naming rules. This is because we're now building a native module to an AAR library which packages the module's ""res"" files. So, illegal ""res"" file names will cause a build failure just like how it works in Android Studio.    *Test:*  The attached [^Resources.zip] contains a directory tree of image files which violate Google's ""res"" naming conventions.  "
"TIMOB-27719","Story","Android",8,"Android: Remove python dependency from SDK build","*Summary:*  When building the Titanium SDK, the Android side currently uses python scripts to do some code generation. We should replace python scripts with node.js scripts so that we can get rid of our python dependency, thus simplifying the SDK build.    Apple will not pre-install ""python"" on the next version of macOS in the year 2020  https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_release_notes    *Note:*  Titanium's app and module builds do not require python. This is only an issue with SDK builds.    *Recommended Changes:*  In Titanium 9.0.0, we only run 2 python scripts via our ""prebuild.js"" script. These are the scripts we need to replace.  [titanium_mobile/android/titanium/prebuild.js|https://github.com/appcelerator/titanium_mobile/blob/70c16f7ca213f39791330758489be4f951dfa1ab/android/titanium/prebuild.js]    Once the above is done, we should be able to delete all python scripts from the following folder...  [titanium_mobile/android/runtime/v8/tools|https://github.com/appcelerator/titanium_mobile/tree/70c16f7ca213f39791330758489be4f951dfa1ab/android/runtime/v8/tools]  "
"TIMOB-27723","Bug","Android",3,"Android: Build fails and emulator does not launch","- Titanium application build fails when attempting to launch emulator using latest nodejs:      For the build to complete, the emulator must be started manually."
"TIMOB-27731","Bug","Android",8,"Android: Camera fails to open when using saveToPhotoGallery: true","h5.Description     When using the following code, the camera fails to open and I get the following error log. This looks to be a regression from 8.2.0.GA            h5.Steps to reproduce    1. Add the code above to an existing app.js  2. Build to Android    h5.Actual    Above error log    h5.Expected    Camera should open"
"TIMOB-27730","Improvement","Android",5,"Android: Build ""ti.webdialog"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/titanium-web-dialog  "
"TIMOB-27729","Improvement","Android",5,"Android: Build ""ti.playservices"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/ti.playservices  "
"TIMOB-27728","Improvement","Android",5,"Android: Build ""cloudpush"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/cloudpush  "
"TIMOB-27727","Improvement","Android",5,"Android: Build ""appcelerator.encrypteddatabase"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/appcelerator.encrypteddatabase  "
"TIMOB-27726","Improvement","Android",5,"Android: Build ""ti.identity"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/titanium-identity  "
"TIMOB-27725","Improvement","Android",5,"Android: Build ""ti.facebook"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/ti.facebook  "
"TIMOB-27724","Improvement","Android",5,"Android: Build ""ti.map"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator-modules/ti.map  "
"TIMOB-27737","Improvement","Android",5,"Android: Build ""analytics"" module with gradle","Module needs to be rebuilt for Titanium 9.0.0 to support the following:  * Built as an Android ""AAR"" library.  * Provide a ""POM"" file defining its dependencies. (Resolves library version conflicts.)  * Support AndroidX libraries.  * Add x86_64 architecture support.    Repository:  https://github.com/appcelerator/aps_sdk  "
"TIMOB-27739","Bug","Android",5,"Android: Location permissions not auto-added when using Ti.Geolocation API as of 9.0.0","_This issue was caught before release._    *Summary:*  When doing a ""device"" or ""production"" build, Titanium's build system is supposed to auto-add the below permissions to the ""AndroidManifest.xml"" when the app uses the {{Ti.Geolocation}} APIs.  * {{android.permission.ACCESS_COARSE_LOCATION}}  * {{android.permission.ACCESS_FINE_LOCATION}}    This has stopped working as of Titanium 9.0.0 (before release).    *Steps to reproduce:*  # Set up a Classic app with the below code.  # Build and run on an Android device. (Not an emulator.)  # Notice app reports error:  {{Failed to acquire location permission}}    app.js      "
"TIMOB-27742","Bug","Android",3,"Android: Minor camera focus issues","- Camera should not crash with {{E/TiExceptionHandler: (main) [55,37938] autoFocus failed}}  - Camera should continue to auto focus after taking a picture    *TEST CASE*  {code:js}  const overlay = Ti.UI.createView({});  const takePicture = Ti.UI.createButton({ title: 'Take Picture' });    takePicture.addEventListener('click', _ => {      Ti.Media.takePicture();  });  overlay.add(takePicture);    Ti.Media.requestCameraPermissions(e => {      if (e.success) {          Ti.Media.showCamera({              success: e => {                  if (e.success) {                      console.log('Taken picture successfully!');                  } else {                      console.error(JSON.stringify(e, null, 2));                  }              },              saveToPhotoGallery: true,              autohide: false,              overlay: overlay,              mediaTypes: [ Ti.Media.MEDIA_TYPE_PHOTO ]          });      }  });  {code}"
"TIMOB-27741","Improvement","Android",5,"Android: Allow requestPermissions to succeed if already granted","Allow {{requestPermissions}} to succeed when when permissions have already been granted. This prevents the need for calling {{hasPermissions}} and simplified code.    *EXAMPLE*  {code:js}  const overlay = Ti.UI.createView({});  const takePicture = Ti.UI.createButton({ title: 'Take Picture' });    takePicture.addEventListener('click', _ => {      Ti.Media.takePicture();  });  overlay.add(takePicture);    // Should not need to call 'hasCameraPermissions', 'requestCameraPermissions' should succeed.  Ti.Media.requestCameraPermissions(e => {      if (e.success) {          Ti.Media.showCamera({              success: e => {                  if (e.success) {                      console.log('Taken picture successfully!');                  } else {                      console.error(JSON.stringify(e, null, 2));                  }              },              saveToPhotoGallery: true,              autohide: false,              overlay: overlay,              mediaTypes: [ Ti.Media.MEDIA_TYPE_PHOTO ]          });      }  });  {code}"
"TIMOB-27740","Improvement","Android|iOS",5,"TiAPI: Extend removal of deprecated get/set property methods from 9.0.0 to 10.0.0","When your JS code invokes a get/set property method, such as {{Label.getText()}} and {{Label.setText()}} instead of accessing the {{Label.text}} property, the following warning will be logged.      We don't want to remove these method in Titanium 9.0.0.  We should extend the removal of these deprecated APIs from Titanium 9.0.0 to 10.0.0.  "
"TIMOB-27748","Bug","Windows",5,"Windows app issues with 8.3.1.GA ","Hi,   I have upgraded the titanium SDK 7.2.0.GA to 8.3.1.GA, but after upgrading Windows app having the following issues:   1) Small Fonts Size    2) Splash Screen    3) Random Crashes    1) Small Font Size issues got resolved in 8.3.1.GA but got another issue with UI alignment.  All UI alignment is changed and it's not proper  2) Got workaround   3) Not able to fixed    The third point is resolved in 9.0.0.v20181031080737. And as per the earlier discussion the 9.0.0.GA is going to release in the end of Jan 2020.    Please provide the estimated date of release 9.0.0.GA.    Find the attachment for earlier communication of release date of titanium SDK            "
"TIMOB-27745","Improvement","Android",5,"Android: Add ""google-services.json"" support for Firebase","*Summary:*  Google documents that you should configure your app for Firebase via a ""google-services.json"" file. Titanium does not currently support this JSON file and requires app developers to call Google's Java APIs to configure the app for Firebase instead.    Add JSON file support will make this much simpler and would follow their docs.    *Note:*  Google documents how to set this up here...  https://firebase.google.com/docs/android/setup    *Recommended Solution:*  The file should be added to the following Titanium project folder...      If the file is found, we need to copy it to the following build folder location...      We'll need to add the following to the [root.build.gradle|https://github.com/appcelerator/titanium_mobile/blob/master/android/templates/build/root.build.gradle] file.  {code:groovy}  buildscript {   dependencies {    classpath 'com.google.gms:google-services:4.3.3'   }  }    "
"TIMOB-27750","Bug","Android|CLI",8,"Android: CLI fails to recognize avd emulator is booted when it starts it","We're seeing native modules builds (like this one for ti.map: https://jenkins.appcelerator.org/blue/organizations/jenkins/modules%2Fti.map/detail/PR-285/9/pipeline/) failing to run our test suite because once it generates a project and launches, it never seems to think the emulator is fully booted. I can reproduce locally. If I pre-boot an emulator and launch, it recognizes the emulator has booted and works. If I don't have one up and running, it fails to recognize when the emulator has booted."
"TIMOB-27752","Improvement","Android",3,"Android: Exclude x86 and x86_64 architectures in ""production"" builds by default","*Summary:*  When doing a ""production"" build, the {{x86}} and {{x86_64}} architectures should be excluded from the built Android app by default. That is, only ARM architectures should be included.    *Note 1:*  We have been excluding {{x86}} from ""production"" builds since Titanium 7.0.0. We want to maintain this behavior in Titanium 9.0.0's gradle builds and exclude {{x86_64}} as well. These architectures are mostly needed for testing purposes in the Android emulator. Removing these architectures can reduce the APK size by a significant amount. Also, physical Android device that support {{x86}} are extremely rare.    *Note 2:*  Modules built with Titanium 8.x.x and older do not support the {{x86_64}} architecture. Only modules built with Titanium 9.0.0 and higher support {{x86_64}}. When you include a module that does *+NOT+* support {{x86_64}} into a Titanium 9.0.0 or newer app, then the build system will strip out all {{x86_64}} architectures from the app. It's all or nothing, otherwise a crash will occur on an {{x84_64}} device/emulator. This means if you want your app to support {{x86_64}}, then all modules must be built with Titanium 9.0.0 or higher.    *How to Override:*  You can override this behavior and specify which architectures you want to include in the build by adding the following {{<abi/>}} entry in the ""tiapp.xml"" file.    "
"TIMOB-27754","Bug","iOS",3,"SearchBar text color and hinTextColor does not work properly.","We have tested this issue using the attached sample code with ti SDK 8.3.1.GA iPhone 11 Pro Max(ios 13.3) simulator. I assigned a red color to the color attribute and also a red color for hintTextColor. Neither the hintTextColor nor color changes the color of the text.    *Code:*  *index.js*    *index.xml*      *Test steps*:  1. Open Studio and create a new alloy project.  2. Copy index.xml and index.js code and paste your project.  3. Run the project on iPhone or simulator.  4. Then observe the search bar.    *Test Output*: Please check the attachment section.    Thanks."
"TIMOB-27756","Bug","iOS",3,"watchOS: Including watchOS framework causing build error","When including a watchOS framework to our watchOS target, the build fails because the CLI tries to parse a compiled (binary) plist which shouldn't be checked. The easy but powerful fix is to not check plist files inside frameworks but still copy them."
"TIMOB-27758","Improvement","Android",5,"Android: Modules with AARs in ""lib"" directory should trigger a build failure in 9.0.0","*Summary:*  The Android gradle build system allows a library project to reference a local AAR for compilation, but it won't merge the local AAR's classes, ""AndroidManifest.xml"", assets, or ""res"" files into the library project's built AAR. This is intentional on Google's end. The build system will only merge all of the AAR files' content into an app project.    Because of the above, a native module referencing local AAR files will crash at runtime when built with Titanium 9.0.0 and gradle. It will compile fine, but the classes in the AARs will not be included in the module; nor the app.    *Solution:*  When building a native Android module with Titanium, the CLI should trigger a build failure if the module's ""lib"" directory contains any AAR files and should tell the developer to reference AAR libraries via the ""build.gradle"" file instead.    *Note:*  This is a breaking-change. But by doing this, we force module developers to reference dependencies the gradle/maven way, which will solve library version conflict issues between modules.  "
"TIMOB-27768","Bug","iOS",1,"iOS: TypeError: Cannot read property 'logger' of undefined","h5.Description    Building a project with extensions, where one of the extensions does not contain a build phase will error with the below, easy fix to just convert to an arrow function      h5.Steps to reproduce    1. Build Hans' app    h5.Actual    Above error    h5.Expected    No error"
"TIMOB-27769","Bug","Android",8,"Android: Textfield inputs not setting in focused textfield and Keyboard not showing (sometimes) on a textfields which is focused","In Tableview when they clicks on any text fields are not pop-up up keyboards but it is focusing (showing cursor) on the textfields.    In their case, the issue is sometimes the keyboard is not opening for the text fields 'Middle name' and 'Last Name' and also once they enter value in 'Middle Name' fields clicks on next button should go to 'Last name' field. But the issue is, It's focusing on 'Last name' field but the text typing in the 'Middle name' field.    Sometimes when they click on text field it is focusing, but it's not opening keyboard    They have tested it with Ti-SDK 8.3.1.GA and above.    *Sample project:* https://drive.google.com/open?id=1HaUmYK-KjbPerkw72feUtmlgwAFEjwbI  *Recorded Video:* https://drive.google.com/open?id=1X1MYW_NtYafzLCovchGjKWUarrB4J-gW"
"TIMOB-27774","Bug","Android",3,"Android: Ti.Blob.imageAsResized() not working for JPEG with exif rotation as of 8.1.0","There were some changes in the imageAsResized function in https://jira.appcelerator.org/browse/TIMOB-26456    It looks they broke some stuff! Taking a camera image and resizing it to random values leads to strange results:            It looks like it is keeping the aspect ration even if I don't want it to.            Note: Allow camera permissions!    *Tested versions:*  SDK 8.3.0.GA, 8.3.1.GA, 9.0.0.RC    *Device*  Pixel 4, Android 10"
"TIMOB-27771","Bug","Android|Hyperloop",1,"Android: Hyperloop builds fail if NDK not installed as of 9.0.0","_(This issue was caught before 9.0.0.GA.)_    h5.Description    When building a hyperloop application without an NDK installed the build errors with the below, we just need to do a defensive check when we're looking up the ndk path        h5.Steps to reproduce    1. Move your NDK away from the usual location (~/Library/Android/sdk/ndk/) so the CLI doesn't autodetect and remove it from the config with {{appc ti config --remove android.ndkPath  2. Build the hyperloop-examples app    h5.Actual    Above error    h5.Expected    No error"
"TIMOB-27770","Improvement","Android",3,"Android: Module build should add empty ""build.gradle"" if missing","*Summary:*  When building an existing module for 9.0.0, the build system's migration code should add an empty ""build.gradle"" file to the project folder if missing.    *Reasons:*  # This will help compel developers to use this file to reference libraries instead of using the ""lib"" directory.  # Appcelerator Studio needs a ""clue"" in the directory that indicates it is an Android project or else it won't be able to build/package it. This will resolve [TISTUD-9204].    *Note:*  Titanium 9.0.0's module template has already been updated to provide an empty ""build.gradle"" file. The migration code should use this same file.  "
"TIMOB-27777","Bug","Android",5,"Android: Obtain holder for module references","- It is not possible to indirectly reference a module method or property.    *TEST CASE*  {code:js}  const permissions = Ti.Filesystem.requestStoragePermissions;    // Attempt to call 'requestStoragePermissions'.  permissions(e => {      if (e.success) {          console.log('Storage permissions granted.');          return;      }      console.warn('Storage permissions denied.');  });  Couldn't obtain argument holder{code}"
"TIMOB-27776","Bug","Android",8,"Android: NDK version 21 outputs ""Bad file descriptor""","- Latest NDK {{21.0.6113669}} outputs:      Although builds do complete successfully, the log seems to increase build times significantly."
"TIMOB-27778","Improvement","Android",3,"Android: Update gradle build tools to 3.6.x","*Summary:*  As of Titanium 9.0.0, we're using Android gradle build tool 3.4.2 to build the SDK, apps, and modules.      We should update the tools to version 3.6.x.  https://developer.android.com/studio/releases/gradle-plugin#3-6-0    The newest build tools are supposed to improve APK build times.  https://developer.android.com/studio/releases/gradle-plugin#zipflinger    *Note:*  We should also update our gradle template to 6.0.x which has full support for JDK 13.  https://developer.android.com/studio/releases/gradle-plugin#updating-gradle  https://docs.gradle.org/6.0/release-notes.html    *To-Do:*  We must update the version in the following files...  https://github.com/appcelerator/titanium_mobile/blob/master/android/build.gradle  https://github.com/appcelerator/titanium_mobile/blob/master/android/templates/build/root.build.gradle    Upgrading will cause the SDK and module builds to fail. The reason is because Google's build tool will now compile C/C++ before Java, which is an issue since our {{kroll-apt}} Java annotation processor generates C++ source files. We can solve this by adding the below to the library project's ""build.gradle"" file.  {code:groovy}  project.afterEvaluate {   externalNativeBuildDebug.dependsOn compileDebugJavaWithJavac   externalNativeBuildRelease.dependsOn compileReleaseJavaWithJavac  }  {code}  https://github.com/appcelerator/titanium_mobile/blob/master/android/titanium/build.gradle  https://github.com/appcelerator/titanium_mobile/blob/master/android/templates/module/generated/build.gradle    We will also need to update our gradlew and gradle library folder to the newest version.  https://github.com/appcelerator/titanium_mobile/tree/master/android"
"TIMOB-27781","Bug","Android",5,"Android: App/Module builds fail with JDK 13 as of 9.0.0","*Summary:*  When building an app or module with Titanium 9.0.0, the build will fail if JDK 13 is installed.    Titanium 8.3.x builds fine with JDK 13... except for Hyperloop builds: [TIMOB-27780]    *Steps to reproduce:*  # Install JDK 13.  # Create a Titanium app project.  # Build with Titanium 9.0.0 for Android.    *Result:*      *Cause:*  As of Titanium 9.0.0, we now build with gradle. We're currently using gradle v5.4.1 which does not support JDK 13. We'll need to upgrade to gradle v6.0.x (released January 2020) which supports JDK 13.  https://docs.gradle.org/6.0/release-notes.html#java-13    *Note:*  You can have multiple JDK installations on Mac. You can list the JDK versions installed by entering the following at the command line.      You can select which installed JDK version to use by entering the following at the command line. You'll need to set the {{<JavaVersion>}} to what's installed, which the above command line will list. The below can be set in your {{.bash_profile}} file.      *Work-Around:*  Downgrade to JDK 12 or lower.  (JDK 8 is the min version needed.)"
"TIMOB-27780","Bug","Android|Hyperloop",3,"Android: Hyperloop builds fail if JDK 12 or higher is installed","*Summary:*  If you have JDK 12 or higher installed on your machine, then Titanium apps using the Hyperloop module will fail to build.    *Steps to reproduce:*  # Install JDK 12 or higher on your machine.  # Build [hyperloop-example|https://github.com/appcelerator/hyperloop-examples] for Android.  # Notice the build *fails* with the following error message.        *Cause:*  As of JDK 12, Oracle has dropped support for the Java 6 language.  https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8028563    Hyperloop currently hardcodes its usage of the {{javac}} command line tool during the build to Java 1.6, which is why it fails when using the newest JDK.  [android/hooks/metabase/metabase.js#L41|https://github.com/appcelerator/hyperloop.next/blob/24feb99f719da5e3df279452526638d46fa0043a/android/hooks/metabase/metabase.js#L41]    *Solution:*  Update {{javac}} usage to use Java 1.8 instead.    *Note:*  For JDK 13 support, we'll likely need to update Titanium's gradle template to 6.x.x as well, which means updating our Android build tools to 3.6.x via [TIMOB-27778].  "
"TIMOB-27782","Bug","CLI",3,"Ignoring a file in babel config causes an error during compile","If a file is ignored through a babel config file, an error will occur because it is trying to access properties of a transformation that didn't occur.    Sample app to recreate issue: https://github.com/brentonhouse/timob-27782    Simply run ""ti build -p ios --build-only"" to see compiler error."
"TIMOB-27784","Bug","Android",1,"Android: Running ""clean"" on a module will error if ""libs"" folder does not exist","*Summary:*  When developing a module, running the {{appc ti clean}} command on a module directory that is missing a ""libs"" folder will throw an error.    This is a minor issue that you can safely ignore. The clean command will successfully delete the ""build"" and ""dist"" folders first if they exist, which is what's most important.    *Steps to reproduce:*  # Download a zip of the [ti.imagefactory|https://github.com/appcelerator-modules/ti.imagefactory] repo source.  # Unzip the above.  # Open the Terminal.  # {{CD}} to folder: {{./ti.imagefactory/android}}  # Enter: {{appc ti clean}}  # Notice it errors with below message.  # Enter: {{appc run -p android --build-only}}  # Wait for the build to finish.  # Enter: {{appc ti clean}}  # Notice it errors with below message.    *Result:*      *Reason:*  We're missing a ""libs"" directory existence check below.  [titanium_mobile/android/cli/commands/_cleanModule.js|https://github.com/appcelerator/titanium_mobile/blob/73c73b6d352ada5918ec30e008c95bf12d7ed633/android/cli/commands/_cleanModule.js#L38]  "
"TIMOB-27785","Bug","Core",3,"Buffer: Proxy object's 'set' trap returned falsy value for property '0'","*Steps to reproduce the behavior*    {code:js}  (function () {   'use strict';   const b = Buffer.alloc(1);   b[0] = 0;  })();  {code}    *Expected behavior*  The value will be set.    *Actual behavior*  Setting the value fails with the following error message: {{Proxy object's 'set' trap returned falsy value for property '0'}}"
"TIMOB-27788","Bug","Android",1," Android: Unable to view UI.Switch when it is turned off.","h6.Reproduce  1. Create a sample classic app.  2. Replace app.js content with the attached app.js content.  3. Run the app on an Android device.    h6.Problem  Observed an issue that we are not able to view switch properly if it is turned off in Android devices. Please find the attached screenshot for reference."
"TIMOB-27792","Improvement","iOS",5,"iOS: Remove python dependency from SDK build","h5.Description    When building the iOS portion of the SDK, we use [a python script|https://github.com/appcelerator/titanium_mobile/blob/cc1b0554a72c271ed2050b3e7ee4ce27627804e3/support/dev/localecompiler.py] to do some handling of i18n files. We should rewrite this in the same timeframe as the Android changes (TIMOB-27719) to allow us to remove the python dependency at the same time"
"TIMOB-27794","Improvement","Android",5,"Android: Improve kroll-apt incremental build times with SDK","*Summary:*  The Titanium SDK incremental build times should be improved. Every time we make a Java code change in the Titanium SDK library, our ""kroll-apt"" Java annotation processor always re-generates C++ files for all Java proxies in our library, even if the proxy classes haven't changed.    *Note:*  On my machine, the build system recognizes that the re-generated C++ files haven't changed since the last build and does an incremental C++ build. On [~gmathews]' machine, the C++ incremental build does not work at all and recompiles all C++ files.    Incremental build times after making a Java code changes takes {{20s}} for me and {{~1}} minute for Gary.    *To-Do:*  When our ""kroll-apt"" Java annotation processor reads all {{@Kroll}} annotations, it should read the last written JSON bindings file to see if the bindings have changed since the last build. If not, do not re-generate the proxy C++ files... unless the files are missing.  "
"TIMOB-27846","Bug","iOS",5,"iOS: Calling Ti.Platform.openURL without all parameters causes the app to crash (regression)","When I use Ti.Platform.openURL, and the app goes to background, the app crashes with this error:    [ERROR] Script Error {  [ERROR]     toJSON = ""<KrollCallback: 0x600001e12380>"";  [ERROR] } "
"TIMOB-27798","Improvement","Android",3,"Android: Module build should auto-download NDK if not installed","*Summary:*  Google's gradle tool supports downloading the Android NDK for C/C++ builds. Titanium's module build system should automatically download the NDK in case it's not already installed. This will help reduce tech-support issues.    *Recommended Solution:*  When we upgrade the Android gradle plugin to v3.6.0 or higher, we can specify the exact NDK version we want to download in the {{build.gradle}} as follows.  https://developer.android.com/studio/projects/install-ndk#apply-specific-version  {code:groovy}  android {   ndkVersion ""major.minor.build""  }    No version of NDK matched the requested version 19.2.5345600. Versions available locally: 20.1.5948944    No version of NDK matched the requested version 20.0.5594570. Versions available locally: 20.1.5948944  {code}    It seems like when new NDK versions get released, older NDK versions appear to stop downloading via gradle (this is speculation). Because of this, we should avoid this feature at the moment. If we don't set the NDK version in gradle, then the gradle build system will download the newest NDK version which has a minor issue noted in [TIMOB-27776] but it still works.  "
"TIMOB-27797","Bug","Android",5,"Android: Unable to see ""error"" event in remote images","Using the test case below the ""error"" event in remote images is not fired unlike on iOS.    *Test Steps:*  # Create a new Titanium application   # Add the test case below in to the {{app.js}}  # Run the application    *Test Case:*      *Actual result*  Following Error is shown      *Expected Result*  Following should be seen in the console      "
"TIMOB-27808","Bug","Core",3,"Node: console.trace is not a function.","*Steps to reproduce the behavior*    {code:js}  console.trace('test');    console.trace is not a function. (In 'console.trace('test')', 'console.trace' is undefined)  {code}    *Expected behavior*    The message gets printed to the logs with {{trace}} log level."
"TIMOB-27822","Bug","iOS",5,"Ti.UI.iPad.Popover including arrow in content view on iOS 13","As of iOS 13, Ti.UI.iPad.Popover's ""arrow"" is included as part of the content area. This was not the case in previous versions of iOS, and is causing content to be pushed outside the bounds of what is visible in the Popover on iOS 13 devices. It's probably an issue with safe area implementation in iOS 13.    See  !popover_ios13_issue.png|thumbnail!  for the difference between how it is working on iOS 13 and iOS 12.    Reproduction code:    "
"TIMOB-27825","Bug","Android",5,"Android: High CPU usage in Android Studio","Opening titanium_mobile/android with Android Studio 3.6+ causes high CPU usage when viewing *.java files. This is an Android Studio pre-processor issue that can be worked around by disabling specific _Java Inspections_.    This bug has been reported and can be tracked: https://issuetracker.google.com/issues/152430526"
"TIMOB-27823","Bug","Android",5,"Android: javascript files/content assumed to be binary for Ti.Blob on apilevel 29+","This was caught by our test suite on android emulator. It seems Android changed the underlying mime type mapping result for javascript files to report {{'application/javascript'}} (whereas before it reported {{'text/javascript'}})    Our TiBlob code assumes most {{'application/'}} mime types are binary, and as a result thinks JS files hold binary content."
"TIMOB-27834","Bug","Android",3,"Android: NavigationWindow doesnt trigger open and close events","As per the docs the [open|http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.NavigationWindow-event-open] and [close|http://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.NavigationWindow-event-open] events must be triggered when the NavigationWindow opens and closes respectively.    This only works on iOS.    Here is a sample:  _controller.xml_    {code:xml}  <Alloy>   <NavigationWindow onOpen=""onNavigationWindowOpen"" onClose=""onNavigationWindowClose"">    <Window>     <Label>Main</Label>    </Window>   </NavigationWindow>  </Alloy>  {code}    _controller.js_    {code:javascript}  // Arguments passed into this controller can be accessed via the `$.args` object directly or:  var args = $.args;    function onNavigationWindowOpen() {      Ti.API.info('Opened');  }    function onNavigationWindowClose() {      Ti.API.info('Closed');  }  {code}    Nor _Opened_ neither _Closed_ events were shown inside the console."
"TIMOB-27831","Bug","Android",3,"Android: Implement TabGroup.tintColor","Implement ability to specify a {{tintColor}} or {{activeTintColor}} for tab icons.    *TEST CASE*  {code:js}  const tabGroup = Ti.UI.createTabGroup({   // style: Ti.UI.Android.TABS_STYLE_BOTTOM_NAVIGATION  });    const tabWin_home = Ti.UI.createWindow({      title: 'Home',      backgroundColor: 'white'  });  const tab_home = Ti.UI.createTab({      icon: 'home.png',      title: 'Home',      titleColor: 'red',      activeTitleColor: 'blue',      tintColor: 'red',      activeTintColor: 'blue',      window: tabWin_home  });    const tabWin_chat = Ti.UI.createWindow({   title: 'Chat',   backgroundColor: 'white'  });  const tab_chat = Ti.UI.createTab({   icon: 'chat.png',   title: 'Chat',   titleColor: 'red',   activeTitleColor: 'blue',   tintColor: 'red',   activeTintColor: 'blue',   window: tabWin_chat  });    tabGroup.addTab(tab_home);  tabGroup.addTab(tab_chat);  tabGroup.open();  {code}"
"TIMOB-27830","Bug","Android",3,"Android: TabGroup.titleColor has no effect","Attempting to specify a {{titleColor}} or {{activeTitleColor}} does not work, the TabGroup defaults to standard system colors.    *TEST CASE*  {code:js}  const tabGroup = Ti.UI.createTabGroup();    const tabWin_home = Ti.UI.createWindow({      title: 'Home',      backgroundColor: 'white'  });  const tab_home = Ti.UI.createTab({      icon: 'home.png',      title: 'Home',      titleColor: 'red',      activeTitleColor: 'blue',      window: tabWin_home  });    const tabWin_chat = Ti.UI.createWindow({   title: 'Chat',   backgroundColor: 'white'  });  const tab_chat = Ti.UI.createTab({   icon: 'chat.png',   title: 'Chat',   titleColor: 'red',   activeTitleColor: 'blue',   window: tabWin_chat  });    tabGroup.addTab(tab_home);  tabGroup.addTab(tab_chat);  tabGroup.open();  {code}"
"TIMOB-27835","Bug","Android",0,"Android: Repository specified in modules build.gradle is not able to be resolved when building an application","h5.Description    When providing an extra maven repository that provides a dependency in a modules build.gradle file, when building an application that uses that dependency cannot be resolved.    *Workaround*:    In your application, add a build.gradle to {{platform/android}} (classic) or {{app/platform/android}} (alloy) that contains the repository definition.     h5.Steps to reproduce    1. Copy the below to a build.gradle file in a module    2. Build the module using {{appc run -p android}} (so the app creation/building happens)    h5.Actual    During the *application build* the following error occurs        h5.Expected    My expectation is that the repository definition shouldn't be required in app and module (but I could be wrong)"
"TIMOB-27837","Bug","Android",5,"Android: Custom theme ignored by modal/translucent windows as of 9.0.0","*Summary:*  As of Titanium 9.0.0, a custom Android theme/style defined in XML is ignored by windows:  * With ""modal"" property set to {{true}}.  * With ""opacity"" property set less than {{1.0}}. (ie: translucent windows)    *Steps to reproduce:*  # Create a Classic app project with below files.  # Build and run on Android.  # Notice modal window's title bar is dark gray, but theme sets it to red.  # Notice button's text is in all caps, but theme sets it to use lowercase letters.    app.js      tiapp.xml      ./platform/android/res/values/my_theme.xml      "
"TIMOB-27850","Bug","Android",5,"Android: App/Module builds fail with JDK 14 as of 9.0.0","*Summary:*  When building an app or module with Titanium 9.0.0, the build will fail if JDK 14 is installed.    Titanium 8.3.x builds fine with JDK 14... except for Hyperloop builds: [TIMOB-27780]    *Steps to reproduce:*  # Install JDK 14.  # Create a Titanium app project.  # Build with Titanium 9.0.1 for Android. (9.0.1 supports JDK 13.)    *Result:*      *Cause:*  As of Titanium 9.0.0, we now build with gradle.  We need to upgrade gradle to v6.3.0 which recently added JDK 14 support.  https://docs.gradle.org/6.3/release-notes.html    *To-Do:*  In folder {{titanium_mobile/android}}, execute below command line to upgrade gradle wrapper files.      We should also update our {{com.android.tools.build:gradle}} tool to version {{3.6.2}} for files...  https://github.com/appcelerator/titanium_mobile/blob/master/android/build.gradle  https://github.com/appcelerator/titanium_mobile/blob/master/android/templates/build/root.build.gradle    *Note:*  You can have multiple JDK installations on Mac. You can list the JDK versions installed by entering the following at the command line.      You can select which installed JDK version to use by entering the following at the command line. You'll need to set the {{<JavaVersion>}} to what's installed, which the above command line will list. The below can be set in your {{.bash_profile}} file.      *Work-Around:*  Downgrade to JDK 13 for Titanium 9.0.1.  Downgrade to JDK 12 for Titanium 9.0.0. (See [TIMOB-27781])  (JDK 8 is the min version needed.)  "
"TIMOB-27852","Bug","Android",3,"Android: Production builds no longer copy AAB to distribution folder as of 9.0.1","*Summary:*  As of Titanium 9.0.1, a ""production"" build no longer outputs an AAB (Android App Bundle) file to the distribution directory. The build does create the AAB file under the ""build"" directory, but not to the desired location.    *Steps to reproduce:*  # Delete the last built APK and AAB files from the distribution folder.  # Set up a project to build with 9.0.1.  # Build for ""production"".  # Go to the selected ""Distribution"" folder.  # Notice the AAB file is missing. Only the APK file is there.    *Work-Around:*  The AAB file can be found under the following folder instead...    "
"TIMOB-27855","Improvement","Android",5,"Android: Animate elevation value","Currently it is not possible to animate the elevation value. Other values can be animated.     "
"TIMOB-27862","Improvement","Android",5,"Android: Add callback support to Ti.Platform.openURL()","*Summary:*  On Android, the {{Ti.Platform.openURL()}} method only supports the URL argument. The 2 optional arguments, ""options"" dictionary and callback, are ignored and only supported on iOS.  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Platform-method-openURL    We should add support for the callback argument for consistency with iOS.      *Note:*  The ""options"" dictionary should continue to be ignored since it only supports iOS settings. Meaning that the below should work on Android without issue.    "
"TIMOB-27871","Improvement","Android",8,"Android: Setting TextField/TextArea ""editable"" to false should allow user to copy text to clipboard","*Summary:*  When setting a {{TextField}}/{{TextArea}} object's ""editable"" property to {{false}}, the end-user should be able to select the text and copy it to the clipboard. Allowing this is typically the main purpose of making a field read-only.    If the app developer doesn't want the text to be selectable, then disabling it via the ""enabled"" property would be better.    *Note:*  On iOS, we currently support copying text from a read-only {{TextArea}}.  Unfortunately, iOS' {{TextField}} does not support this. (It should though.)  "
"TIMOB-27872","Bug","Android",5,"Android: Blob imageAsX() methods ignore EXIF orientation if not wrapping a file","*Summary:*  When a Titanium blob references a non-file type, such as a byte buffer or ""content://"" URL, then the blob's {{imageAs*()}} methods will ignore a JPEG's EXIF orientation setting.    This affects the following methods:  * {{Blob.imageAsCropped()}}  * {{Blob.imageAsResized()}}  * {{Blob.imageAsThumbnail()}}  * {{Blob.imageWithAlpha()}}  * {{Blob.imageWithRoundedCorner()}}  * {{Blob.imageWithTransparentBorder()}}    *Steps to reproduce:*  # Build the attached  [^DownloadImageBlobTest.js] on Android.  # Tap on the ""Download"" button. (Requires Internet access.)  # Tap on ""JPEG - EXIF Rotate 90"" in option dialog.  # Notice that the displayed resized image is not upright. (This is the bug.  # Do the same with all of the other ""EXIF"" options in the dialog. They all have this issue.  "
"TIMOB-27874","New Feature","Android|iOS",5,"TiAPI: Add Ti.Locale.parseDecimal() method","*Summary:*  Titanium has APIs to turn numbers into localized strings, but there are no APIs to convert a localized numeric string back to a number type.    *Proposed Solution:*  Add the following method.  {{Ti.Locale.parseDecimal(text \[, locale \]); // Returns number type.}}    If the above was given an invalid string, then it will return {{NaN}} (Not-a-Number), which matches JavaScript's standard {{Number.parseFloat()}} method behavior.    *Main Use-Case:*  A {{TextField}} using a decimal keyboard type will be using the device's current locale for the decimal separator. This means the decimal separator will be a comma {{,}} in Europe. It will can also be a unicode decimal separator for Arabic locales. When reading the {{TextField}} string ""value"" property, the app developer will need an easy means of parsing the localized numeric string back to a JS number type.    *Test Cases:*  Converting a number to localized string and then back to a number.      Parsing equivalent numbers from 2 different locales.      Strings that cannot be converted to a number will return NaN.    "
"TIMOB-27879","New Feature","Android",5,"Android: ListView should only fire ""scrolling"" event when moving a min distance","Android's {{ListView}} can spam a ""scrolling"" event even when your finger is held at a single position. This is because there is currently no touch tolerance applied and 1 pixel scroll movement will fire the event. It should only fire a ""scrolling"" event when the scroll direction changes and for a minimum pixel distance specified by Google's [ViewConfiguration.getScaledTouchSlop()|https://developer.android.com/reference/android/view/ViewConfiguration#getScaledTouchSlop()] API.    "
"TIMOB-27881","Bug","Android",3,"Android: ImageView tintColor has no effect","- {{Ti.UI.ImageView.tintColor}} fails to apply the defined color to the {{ImageView}}    *TEST CASE*  {code:js}  const win = Ti.UI.createWindow({ backgroundColor: 'white' });  const img = Ti.UI.createImageView({   width: '80%',   image: 'https://about.gitlab.com/images/press/logo/png/gitlab-icon-1-color-black-rgb.png',   tintColor: 'red'  });    win.add(img);  win.open();  {code}    *EXPECTED*  - Image should tint to defined color (red).    *ACTUAL*  - Image does not tint to defined color and remains black."
"TIMOB-27882","Bug","Android",5,"Android: Unable to do a production build after switching SDK on Windows","When creating a production build with two different SDKs the following error can be seen:       *Note*: If you manually end the java-tm process you are able to build    *Test Steps:*  # Open Appcelerator studio   # Create a new alloy application using SDK: 9.0.2.v20200505111803  # Package using the Android store option in the drop down menu   # Go through the prompts and select an output destination   # Wait for .APK and .AAB to be created  # Change SDK in the tiapp.xml to SDK: 9.1.0.v20200505112143  # Package again using the Android store option in the drop down menu   # Go through the prompts and select an output destination "
"TIMOB-27892","Improvement","Android",8,"Android: Update toLocale*String() methods to support locale/options","*Summary:*  On Android, the following methods ignore the {{locales}} and {{options}} arguments. They also ignore the current locale and always use {{""en-US""}} when formatting a string.  * [Date.toLocaleString()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString]  * [Date.toLocaleDateString()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString]  * [Date.toLocaleTimeString()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString]  * [Number.toLocaleString()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString]  * [String.localeCompare()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare]  * [String.toLocaleLowerCase()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase]  * [String.toLocaleUpperCase()|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase]    On iOS, the above methods *+do+* support locale/options.  We should add the same on Android for parity and to better support the standard JavaScript APIs.    *Note:*  To add official {{Intl}} support to V8, we would have to {{#if}} it in, but this involves adding the ICU (International Components for Unicode) C++ library which is about 20 MB per architecture. This is too big and is not mobile friendly. Especially since Google Play has a 100 MB limit on APKs. So, the most reasonable solution is to implement this ourselves in Java.    *Alternatives:*  On older Titanium versions, your only option to generate localized strings was via APIs:  * [String.formatDecimal()|https://docs.appcelerator.com/platform/latest/#!/api/Global.String-method-formatDecimal]  * [String.formatDate()|https://docs.appcelerator.com/platform/latest/#!/api/Global.String-method-formatDate]  * [String.formatTime()|https://docs.appcelerator.com/platform/latest/#!/api/Global.String-method-formatTime]  "
"TIMOB-27891","New Feature","Android",5,"Android: Add Intl.Collator support","*Summary:*  On Android, we should add support for the JavaScript {{Intl.Collator}} class.  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator    A collator is used to do localized string comparisons. This allows an app to correct sort text for the current locale/language.    This is already supported on iOS. We should add it to Android for parity.    *Note:*  To add official {{Intl}} support to V8, we would have to {{#if}} it in, but this involves adding the ICU (International Components for Unicode) C++ library which is about 20 MB per architecture. This is too big and is not mobile friendly. Especially since Google Play has a 100 MB limit on APKs. So, the most reasonable solution is to implement this ourselves in Java.  "
"TIMOB-27890","New Feature","Android",8,"Android: Add Intl.DateTimeFormat support","*Summary:*  On Android, we should add support for JavaScript class {{Intl.DateTimeFormat}}.  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat    This is already supported on iOS. We should add it to Android for parity.    *Note:*  To add official {{Intl}} support to V8, we would have to {{#if}} it in, but this involves adding the ICU (International Components for Unicode) C++ library which is about 20 MB per architecture. This is too big and is not mobile friendly. Especially since Google Play has a 100 MB limit on APKs. So, the most reasonable solution is to implement this ourselves in Java.    *Alternatives:*  On older Titanium versions, your only option to generate localized date/time strings was via APIs:  * [String.formatDate()|https://docs.appcelerator.com/platform/latest/#!/api/Global.String-method-formatDate]  * [String.formatTime()|https://docs.appcelerator.com/platform/latest/#!/api/Global.String-method-formatTime]  "
"TIMOB-27895","Improvement","Android|iOS",13,"TiAPI: Handle semantic colors (dark mode) without helper function","Titanium supports dark mode pretty okay, which is a great achievement! Unfortunately, there is one major issue when using it's API's right now: One has to fetch the colors via {{Ti.UI.fetchSemanticColor}} which does not work in Alloy (neither when styling in XML views nor in TSS styles). Users should create a mapping that fetches the color on the app start and write it to something more accessible like {{Alloy.CFG.styles.myColor}}. That is fine until you have 200+ colors that slow down the app launch by seconds (!) because all colors of the app need to be set before even shown    *Suggestion*: Be able to pass semantic colors just like normal css colors, e.g.  {code:js}  '#myView': {    backgroundColor: 'contentBackgroundColor'  }  {code}  which works with just one line of code inside the color handling of iOS (WebColor.m) / Android (TiColorHelper.java). It will lead to a notable performance boost on both startup and view presentation, since we don't have to do any manual color matching anymore.  "
"TIMOB-27977","New Feature","Android|iOS",5,"TiAPI: Add ""isTrusted"" property to Ti.UI.Slider ""change"" event","Component: Ti.UI.Slider  Platform: Android    At the moment it is not possible to differentiate between a ""user slide"" and a ""change of the value by code"" inside the change event. There is already a `fromUser` parameter inside the listener:  https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUISlider.java#L315    Exposing that value inside the event:  https://github.com/appcelerator/titanium_mobile/blob/master/android/modules/ui/src/java/ti/modules/titanium/ui/widget/TiUISlider.java#L361    and changing the calls to that function to ""onProgressChanged(seekBar, curPos, false);"" (last parameter false) would only output true if the slider was dragged by the user.    PR and Test case will follow"
"TIMOB-27904","Bug","Android",3,"Android: Incremental build duplicates ""bootstrap.json"" entries as of 8.1.0","*Summary:*  If a project contains a JS file ending with {{*.bootstrap.js}}, then every Android incremental build performed will duplicate its entry within our {{ti.internal/bootstrap.json}} file. This causes the bootstrap JS file to be executed multiple times on startup.    This regression was introduced in Titanium 8.1.0.    *Note:*  This only negatively impacts bootstraps that have an {{execute()}} function such as [ti.playservices|https://github.com/appcelerator-modules/ti.playservices/blob/master/android/Resources/ti.playservices/ti.playservices.bootstrap.js], because that function will end up being invoked multiple times.    *Steps to reproduce:*  # Create a Titanium app project.  # Copy the below {{test.bootstrap.js}} to the {{Resources}} directory.  # Build and run on Android.  # Notice a bootstrap dialog appears once. _(This is good.)_  # Build and run on Android again.  # Notice *two* bootstrap dialogs appear on startup. _(This is bad.)_  # Build and run on Android again.  # Notice *three* bootstrap dialogs appear on startup. _(This is bad.)_    \\  {{./Resources/test.bootstrap.js}}      *Cause:*  The incremental build changes made in Titanium 8.1.0 by [TIMOB-27043] moved bootstrap script finding code to our core [process-js-task.js|https://github.com/appcelerator/titanium_mobile/blob/master/cli/lib/tasks/process-js-task.js] file. The iOS {{_build.js}} was changed to not fetch bootstrap scripts itself anymore... but the same as not done in Android's {{_build.js}} which is why the entries are being duplicated.  "
"TIMOB-27912","Bug","Android",2,"Android: chrome devtools URL is no longer valid","h5.Description    When debugging an Android app we log a message on how to connect to the debugger in Chrome which uses a {{chrome-devtools://}} URL. In Chrome 83 this URL has been removed and is now just {{devtools://}}    h5.Steps to reproduce    1. Build an Android app with {{--debug-host /localhost:9000}}  2. Try to open the chrome-devtools URL that gets logged    h5.Actual    URL doesnt work    h5.Expected     URL should work"
"TIMOB-27927","Bug","Android",3,"Android: Changing currently selected row's color in picker does not update shown color","Setting the color of a picker row dynamically does not show up the changed color. To show up the changed color we need to select another option and reselect the first one.    *Steps to reproduce:*  # Create a project using the app.js as below. Run on android device  # Select an option in the picker. The selected option should change text color but it does not show up the color change.  # Click on the picker again. The last selected option shows changed color in the drop down.  # Select another option and again the option selected in step 2. The changed color is shown now.  Note: On iOS calling the picker.reloadColumn() method reloads the picker and shows the changed color of the selected option.        *Expected Result:*  On android the color change of the option should show on the first time it is selected.    *Work-Around:*  Set the row's title text after setting the color. This force picker's text field to update.        "
"TIMOB-27933","Improvement","LiveView",2,"LiveView: Do not report disconnect errors to ACA","h5.Description    Currently when the liveview app code can't connect to the server it will spam errors (this will be improved in 9.1.0), however we should make sure that these errors also are not reported to ACA.    LiveView currently has a shim that overrides the old APM module that would make the functions a no-op, although I think that is too brute forcey. I think we are best to maybe try to suppress these errors somehow (probably by just handling them better), and then lastly trying to detect the error somehow in liveview and suppress if it is a liveview. (maybe we could prefix all errors with LIVEVIEW and check for that before sending onto ACA)"
"TIMOB-27930","Bug","iPad",5,"iOS: iPad crashing intermittently during unit test suite","When the test suite runs on iPad, it tends to crash around the Ti.UI.iOS.WebViewConfiguration tests (not one specific test, though). i.e.    Please see the attached crash logs.    Looks like perhaps TiViewController's underlying _proxy pointer is null?    "
"TIMOB-27938","Improvement","Android",3,"Android: Update gradle build tools to 4.0.x","*Summary:*  Titanium currently builds with ""com.android.tools.build:gradle"" tool version {{3.6.2}}.  We should update it to {{4.0.0}}.  https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build#4-0-0    *To-Do:*  We must update the following files...  https://github.com/appcelerator/titanium_mobile/blob/master/android/build.gradle  https://github.com/appcelerator/titanium_mobile/blob/master/android/templates/build/root.build.gradle    *Note:*  You must use Android Studio 4.x to build a project using Android gradle tools 4.0.0 or higher.  "
"TIMOB-27935","Bug","iOS",3,"iOS: TableViewRow does not return getRect methods ","When trying to get the {{rect.height}} the value does not change even through the tableViewRow height is increasing/changing. On the Android side this is working fine and the value is returned.     *Test Case:*      *Test Steps:*  # Create a new application with the code above  # Run the application  # Click on the {{Minus}} and {{Plus}} buttons  # Notice label does not change with the correct the values (even though height of the tableViewRow changes)"
"TIMOB-27939","Improvement","Android",3,"Android: Module builds should auto-download NDK r21c by default if needed","*Summary:*  When doing a module build, Titanium will auto-download NDK r20b (aka: 20.1.5948944) by default if NDK installations were found on the system.    The default should be updated to NDK r21c (aka: 21.2.6472646).  https://github.com/android/ndk/wiki/Changelog-r21#r21c    *Reason:*  The macOS distribution of the Android NDK r21c tools have been ""notarized"" by Google. This means module builds will no longer display several security popups on macOS Catalina.    *To-Do:*  Update the {{android.ndkVersion}} here...  https://github.com/appcelerator/titanium_mobile/blob/master/android/templates/module/generated/build.gradle  "
"TIMOB-27950","Bug","Android",3,"Android: ""tiapp.xml"" setting <navbar-hidden> is ignored if <fullscreen> or <statusbar-hidden> is also not set as of 9.0.0","In tiapp.xml there is the property <navbar-hidden>. I set it to false and in 9.0.2.GA it doesn't worky anymore and I have to use (and I'm happy with it):    {code:tss}  ""TabGroup"": {   theme: ""Theme.AppCompat.NoTitleBar""  }  {code}    I just want to notice you of this thing.  "
"TIMOB-27946","Improvement","Android",5,"Android: Implement Ti.View.borderRadius multiple values for custom edge radii","A developer should be able to configure custom border radii, e.g. bottom-left, bottom-right, top-left and top-right. The size of the radius can and should be reused from the existing border-radius property.    Example:  {code:js}  var win = Ti.UI.createWindow({      backgroundColor: '#333'  });    var view = Ti.UI.createView({      backgroundColor: '#fff',      height: 350,      bottom: 0,      borderRadius: '20px 20 20dp 15px',  });    win.add(view);  win.open();  {code}"
"TIMOB-27964","Epic","iOS",0,"iOS: Support iOS 14 and Xcode 12","This epic will track all the items required to enable support for iOS 14 and Xcode 12.  "
"TIMOB-27963","Bug","Android",3,"Android: Always specify default Tab.tintColor","- Always specify default {{tintColor}} for tabs    *TEST CASE*  {code:js}  const tabGroup = Ti.UI.createTabGroup({   // style: Ti.UI.Android.TABS_STYLE_BOTTOM_NAVIGATION,   // tintColor: '#bbb' // NOTE: Workaround for 9.0.3  });    const tabWin_home = Ti.UI.createWindow({      title: 'Home',      backgroundColor: 'white'  });  const tab_home = Ti.UI.createTab({      title: 'Home',      window: tabWin_home  });    const tabWin_chat = Ti.UI.createWindow({   title: 'Chat',   backgroundColor: 'white'  });  const tab_chat = Ti.UI.createTab({   title: 'Chat',   window: tabWin_chat  });    tabGroup.addTab(tab_home);  tabGroup.addTab(tab_chat);  tabGroup.open();  {code}  - Unselected tab text and icon should be dimmer than selected tab."
"TIMOB-27976","New Feature","iOS",8,"iOS 14: Expose API to use  Core Location AccuracyAuthorization","Apple has exposed new APIs CoreLocation framework e.g. https://developer.apple.com/documentation/corelocation/claccuracyauthorization?changes=latest_major  https://developer.apple.com/documentation/corelocation/cllocationmanager/3600217-requesttemporaryfullaccuracyauth?changes=latest_major  https://developer.apple.com/documentation/corelocation/cllocationmanager/3600216-requesttemporaryfullaccuracyauth?changes=latest_major.  Expose new APIs in SDK to use .    New APIs-   Constants -       Property (read-only)-        function -      "
"TIMOB-27987","New Feature","iOS",5,"iOS 14: Expose new APIs given in WKWebView","In WKWebView Apple has given new APIs. e.g.  1. [pageZoom|https://developer.apple.com/documentation/webkit/wkwebview/3516411-pagezoom?changes=latest_minor&language=objc]  2. [createPDF|https://developer.apple.com/documentation/webkit/wkwebview/3516407-createpdfwithconfiguration?changes=latest_minor&language=objc]  3. [createWebArchivedData|https://developer.apple.com/documentation/webkit/wkwebview/3516408-createwebarchivedatawithcompleti?changes=latest_minor&language=objc]  4. [findString|https://developer.apple.com/documentation/webkit/wkwebview/3516409-findstring?changes=latest_minor&language=objc]    Expose these APIs in titanium.    Corresponding Titanium APIs -   1. Property      It already exists. Internal implementation, native side, will be changed.  2. Function        3. Function         4. Function      "
"TIMOB-27985","Story","iOS",5,"iOS 14: Ensure widgets are working as expected in titanium apps via extension ","Apple has introduced Widgets in iOS 14 https://developer.apple.com/documentation/widgetkit. Titanium developers can use it via creating extensions and use extension in their project.    Try to create a widget extension and use it in sample app, run it and see if everything works as expected.   For creating extension see guide [here|https://wiki.appcelerator.org/display/guides2/Creating+iOS+Extensions+-+Siri+Intents]"
"TIMOB-27994","Bug","iOS",5,"iOS: itemclick event its firing instead of a move event when ordering items in a list (iOS 13+)","When using iOS13 or 14 the itemclick event is fired when moving items in a listView instead of a Move event listener.    *Test Case:*      *Test Steps*  # Create a Titanium application   # Copy the code above into the {{app.js}}  # Run the app on a iOS 13/14 device  # Move one of the items in the listView around  # Notice a click event is fired   # Rerun application on a device/sim < iOS13  # Move one of the items in the listView around  # Notice Move event listener is fired and logged     *Expected result*  Following should be logged:    "
"TIMOB-27997","Bug","iOS",5,"iOS: Ti.Blob images from device (via Ti.UI.View#toImage()) would report dimensions in points, not pixels","On Android, if we generate a Ti/Blob image from calling Ti.UI.View#toImage(), it reports width/height/size properly.    On iOS, it will report width and height in points, not pixels. size is therefore also incorrect.    Say we have a 10px x 10px view rendered to image on a 3x scale device. The blob will report width of 3, height of 3 and size of 9. The device will report density factor of 3. So naively multiple by that still gives us wrong values (of 9, 9, 81 respectively instead of 10, 10, 100).    UIImage holds a scale value for cases like this and we should multiply width/height by that on iOS to get true pixel values. (Doing so in this case we actually do end up with 10, 10, 100 because presumably the image scale is recorded as something like 3.3333?)"
"TIMOB-28012","New Feature","iOS",5,"iOS 14: Expose new APIs in Ti.UI.ScrollableView to customize indicator","In iOS 14, Apple has introduced new APIs to customize indicator image in UIPageControl.    https://developer.apple.com/documentation/uikit/uipagecontrol/3577679-preferredindicatorimage?language=objc    https://developer.apple.com/documentation/uikit/uipagecontrol/3577680-setindicatorimage?language=objc    Expose these APIs in titanium sdk .    New APIs-   Property -        Function -       "
"TIMOB-28016","Bug","Android",3,"Android: Build fails with ACA 2.0.1 and SDK 9.0.0-9.0.2","h5.Steps to reproduce:  1. Create & build an app with ACA 2.0.1 module and SDK 9.0.0.GA, 9.0.1.GA, or 9.0.2.GA on android device/emulator.    h5.Actual results:  1. The build fails in gradle with:  {code}  [ERROR] :  [GRADLE]   [ERROR] :  [GRADLE] FAILURE: Build failed with an exception.  [ERROR] :  [GRADLE]   [ERROR] :  [GRADLE] * What went wrong:  [ERROR] :  [GRADLE] Could not determine the dependencies of task ':app:compileDebugJavaWithJavac'.  [ERROR] :  [GRADLE] > Could not resolve all task dependencies for configuration ':app:debugCompileClasspath'.  [ERROR] :  [GRADLE]    > Could not find org.appcelerator:titanium:9.0.3.  [ERROR] :  [GRADLE]      Required by:  [ERROR] :  [GRADLE]          project :app  [ERROR] :  [GRADLE]          project :app > ti:cloudpush:7.1.0  [ERROR] :  [GRADLE]    > Could not find org.appcelerator:titanium:9.0.3.  [ERROR] :  [GRADLE]      Required by:  [ERROR] :  [GRADLE]          project :app > hyperloop:hyperloop:5.0.3  [ERROR] :  [GRADLE]          project :app > ti:playservices:17.1.1  [ERROR] :  [GRADLE]    > Could not find org.appcelerator:titanium:9.0.3.  [ERROR] :  [GRADLE]      Required by:  [ERROR] :  [GRADLE]          project :app > com.appcelerator:aca:2.0.1  [ERROR] :  [GRADLE]   [ERROR] :  [GRADLE] * Try:  [ERROR] :  [GRADLE] Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.  [ERROR] :  [GRADLE]   [ERROR] :  [GRADLE] * Get more help at https://help.gradle.org  [ERROR] :  [GRADLE]   [ERROR] :  [GRADLE] BUILD FAILED in 1s  [ERROR] :  ""gradlew"" tool returned exit code: 1  [ERROR] Application Installer abnormal process termination. Process exit value was 1  {code}    h5.Actual results:  1. The build should be successful.    *Work-Around 1:*  Build with Titanium 9.0.3.GA or higher.    *Work-Around 2:*  Use ACA module v2.0.0 instead by setting the following in ""tiapp.xml""...  {code:xml}  <ti:app>   <modules>    <module platform=""android"" version=""2.0.0"">com.appcelerator.aca</module>   </modules>  </ti:app>  {code}      "
"TIMOB-28020","Bug","Android",3,"Android: Parity with iOS Shortcut click event payload","- Amend {{Ti.UI.Shortcut}} click event to include {{item}} as Shortcut item instead    *TEST CASE*  {code:js}  const window = Ti.UI.createWindow({ backgroundColor: 'grey', layout: 'vertical' });  const shortcut = Ti.UI.createShortcut();    let lastShortcutItem;    function test(title, callback) {   const button = Ti.UI.createButton({ title, top: 50 });   button.addEventListener('click', callback);   window.add(button);  }    test('ADD RANDOM SHORTCUT', _ => {   const rand = Math.floor(Math.random() * (999 - 1)) + 1;   const item = Ti.UI.createShortcutItem({       id: `test_shortcut_${rand}`,       title: `SHORTCUT_${rand}`,       description: `DESCRIPTION_${rand}`      });   lastShortcutId = item;   shortcut.add(item);  });    test('REMOVE LAST SHORTCUT', _ => {   try {    shortcut.remove(lastShortcutItem);   } catch { }  });    test('REMOVE ALL SHORTCUTS', _ => {   shortcut.removeAll();  });    test('NUMBER OF SHORTCUTS', _ => {   alert(`staticItems: ${shortcut.staticItems.length}`);   alert(`items: ${shortcut.items.length}`);  });    Ti.UI.Shortcut.addEventListener('click', e => {   // e should contain 'item'   console.log('shortcut: ' + JSON.stringify(e, null, 1));  });    window.open();  {code}"
"TIMOB-28025","Story","Tooling",8,"Install Xcode 12 betas to build nodes","In order to support building/testing on Xcode 12 and iOS 14, we will need at least one build node running the latest Xcode 14 beta."
"TIMOB-28031","Bug","iOS",3,"CLI: Unable to find an iOS Simulator running iOS 14.0.","I'm seeing this locally, m as well s on the build node with Xcode 12 beta 2 installed.  trying to build an iOS app the CLI shows:    "
"TIMOB-28030","Story","Android|iOS",3,"TiAPI: Deprecate WebView ""blacklistedURLs"" property in favour of ""blockedURLs""","*I am not intending to open a debate with this ticket, there has been plenty of discussion within tech as to this term and others like it. We want to create a space that is inclusive to everyone, so if there are any issue that can cause people to feel unwelcome then we will strive to fix those issues*    h5.Description    Deprecate property {{blacklistedURLs}} and replace with {{blockedURLs}}.  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.WebView-property-blacklistedURLs    Deprecate event {{blacklisturl}} and replace with {{blockedurl}}.  https://docs.appcelerator.com/platform/latest/#!/api/Titanium.UI.WebView-event-blacklisturl    We should deprecate at the earliest convenience and look to remove in the next semver major release."
"TIMOB-28041","Story","Tooling",13,"Merge titanium-mobile-mocha-suite into titanium_mobile","We split out the test suite so that it could be used between iOS/Android (titanium_mobile) and Windows (titanium_mobile_windows). Given that Windows is dead, we should consider making our lives much easier and folding the test suite and tooling directly into the SDK repo (titanium_mobile). We would avoid the need to migrate tests back and forth and maintain branches/fixes on both repos."
"TIMOB-28049","Story","Android",3,"Android: Investigate ""ACCESS_BACKGROUND_LOCATION"" handling on Android 11","*Summary:*  Supposedly, Android 11 will no longer show a permission request dialog for the {{ACCESS_BACKGROUND_LOCATION}} permission. We need to confirm this.  https://developer.android.com/preview/privacy/location#background-location-permission-dialog-changes    If true, then the only way to enable permission is to go to the app's ""Location Permissions"" activity under system settings. This very well maybe true because according to Google's developer blog below, they will be removing apps using this permission from Google Play unless they provide a valid reason and pass Google's review process.  https://android-developers.googleblog.com/2020/02/safer-location-access.html    *Note 1:*  We might be able to reach the app's ""Location Permission"" activity under system settings via the following intent action.  {{ACTION_LOCATION_SOURCE_SETTINGS}}    *Note 2:*  We may need to expose Android's [shouldShowRequestPermissionRationale ()|https://developer.android.com/reference/android/app/Activity.html#shouldShowRequestPermissionRationale(java.lang.String)] API. Normally, this method would return {{true}} if the end-user tapped on ""Disallow"" in the permission request dialog. On Android 11, this might always return {{true}} for the {{ACCESS_BACKGROUND_LOCATION}} where you would have to tell the end-user how to enable it under system settings.  "
"TIMOB-28061","New Feature","Android|iOS",5,"TiAPI: Add OS version major/minor integer constants","*Summary:*  Currently, you can only fetch the OS version as a string via the [Ti.Platform.version|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Platform-property-version] property. This is not convenient to use when you only want to call APIs on higher OS versions. For example, we've seen a lot of code that looks like the below.        *Feature Proposal:*  Add the following properties to {{Ti.Platform}}...  * {{Ti.Platform.versionMajor}}  // Returns an integer.  * {{Ti.Platform.versionMinor}}  // Returns an integer.    Also add the following global constants.  _(These will pair well with [OS_ANDROID|https://docs.appcelerator.com/platform/latest/#!/api/Global-property-OS_ANDROID] and [OS_IOS|https://docs.appcelerator.com/platform/latest/#!/api/Global-property-OS_IOS].)_  * {{OS_VERSION_MAJOR}}  * {{OS_VERSION_MINOR}}    This will make the above code example look simpler like this...      *Note:*  On Android, we have a [Ti.Platform.Android.API_LEVEL|https://docs.appcelerator.com/platform/latest/#!/api/Titanium.Platform.Android-property-API_LEVEL] constant which is a single integer used to represent all Android OS versions. It's best to use this if you can, but note that no other platform has a similar concept... while all operating system support a {{<major>.<minor>}} version that we can use for parity.  https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels  "
"TIMOB-28062","Bug","iOS",5,"iOS: Titanium not compatible with new Facebook SDK versions due to missing Swift files","Since Facebook SDK 7.0.0, their iOS SDK requires the project to contain at least one "".swift"" file. Otherwise the build fails due to missing Swift standard libraries. And although Titanium already enables Swift for module compatibility, it does not seem to be enough so far.    The same issue is happening for other app frameworks like React Native and they workaround it by adding it to the Xcode project (which is not generated their but stable, an option Titanium has not).    Importance of the Facebook SDK 7+ upgrade: They fixed an issue with random server errors crashing the whole app that uses it, therefore it's a critical update developers should perform."
"TIMOB-28064","Bug","Android",3,"Android: Setting border fills view when backgroundColor is not specified","- Setting a border will fill the view with {{borderColor}} if a {{backgroundColor}} is not specified    *TEST CASE*  {code:js}  const window = Ti.UI.createWindow({   backgroundColor: 'white'  });  const border = Ti.UI.createView({   width: 200,   height: 200,   borderRadius: 5,   borderColor: 'gray',   borderWidth: 3  });    window.add(border);  window.open();  {code}"
"TIMOB-28147","New Feature","iOS",5,"iOS 14 App Clips extension for titanium ","App Clips may be the entry point for retail that have never jumped the App service to cater to on-premise , proximity temporary apps.    https://developer.apple.com/app-clips/    They are small (10 mb apps) that doesn’t need to be downloaded from the App Store and can be used instantly.  Even though Android has thé équivalant Instant Apps, such features would enhance greatly and bring up to speed a feature that will be ubiquitous. Even more so than regular full on apps (which are still required even for an App Clip to be attached to it).    If it is possible to do so in Ti, an Example on Axway’s Developer blog would spread it faster among us developers.    "
"TIMOB-28070","Improvement","Android|iOS",1,"TiAPI: Add vscode json files to app templates","*Summary:*  We should add {{.vscode/}} JSON configuration files to our Titanium app templates which hide the generated folders (like the ""build"" folder) and suggest VS Code users to use our extension.    *Classic App Folder Exclusion:*  For Classic apps, we only need to hide the {{./build}} folder from the editor and exclude it from file monitoring/search.    {{.vscode/settings.json}}  {code:json}  {   ""files.exclude"": {    ""build/"": true   },   ""search.exclude"": {    ""build/"": true   },   ""files.watcherExclude"": {    ""build/"": true   },  }      *Promoting Titanium's Extension:*  When opening the app project folder in VS Code, we can have the editor recommend the end-user to use our Titanium extension by adding the following JSON file.    {{.vscode/extensions.json}}  {code:json}  {   ""recommendations"": [    ""axway.vscode-titanium""   ]  }  {code}  "
"TIMOB-28073","Bug","Android",3,"Android: DateTimeFormat mishandles some combinations of settings on Android 8","*Summary:*  If you set up {{Intl.DateTimeFormat}} to use 12-hour time and fractional digits on Android 8.x, then it will log an error and output a different format. This is not an issue on older or new Android OS versions.    *Steps to reproduce:*  # Build and run the below code on Android 8.  # Notice an error gets logged: {{Failed to generate 'best' date pattern.}}  # Notice displayed date is {{""3/31/20 8:15 PM""}} which doesn't match format settings.        *Result:*  The following error gets logged...      *Expected Result:*  No error should be logged.  The displayed date should be...      *Cause:*  This is a bug on Google's end. It is adding invalid format character {{'b'}} for the AM/PM component when it should be using format character {{'a'}} instead. This used to be a bug in Oracle's JDK as well...  https://bugs.openjdk.java.net/browse/JDK-8209047    Titanium was correctly catching the exception and falling-back to use a basic date/time format, but unfortunately that means it won't match the given format settings. (Having the fallback is still a good thing.)  "
"TIMOB-28078","New Feature","iOS",5,"iOS14: Expose new APIs Titanium.Network.HTTPClient which will require while accessing local http server","In iOS 14, Due to local network access prompt it may be that request get failed while waiting for user's permission. See more detail in WWDC video https://developer.apple.com/videos/play/wwdc2020/10110/.   In titanium, we need to provide APIs corresponding to [waitsForConnectivity|https://developer.apple.com/documentation/foundation/urlsessionconfiguration/2908812-waitsforconnectivity]   and [timeoutIntervalForResource |https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1408153-timeoutintervalforresource]"
"TIMOB-28077","Improvement","iOS",3,"iOS14: Expose new error type in Bonjure Service and update doc to align with Local n/w privacy restrictions ","In iOS 14, Apple has put restriction on accessing local network. It requires user permission.   To show the prompt developer need to add key [NSLocalNetworkUsageDescription|https://developer.apple.com/documentation/bundleresources/information_property_list/nslocalnetworkusagedescription?language=objc]  in tiapp.xml and if using Bonjure Service, that need to be added in info.plist using key [NSBonjourServices |https://developer.apple.com/documentation/bundleresources/information_property_list/nsbonjourservices] . More detail can be found in WWDC video https://developer.apple.com/videos/play/wwdc2020/10110/.  In iOS 14, new error [constant|https://developer.apple.com/documentation/foundation/nsnetserviceserror/nsnetservicesmissingrequiredconfigurationerror?language=objc] is given. In titanium, it need to added in Ti.Network.BonjureService and expose as error string.  "
"TIMOB-28093","Improvement","Android",3,"TiAPI: Add properties ""uprightWidth"" and ""uprightHeight"" to Ti.Blob","*Summary:*  When a Titanium {{Blob}} wraps an image, its ""width"" and ""height"" properties provide the ""decoded"" image's dimensions. Unfortunately, Android's native image loading APIs ignore a JPEG's EXIF orientation, meaning the image is loaded as-is (no rotation applied). While our {{ImageView}} and other APIs will correctly handle the EXIF orientation, the blob's ""width"" and ""height"" is for the unrotated image which makes it difficult to do manual layouts (ex: calculate letterbox scaling).    *Proposed Solution:*  Add the following properties to Titanium {{Blob}}:  * uprightWidth  * uprightHeight    The above properties will return what the image width and height should be when a JPEG's EXIF orientation is applied onscreen. If the image is not a JPEG or the JPEG has no EXIF orientation, then these properties will return the same values as ""width"" and ""height"".    And since iOS loads images in the upright positions, the above properties will always return the same values as ""width"" and ""height"".    *Use-Case:*  Developers need the image's actual width and height to do things like letterbox scaling. For example...      If the JPEG is loaded sideways (ie: its EXIF orientation is ignored), then the above will scale the image wrong.    *Note:*  This is an interim solution. A better solution would be to completely refactor Titanium's image loading code and decode the image in the upright position (pre-rotated). This will be a huge undertaking that is best done in a major Titanium release version. But when we do this, Android's ""uprightWidth"" and ""uprightHeight"" properties will match ""width"" and ""height"" just like iOS.  "
"TIMOB-28092","Bug","Android",5,"Android: Native modules pinned to build Titanium SDK version","Building a Titanium Android native module with SDK 9.0.0+ will pin the module to require the SDK the module was built with or newer.    For example, building {{titanium-identity}} with {{9.0.3.GA}} will cause a build failure for any project builds that include the module and use a older Titanium SDK.    This is because the *.pom file generated depends on {{org.appcelerator.titanium}}:      *TEST CASE*  1. Build a native Android module using {{9.0.3.GA}} (i.e: https://github.com/appcelerator-modules/titanium-identity)  2. Include module in project that uses an older Titanium SDK (9.0.0, 9.0.2, ...)  3. Build will fail  "
"TIMOB-28099","Bug","Hyperloop|iOS",5,"iOS: Unable to build Hyperloop Example app on iOS 14 using Xcode 12 Command line tools","When running the Hyperloop examples app on Xcode 12 command line tools and then running to 14.0 beta sim/device the following errors can be seen.    *Test Steps:*  # Download Hyperloop examples app  # Download the latest Xcode 12 beta  # Download the latest iOS 14 beta for device   # Run Hyperloop examples app     *Simulator error:*      *Device error:*      *Expected result:*  App should be able to build and run without any issues.    *Actual result:*  Above errors are shown."
"TIMOB-28098","New Feature","Android|iOS",5,"TiAPI: Add OS version patch integer constants","*Feature Proposal:*  Add the following properties to {{Ti.Platform}}...  * {{Ti.Platform.versionPatch}}  // Returns an integer.    Also add the following global constants.  _(These will pair well with [OS_ANDROID|https://docs.appcelerator.com/platform/latest/#!/api/Global-property-OS_ANDROID] and [OS_IOS|https://docs.appcelerator.com/platform/latest/#!/api/Global-property-OS_IOS].)_  * {{OS_VERSION_PATCH}}    "
"TIMOB-28104","New Feature","iOS",8,"iOS: Support new date picker styles from iOS 13.4 and iOS 14","iOS 13.4 and 14 are introducing new date picker styles (automatic, wheels, compact and inline). Titanium does not support those so far. Example:    {code:js}  var win = Ti.UI.createWindow({   backgroundColor: '#fff'  });    var picker = Ti.UI.createPicker({   type: Ti.UI.PICKER_TYPE_DATE,   datePickerStyle: Ti.UI.iOS.DATE_PICKER_STYLE_INLINE  });    win.add(picker);  win.open();  {code}    See the attachment for details!  "
