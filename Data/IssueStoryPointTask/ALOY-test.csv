"issuekey","type","components","storypoint","title","description_text"
"ALOY-1504","Bug","Builtins",3,"ERROR: Alloy is not defined","""I have an Android project integrated with _iamyellow.net_ Push Notification module.    Erroneous scenario generated by following steps.  1. App is closed manually in background   2. There is a notification in notification bar for the app  3. App is opened by tapping on the notification.  4. An error with """"Alloy is not defined"""", sourced build/android/assets/alloy.js, is appeared.  Please refer screenshot in attachment.  5. App sticks at default screen after receiving error.    Please consider this as high priority issue.    Regards."""
"ALOY-1508","Bug","Tooling",3,"iOS: Localised splash screen is not visible","""When I add the splash screen in the """"app/i18n/en/"""" path I am not able to see the splash screen. I get black screen.    *Steps to reproduce:*  1. Create an alloy project  2. Place a splash screen image In app/i18n/en/ folder   3. Run the app on simulator    *Expected:* Splash screen should be visible when the app launches.  *Actual:* A black screen is shown instead of splash screen image.    Reference: http://docs.appcelerator.com/platform/latest/#!/guide/Icons_and_Splash_Screens-section-29004897_IconsandSplashScreens-LocalizedSplashScreens"""
"ALOY-1502","Bug","Models",8,"Destroy Model in Alloy doesn't seem to be working","""Hi,  Trying to delete models using destroy() events seems not working.  Steps to reproduce :  1. Create a simple Alloy project.  2.Create a model TestUser.js    3. Copy the following code in index.js     4. Run this project    Destroy Model in Alloy doesn't seem to be working, because I get same log before and after destroy();    Log      Environment         Thanks"""
"ALOY-1505","Improvement","XML",3,"Add ability to pass cancel attribute to Option element for OptionDialog","""{quote}As a developer,  I want to be able to mark an option as being the option to use for cancelling an OptionDialog in Alloy XML,  So that I can use OptionDialog in view without dependency on controller.  {quote}    Currently, I can do this:        However, if an option is not displayed due to conditional code, then the index number will no longer be valid.    Proposed new attribute:      """
"ALOY-1510","Bug","XML",1,"Receiving ""<SearchView> is only available in Android"" when compiling tableview despite platform=""android"" attribute being present","""h2. Problem  We have a number of views with tableviews that use the SearchView component. When compiling for iOS, we receive this warning:    {code:none}  [WARN]  <SearchView> is only available in Android  [WARN]  To get rid of this warning, add platform=""""android"""" to your <SearchView> element  {code}      However, our SearchView elements already have the platform attribute set to """"android"""".    h2. Test case  {code:lang=xml|title=index.xml}  <Alloy>      <Window>          <TableView>              <SearchBar platform=""""ios""""/>              <SearchView ns=""""Ti.UI.Android"""" platform=""""android""""/>          </TableView>      </Window>  </Alloy>  {code}    h2. Logs  {code:lang=none|title=console}  [INFO] [index.xml] view processing...  [INFO]   style:      """"index.tss""""  [INFO]   view:       """"index.xml""""  [WARN] <SearchView> is only available in Android  [WARN] To get rid of this warning, add platform=""""android"""" to your <SearchView> element  [INFO]   controller: """"index.js""""  [TRACE] - Processing """"builtins"""" module...  [TRACE] - Processing """"optimizer"""" module...  [TRACE] - Processing """"compress"""" module...  [INFO]   created:    """"Resources/iphone/alloy/controllers/index.js""""  [DEBUG]   map:        """"build/map/Resources/iphone/alloy/controllers/index.js.map""""  [INFO]   created:     """"Resources/iphone/alloy/styles/index.js""""  {code}  h2. Notes  I believe the error is in commands/compile/parsers/Ti.UI.TableView.js:49. It currently reads:    {code:javascript}  if (node.getAttribute('platform') !== 'android') {  {code}    I believe it should read:    {code:javascript}  if (child.getAttribute('platform') !== 'android') {  {code}  """
"ALOY-1517","Bug","Styling",3,"UI elements are not created properly with formFactor property in style","""When I use a conditional style I know the style only applies if the conditions are met. If not, a default style will be applied. For example:    *index.xml*  {code:xml}  <Label>Hello, World</Label>  {code}    *index.tss*  {code:javascript}  """"Label[platform=ios formFactor=tablet]"""":{      color: """"red""""  }  {code}    On iPad the label will be red, but it will render as black on other devices.    But this is not the case when I’m styling a NavigationWindow for a specific platform:    *index.xml*    {code:xml}  <Alloy>      <NavigationWindow>          <Window>              <Label>Hello, World</Label>          </Window>      </NavigationWindow>  </Alloy>  {code}    *index.tss*    {code:javascript}  """"NavigationWindow[platform=ios formFactor=tablet]"""":{}  {code}    Launching the app on an iPhone, Alloy don’t create the NavigationWindow:    {code:javascript}      $.__views.index = Ti.UI.iOS.createNavigationWindow(function() {          var o = {};          Alloy.isTablet && Alloy.deepExtend(true, o, {              window: $.__views.__alloyId0,              id: """"index""""          });          return o;      }());  {code}    The app crash with the error message: *“Invalid type passed to function”*.    Why a style determines if create or not the element? The correct code could be:    {code:javascript}      $.__views.index = Ti.UI.iOS.createNavigationWindow(function() {          var o = {};          Alloy.isTablet && Alloy.deepExtend(true, o, {          });            Alloy.deepExtend(true, o, {              window: $.__views.__alloyId0,              id: """"index""""          });          return o;      }());  {code}"""
"ALOY-1512","Story","Tooling",0,"Replace Uglify with Babylon","""At the moment, Uglify has limited support of ES6 features. https://github.com/mishoo/UglifyJS2/issues/448. Consider moving to using Babylon. https://github.com/babel/babylon    """
"ALOY-1528","Bug","Widgets",2,"getWidgetDirectories does not respect theme config.json","""We have multiple themes for our Alloy/Titanium application, and each theme needs to have a different sent of dependencies.    However, dependencies set in app/themes/theme_name/config.json are not checked when returning widget directories:  https://github.com/appcelerator/alloy/blob/5991de44082a492d143612cc2175b7eef30d36e6/Alloy/utils.js#L286    (For reference, this theme config.json _is_ observed when generating the CFG.js file:  https://github.com/appcelerator/alloy/blob/977a2c147e809ccd1c05d197d54828c3e7660150/Alloy/commands/compile/compilerUtils.js#L827)"""
"ALOY-1519","Improvement","XML",5,"Alloy: Support iOS 10 <RefreshControl> tag in Ti.UI.ScrollView","""We introduced the {{Ti.UI.RefreshControl}} usage in the {{Ti.UI.ScrollView}} in TIMOB-23524. It is a new iOS 10 feature we exposed to the proxy. Now we need the Alloy parser-binding to use it in the XML like we already can do with the {{Ti.UI.TableView}} and {{Ti.UI.ListView}}."""
"ALOY-1520","Bug","Tooling",3,"Replace Ti.Ui.iPhone with Ti.Ui.iOS in Alloy","""Since 5.4.0.GA we facing a lot of warnings messages because Alloy using Ti.iPhone namespace, I just replaced it with Ti.IOS    PR: https://github.com/appcelerator/alloy/pull/795"""
"ALOY-1526","Bug","Tooling",3,"Special text property value is not parsed correctly","""In the new version we found an error... We get a compiler error. This is caused in the XML file by     text=""""#js:dtgL('report46')""""    Fun fact when i build the project via command line : ti build —platform ios    it works... so it has to be something in the Studio itsself"""
"ALOY-1524","Story","Tooling",5,"Replace wrench with fs-extra","""Alloy uses {{wrench.js}} extensively throughout its code base, however the module have been  deprecated. We should replace it with another module to do filesystem operations, i.e. fs-extra."""
"ALOY-1523","Bug","Runtime",8,"Alloy uses old require-paths with new require-behavior","""We introduced an updated require-handling in Titanium 6 that matches the full NodeJS specs for handling all kind of files and data structures. Although we are save for older require-paths, we should update the Alloy-internal require-calls as well. Example log:    It will only be shown in the DEBUG log-level, but adjusting it internally would be the cleanest way here. Thx!"""
"ALOY-1530","Improvement","Tooling",3,"Alloy: Support multiple restrict files","""ALOY-1216 is a PR to allow compile only one specific file.  This PR supports compiling several specific files.    example:      """
"ALOY-1533","Improvement","Runtime",0,"Upgrade underscore.js to version 1.8.3","""Upgrade underscore.js to version 1.8.3 from the current version of 1.6.0.    Community PR: https://github.com/appcelerator/alloy/pull/700"""
"ALOY-1534","Improvement","Builtins",1,"Add support for Backbone 1.3.3 and Underscore 1.8.3","""Currently Alloy uses backbone 0.9.2 as default, and there is an ability to upgrade to 1.1.2 through the config.json as per documentation: [https://wiki.appcelerator.org/display/guides2/Alloy+Backbone+Migration].     However, the current release of backbone is 1.3.3. There should be support for this version in Alloy too.    And I assume it wouldn't hurt updating the default backbone version either, but I guess thats a breaking change and perhaps another ticket. """
"ALOY-1535","Bug","XML",1,"iOS: Warning message thrown when using <View> in <AlertDialog> (Android-only)","""When using the {{<View>}} tag in {{<AlertDialog}} on iOS, a warning is thrown, also the platform is set to Android. """
"ALOY-1536","Bug","Titanium SDK",1,"iPad Splash Screen Orientation - No Landscape","""This one is pretty simple. Create a generic new alloy project and, and edit the trap.xml file like so:    <enable-launch-screen-storyboard>false</enable-launch-screen-storyboard>  ...  <key>UISupportedInterfaceOrientations~ipad</key>    <array>      <string>UIInterfaceOrientationLandscapeRight</string>    </array>    LandscapeLeft won't work either. When the app is launched, the splash screen will appear in portrait mode."""
"ALOY-1537","Improvement","Tooling",5,"Update uglify-js and moment.js","""Ran {{nsp check}}, two alloy dependencies, {{uglify-js@2.4.15}} and {{moment@2.10.6}}, are returning {{Regular Expression Denial of Service}}.     This ticket is to track the progress of updating uglify-js from 2.4.15 to *2.6.1* and moment.js from 2.10.6 to *2.17.1*.    Note:   ECMAScript 5.1 doesn't permit newline characters in string literals. It requires {{\n}}. According to [903|https://github.com/mishoo/UglifyJS2/pull/903] Uglify also doesn't like it in versions 2.6.2 and after, thus failed some of the test apps. For now, updating to uglify-js@2.6.1 should correct nsp errors. We need to look into alloy compiler if we need a major uglify upgrade. """
"ALOY-1541","Bug","XML",3,"XML: Require LeftNavButtons/RightNavButtons not working","""Require LeftNavButton/RightNavButton working while LeftNavButtons/RightNavButtons not working    example  {code:xml|title=index.xml}  <Alloy>   <NavigationWindow>    <Window class=""""container"""">     <Require src=""""navbar"""" />     <Label id=""""label"""">Hello, World</Label>    </Window>   </NavigationWindow>  </Alloy>  {code}    {code:xml|title=navbar.xml}  <Alloy>   <LeftNavButtons>    <Button>Btn1</Button>    <Button>Btn2</Button>   </LeftNavButtons>  </Alloy>  {code}    compiled code problem  {code:javascript|title=Resources/iphone/alloy/controllers/navbar.js}      var leftNavButtons = [];      $.__views.__alloyId2 = Ti.UI.createButton({          title: """"aaa"""",          id: """"__alloyId2""""      });      leftNavButtons.push($.__views.__alloyId2);      $.__views.__alloyId3 = Ti.UI.createButton({          title: """"bbb"""",          id: """"__alloyId3""""      });      leftNavButtons.push($.__views.__alloyId3);      // >>>>> THIS IS THE ERROR <<<<< //      void 0.leftNavButtons = leftNavButtons;      $.__views.navbar && $.addTopLevelView($.__views.navbar);  {code}    while LeftNavButton compile to  {code:javascript|title=Resources/iphone/alloy/controllers/navbar.js}      $.__views.__alloyId2 = Ti.UI.createButton({          title: """"Btn1"""",          id: """"__alloyId2""""      });      __parentSymbol.leftNavButton = $.__views.__alloyId2;      $.__views.navbar && $.addTopLevelView($.__views.navbar);  {code}"""
"ALOY-1544","Improvement","Tooling",3,"Add optimizingExeptions option to config.json","""This PR make you can skip the file when doing an optimization manually.  There are no reason to optimize js files which doesn't depends on alloy.    Community PR : https://github.com/appcelerator/alloy/pull/818"""
"ALOY-1543","Improvement","Widgets",3,"Widget files are optimized twice during compilation","""When MVC generation step of alloy compile, widget files are optimized.  So there is no reason to optimize widget file on OPTIMIZING step again.    Community PR: https://github.com/appcelerator/alloy/pull/805"""
"ALOY-1550","Bug","Samples & Templates",1,"Alloy: Update gitignore for default project","""When creating a new alloy project with the open source {{ti}} tool it uses the .gitignore from {{Alloy/template/gitignore.txt}}. This file isn't in sync with {{alloy/templates/default/.gitignore}} yet.    PR: https://github.com/appcelerator/alloy/pull/821    *Reproduce:*        """
"ALOY-1557","Improvement","Documentation",1,"Alloy: Keep Changelog up to date","""It would be great if the changelog will be updated periodically to reflect the changes:  https://github.com/appcelerator/alloy/blob/master/CHANGELOG.md    If another resource exists (JIRA/Appcelerator docs link?), please link to it in this CHANGELOG.md file and remove the rest of its contents so that the changelog can be found on a single resource only."""
"ALOY-1564","Bug","Tooling",3,"Broken Require data-binding event translation. Custom events on Required views are being applied to the required root View instead of the required Controller itself, causing an error.","""When requiring a view with data binding, for instance:          the following errors is firing:    {code}  [ERROR] :  Script Error {  [ERROR] :      column = 18;  [ERROR] :      line = 40;  [ERROR] :      message = """"undefined is not a function (evaluating '__alloyId146.getViewEx({\n                recurse: true\n            }).on(\""""click\"""", doSomething)')"""";  [ERROR] :      stack = """"__alloyId148\ntriggerEvents\ntrigger\n_onModelEvent\ntriggerEvents\ntrigger\nset\nsuccess\n\nonload"""";  [ERROR] :  }  {code}      due to this processed code:    {code:javascript}   doSomething ? __alloyId146.getViewEx({                  recurse: true              }).on(""""click"""", doSomething) : __defers[""""__alloyId146.getViewEx({recurse:true})!click! doSomething""""] = true;  {code}    which should be:    {code:javascript}  doSomething ? __alloyId146.on(""""click"""", doSomething) : __defers[""""__alloyId146!click! doSomething""""] = true;  {code}"""
"ALOY-1569","Bug","Widgets",2,"WPATH function to match updated require-handling in Titanium 6","""This should also fix WPATH function to match updated require-handling in Titanium 6   """
"ALOY-1570","Bug","Tooling",2,"Alloy: exports.baseController does not work since 1.10.0 (Regression)","""since 1.10.0 exports.baseController = 'name' does not work.    I attached simple project with three controllers   * Base  * BasedOnBase with exports.baseController = 'base' in js  * BasedOnBaseXML with <Alloy baseController=""""Base""""> in xml    With Alloy 1.9.11 I got correct result in both cases:      but with Alloy 1.10.x I get correct code only for  BasedOnBaseXML    for BasedOnBase I get:  """
"ALOY-1572","Bug","Tooling",2,"Alloy doesn't compile external app.js","""If your Alloy project has an `app.js` in a subdirectory (example: `lib/app.js`), it is not compiled.    So, if you have a pre-processor constant like `OS_IOS` or `OS_ANDROID` in this file,  the result is a runtime error because no var defined `OS_IOS` is found.    *This is a critical issue, because Alloy produces a broken app!*    PR: https://github.com/appcelerator/alloy/pull/836"""
"ALOY-1574","Bug","Tooling",5,"Unable to use ES6 import/exports in alloy controllers due to bad code generation","""If you add imports or exports to an alloy controller, we can now parse the code and handle it in our use of babel/babylon instead of uglify. BUT, we don't """"hoist"""" the imports/exports to the top of the generated code, so it can become embedded underneath a function which is invalid ES6 code. imports and exports must be """"moved"""" up to the global top-level or else the code is invalid.    i.e.    On a related note, we don't really """"handle"""" ES6 imports/exports anyways down the line, but that's another ticket we can address in titanium CLI/build to just use babel transpilation to generate requires out of them (until the wider JS community has settled how to handle module vs script difference and imports/exports)"""
"ALOY-1575","Improvement","XML",0,"Allow Android to use Ti.UI.RefreshControl as well","""We added refresh-control for Android in TIMOB-1072, but we also need Android to use the Alloy <RefreshControl> tag."""
"ALOY-1579","New Feature","XML",3,"Support Titanium.UI.Android.DrawerLayout","""https://jira.appcelerator.org/browse/TIMOB-15910    Usage   """
"ALOY-1578","Improvement","XML",2,"Move Ti.UI.iOS.Toolbar to Ti.UI.Toolbar","""Yordan PR: https://github.com/appcelerator/alloy/pull/841  Additional code changes are needed."""
"ALOY-1592","Improvement","Builtins",3,"Builtins: Reimplement measurement by convertUnits","""Reimplementing the measurement built-ins. PR: https://github.com/appcelerator/alloy/pull/668"""
"ALOY-1591","New Feature","Tooling",0,"Transpile Alloy source to allow platform-independent ES6 / ES7 usage","""We added Babel transpiling for classic apps in TIMOB-24610. In order to use it in Alloy as well, the Alloy build needs to be updated to properly use it as well. As we had some issues with minification after updating our tooling recently, we need to ensure this won't happen again."""
"ALOY-1596","Bug","Samples & Templates",3,"Mobileweb assets copied on alloy new ","""h5.Description    Similar to ALOY-1322, mobileweb assets are still being copied when creating a new alloy app.  There's a lot more mentions of mobileweb in the test suite than blackberry I believe so not sure simple this would be, is it actually more involved that just removing the platform/mobileweb folder? [~fmiao] any recommendations?    h5.Steps to reproduce    # {{appc new -t titanium -n mwassets --id com.foo}}  # {{ls mwassets/app/assets/}}    h5.Actual    mobileweb assets are there    h5.Expected    No mobileweb assets"""
"ALOY-1597","Improvement","Tooling",5,"Use babel-code-frame to provide context when failing to parse code","""h5.Description    Currently when we are parsing files if we hit a parser error then we output an error that isn't super helpful, it contains an line/column numbers but it would be a much better dev experience if we could show the code using babel-code-frame. We could also expand this to xml/tss parsing errors if the modules we use give us the locations in an easily consumable way    {code: title=current}  [ERROR] Error generating AST for """"/Users/eharris/Documents/projects/repotest/apps/hyperloop-examples/app/controllers/index.js""""  [ERROR] Unexpected token (1:5)  [ERROR] position 5  """
"ALOY-1599","Bug","Models",1,"ALLOY: Model Data binding problem with the first upper case in the model src","""There is a problem with code generated for Simple Data Binding with the first upper case letter in model name.    I have two models defined:  app/models/book.js  app/models/Task.js    I expect that following XMLs will produce the same code:  {code:xml}  <Alloy>   <Model src=""""book""""/>   <Label>{book.name}</Label>  </Alloy>  {code}  {code:xml}  <Alloy>   <Model src=""""Task""""/>   <Label>{Task.name}</Label>  </Alloy>  {code}      But in the first case it is correct:  {code:javascript}   Alloy.Models.instance('book');     $.__views.Book = Ti.UI.createLabel({ id: """"Book"""" });   $.__views.Book && $.addTopLevelView($.__views.Book);   var __alloyId2 = function () {    Alloy['Models']['book'].__transform = _.isFunction(Alloy['Models']['book'].transform) ? Alloy['Models']['book'].transform() : Alloy['Models']['book'].toJSON();$.Book.text = Alloy['Models']['book']['__transform']['name'];   };Alloy['Models']['book'].on('fetch change destroy', __alloyId2);exports.destroy = function () {    Alloy['Models']['book'] && Alloy['Models']['book'].off('fetch change destroy', __alloyId2);   };  {code}    and in the second case it is invalid:  {code:javascript}   $.__views.Task = Ti.UI.createLabel({ text: $model.__transform.Task.name, id: """"Task"""" });   $.__views.Task && $.addTopLevelView($.__views.Task);  {code}    and I get error $model.__transform is undefined"""
"ALOY-1602","Improvement","Tooling",1,"Avoid some global variables to be only available in parent controller.","""Quote from [Github|https://github.com/appcelerator/alloy/pull/859]:  {quote}  I don't understand why it is necessary to remove """"$model"""", """"__parentSymbol"""" or """"__itemTemplate"""" from the """"arguments"""" variable.    This is causing issues when passing """"$model"""" for example to a controller which is inheriting from another controller as per Alloy Controller Inheritance documentation (http://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Controllers-section-src-34636384_AlloyControllers-Inheritance).    If we delete it from there, only the parent will have """"$model"""" properly set but the child controller won't as it's deleted from """"arguments"""".    Another option would be to run """"__processArg()"""" before calling the parent controller but this would mean only the child controller has `$model` properly set, it will be `null` for the parent one.    In order to reproduce:  # index.js  Alloy.createController('child', \{ $model: aBackboneModelObject \});    # parent.js  console.log(_.isNull($model)); // always return false  ...    # child.js  exports.baseController = """"parent"""";  console.log(_.isNull($model)); // always return true    {quote}"""
"ALOY-1603","Improvement","Builtins",1,"Update Moment.js to version 2.21.0","""According to the new updates such as backbone.js and underscore.js in Appcelerator CLI 7.0.2, we should also update Moment.js from version 2.16.0 to version 2.20.1"""
"ALOY-1607","Bug","Tooling",1,"Latest underscore version is breaking removeListener method in BaseController.js","""Latest underscore version (1.8.3) used in Alloy 1.11.0 causes an error using *$.removeListener* method.    https://github.com/appcelerator/alloy/blob/2a25b1d50fe22d3f5c4f423a6027e1c1d7748b88/Alloy/lib/alloy/controllers/BaseController.js#L496    I don't know why Appc Team use underscore inside BaseController.js instead use built in prototype functions like 'forEach'. In fact bump to latest underscore version is breaking the normal usage of `$.removeListener`method and this is why:    BaseController.js          What happens in the underscore 1.8.3 version *_.each* method?  Well, it iterates in the array using a *for*, `undefined` values included.  If *event* is undefined when *event.view.removeEventListener(event.type, event.handler);* it fails because *view* isn't in event    {color:red}[ERROR] Error catched: Cannot read property 'view' of undefined{color}        What happens in the oldest underscore 1.6.0 version *_.each* method?  Well, it checks if *forEach* method is present in `Array.prototype` and uses it. This method skipes `undefined`values.          Use case in Titanium:              How to solve:    How you can solve this? So easy...    First way:    Change _.each for forEach          Second way:    Adding a simple check in the if...        As Konstantin Bueschel commented a way to avoid this undefined holes inside arrays is using *splice* instead *delete*    *self.__events.splice(index, 1);*"""
"ALOY-1609","Improvement","Samples & Templates",1,"Add alloy.js plugin file to .gitignore","""Every time the alloy version changes, the alloy.js plugin file inside the plugin folder changes too. This pollutes git and a default procedure is to remove the file from git alltogether.    This is discussed in a recent kitchensink PR https://github.com/appcelerator/kitchensink-v2/pull/31#pullrequestreview-101563655 by [~hknoechel], [~eharris] and me. """
"ALOY-1615","Improvement","Samples & Templates|XML",1,"Audioplayer cannot be created from Alloy without specifying ns property","""When creating an audioplayer from alloy this should work:        But it doesn't, the {{ns}} property needs to be specified as such:        it would be great if this can be fixed/improved so the {{ns}} property doesn't need to be specified"""
"ALOY-1620","Bug","Tooling",1,"Fix new Buffer deprecation warnings","""h5.Description    Node 10 produces a deprecation warning when the {{new Buffer}} constructor is used. See https://nodesource.com/blog/understanding-the-buffer-deprecation-in-node-js-10/ if you're curious    In most cases I believe the most appropriate swap for us to do is turn {{new Buffer}} into {{Buffer.from}}    There is one instance in the alloy code https://github.com/appcelerator/alloy/search?q=%22new+Buffer%22&unscoped_q=%22new+Buffer%22, it might not show up when alloy is ran however as code under {{node_modules}} will not throw the buffer deprecation warning    We might also wish to update eslint-config-axway to include the {{no-buffer-constructor}} rule    Steps to reproduce to be added as replacement happens"""
"ALOY-1621","Improvement","XML",3,"Move NavigationWindow API from Ti.UI.iOS to Ti.UI (parity)","""We are moving the Ti.UI.iOS.NavigationWindow to the cross-platform Ti.UI namespace, for parity with Android and Windows. Related tickets:  - Android: TIMOB-24582  - Windows: TIMOB-25537  - iOS: TIMOB-26060    For that, we also need to open the {{<NavigationWindow>}} API for other platforms. Right now, it is only accessible from iOS. This is planned to happen in the SDK 7.4.0 timeframe, with a CLI minor-release that includes a new Alloy version with this fix."""
"ALOY-1626","Bug","Tooling",1,"Alloy: Missing plugins/ directory causes cloned app-projects to fail","""As part of ALOY-1609 we ignored the {{plugins/ti.alloy}} directory to prevent some git-glitches around the hook. Unfortunately that caused a regression that causes developers that clone other apps (like from GitHub) to see the following error because the directory is missing:    We instead need to revert the change and figure out why the hook is rewritten across Alloy versions."""
"ALOY-1631","Improvement","Themes",3,"Define theme from CLI","""From [documentation|https://docs.appcelerator.com/platform/latest/#!/guide/Alloy_Themes]  {quote}To use a theme, add it to your Alloy project's config.json file with """"theme"""" as the key and the name of the theme folder as the value{quote}      For my application I need to apply different themes for customers, so it would be nice to have ability to define theme from command line.  """
"ALOY-1638","Bug","Themes",3,"Theme is ""null"" when a theme is defined in config.json","""I think it is caused by https://jira.appcelerator.org/browse/ALOY-1631.    If no theme is defined in the cli, alloy will be called with theses args:      theme with be a string with """"null"""" inside.    In this file https://github.com/appcelerator/alloy/blob/master/Alloy/commands/compile/compilerUtils.js#L904,  we should check if theme is null or a string """"null"""".          ----        config.json        In 1.13.4:         In 1.13.2, theme is defined:                                                                                                                                      """
"ALOY-1641","Bug","Tooling",3,"iOS: TabbedBar usage on lower than SDK 8 is broken","""h5.Description    https://github.com/appcelerator/alloy/pull/918 was bad and was missing several requires, this was not exposed through either eslint or the tests although it should have been (and I should have realised how bad I borked anyways)    h5.Steps to reproduce    1. Build kitchensink-v2 with alloy 1.13.6 and sdk 7.5.0    h5.Actual        h5.Expected    It should work"""
"ALOY-1686","Bug","Models",8,"Alloy: App crashes due to context used when accessing Ti.Database API","""The current master is broken due to changes in the Obj-C JSCore interface (TIMOB-26038):    Specifically, changes in {{Ti.Database}} seem to have caused this issues. It was triggered by Alloy models which use Backbone in the background which uses Ti.Database in the background.    To reproduce, simply create a new Alloy app and create a model as documented in the docs. For the core-team: This is also reproducible in the app you guys have access to.    *EDIT*: After investigating this, it seems like [this selector|https://github.com/appcelerator/titanium_mobile/pull/10381/files#diff-d0e600e43c92d0fe06ffee452771f44cR125] is causing the issues as it's referenced in the sql.js to get the field from the result-set at the specified index."""
"ALOY-1737","Improvement","Runtime",1,"Alloy: ListView dataBinding creates deprecated setItems call","""When using Alloy ListView databinding it will produce code with  and therefore produce a """"using deprecated setter"""" warning:    https://github.com/appcelerator/alloy/blob/6c311743af90da438f9c30bfdbe29275247daa51/Alloy/commands/compile/parsers/Ti.UI.ListSection.js#L163    """
