"issuekey","type","components","storypoint","title","description_text"
"STL-450","Improvement","Burrow EVM|Design",1,"Define Burrow-EVM transaction receipts","""After a transaction is executed, additional “substate” information should be stored about the transaction execution including:   * Return Value from the EVM (see below).   * Any logs that were produced (see below).   * The address of the contract that was created, if applicable.   * Any other information that can be stored from: [https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactionreceipt]    This task should determine what information needs to be stored in the transaction receipts and define how the receipts will be stored so they can be searched and indexed inefficiently."""
"STL-449","Improvement","Burrow EVM",3,"Implement EVM permissions","""Implement the permissions model defined in STL-448"""
"STL-448","Improvement","Burrow EVM",2,"Design EVM permissioning model","""Design a model for setting Burrow-EVM account permissions within Sawtooth that can be integrated with the Burrow-EVM permission model (i.e., the code that already exists within the Burrow-EVM that is currently turned off). Check with the Burrow team to see if this scheme has changed in v0.17"""
"STL-471","Bug","REST API|Supply_Chain",2,"Debug post to batches&wait=<X> not returning promptly for the SupplyChain client","""When the supplychain client posts with a wait parameter to the REST API batches it does not return untill the time out expires even though the batch commits.          Details from the Slack chat about the issue:         ```Creating latest_validator_1 ... done  Creating latest_restapi_1 ... done  Creating latest_supplychain_unit_test_1 ... done  Attaching to latest_validator_1, sawtooth-tp_settings-default, latest_tp_supplychain_python_1, latest_restapi_1, latest_supplychain_unit_test_1  validator_1 | writing file: /etc/sawtooth/keys/validator.priv  validator_1 | writing file: /etc/sawtooth/keys/validator.pub  validator_1 | creating key directory: /root/.sawtooth/keys  validator_1 | writing file: /root/.sawtooth/keys/my_key.priv  validator_1 | writing file: /root/.sawtooth/keys/my_key.pub  validator_1 | Generated config-genesis.batch  validator_1 | Processing config-genesis.batch...  validator_1 | Generating /var/lib/sawtooth/genesis.batch  validator_1 | [00:19:01.534 INFO path] Skipping path loading from non-existent config file: /etc/sawtooth/path.toml  validator_1 | [00:19:01.535 INFO validator] Skipping validator config loading from non-existent config file: /etc/sawtooth/validator.toml  validator_1 | [00:19:01.535 INFO keys] Loading signing key: /etc/sawtooth/keys/validator.priv  validator_1 | [00:19:01.537 INFO cli] config [path]: config_dir = """"/etc/sawtooth""""  validator_1 | [00:19:01.538 INFO cli] config [path]: key_dir = """"/etc/sawtooth/keys""""  validator_1 | [00:19:01.538 INFO cli] config [path]: data_dir = """"/var/lib/sawtooth""""  validator_1 | [00:19:01.538 INFO cli] config [path]: log_dir = """"/var/log/sawtooth""""  validator_1 | [00:19:01.538 WARNING cli] Network key pair is not configured, Network communications between validators will not be authenticated or encrypted.  validator_1 | [00:19:01.538 DEBUG core] database file is /var/lib/sawtooth/merkle-00.lmdb  validator_1 | [00:19:01.539 DEBUG core] state delta store file is /var/lib/sawtooth/state-deltas-00.lmdb  validator_1 | [00:19:01.541 DEBUG core] block store file is /var/lib/sawtooth/block-00.lmdb  validator_1 | [00:19:01.548 DEBUG selector_events] Using selector: ZMQSelector  validator_1 | [00:19:01.549 INFO interconnect] Listening on tcp://eth0:4004  validator_1 | [00:19:01.549 DEBUG dispatch] Added send_message function for connection ServerThread  validator_1 | [00:19:01.551 DEBUG genesis] genesis_batch_file: /var/lib/sawtooth/genesis.batch  validator_1 | [00:19:01.551 DEBUG genesis] block_chain_id: not yet specified  validator_1 | [00:19:01.551 INFO genesis] Producing genesis block from /var/lib/sawtooth/genesis.batch  validator_1 | [00:19:01.552 DEBUG genesis] Adding 1 batches  validator_1 | [00:19:01.567 DEBUG executor] no transaction processors registered for processor type sawtooth_settings: 1.0: application/protobuf  validator_1 | [00:19:01.574 INFO executor] Waiting for transaction processor (sawtooth_settings, 1.0, application/protobuf)  validator_1 | [00:19:01.611 DEBUG interconnect] ServerThread receiving TP_REGISTER_REQUEST message: 125 bytes  validator_1 | [00:19:01.617 INFO processor_handlers] registered transaction processor: connection_id=f099cda6b11521e5d8669f59dc2d227a3066ef682512d8d738e0006c91ae7aaf19b017664f2cd1ab78ffeafdb99754a5b4321cec78203a81c73b2ddf749f5679, family=sawtooth_settings, version=1.0, encoding=application/protobuf, namespaces=['000000']  validator_1 | [00:19:01.621 DEBUG interconnect] ServerThread sending TP_PROCESS_REQUEST to b'2bd9fdded71b4ba1'  validator_1 | [00:19:01.630 DEBUG interconnect] ServerThread sending TP_REGISTER_RESPONSE to b'2bd9fdded71b4ba1'  validator_1 | [00:19:01.647 DEBUG interconnect] ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes  validator_1 | [00:19:01.655 DEBUG tp_state_handlers] GET: [('000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c12840f169a04216b7', None)]  validator_1 | [00:19:01.660 DEBUG interconnect] ServerThread sending TP_STATE_GET_RESPONSE to b'2bd9fdded71b4ba1'  validator_1 | [00:19:01.676 DEBUG interconnect] ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes  validator_1 | [00:19:01.677 DEBUG tp_state_handlers] GET: [('000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c1918142591ba4e8a7', None)]  validator_1 | [00:19:01.680 DEBUG interconnect] ServerThread sending TP_STATE_GET_RESPONSE to b'2bd9fdded71b4ba1'  validator_1 | [00:19:01.683 DEBUG interconnect] ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes  validator_1 | [00:19:01.699 DEBUG tp_state_handlers] GET: [('000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c12840f169a04216b7', None)]  validator_1 | [00:19:01.704 DEBUG interconnect] ServerThread sending TP_STATE_GET_RESPONSE to b'2bd9fdded71b4ba1'  validator_1 | [00:19:01.706 DEBUG interconnect] ServerThread receiving TP_STATE_SET_REQUEST message: 293 bytes  validator_1 | [00:19:01.707 DEBUG tp_state_handlers] SET: ['000000a87cb5eafdcca6a8cde0fb0dec1400c5ab274474a6aa82c12840f169a04216b7']  validator_1 | [00:19:01.713 DEBUG interconnect] ServerThread sending TP_STATE_SET_RESPONSE to b'2bd9fdded71b4ba1'  validator_1 | [00:19:01.715 DEBUG interconnect] ServerThread receiving TP_PROCESS_RESPONSE message: 69 bytes  validator_1 | [00:19:01.720 DEBUG interconnect] message round trip: TP_PROCESS_RESPONSE 0.0964360237121582  validator_1 | [00:19:01.722 DEBUG genesis] Produced state hash 63250521e8448d4aabe007198b2be3cdf2a498c30a745514e8fc81d5a63b0d3c for genesis block.  validator_1 | [00:19:01.726 INFO genesis] Genesis block created: f57d5892(0, S:63250521, P:00000000)  validator_1 | [00:19:01.726 DEBUG chain_id_manager] writing block chain id  validator_1 | [00:19:01.727 DEBUG genesis] Deleting genesis data.  validator_1 | [00:19:01.727 DEBUG selector_events] Using selector: ZMQSelector  validator_1 | [00:19:01.728 INFO interconnect] Listening on tcp://eth0:8800  validator_1 | [00:19:01.728 DEBUG dispatch] Added send_message function for connection ServerThread  validator_1 | [00:19:01.732 INFO chain] Chain controller initialized with chain head: f57d5892(0, S:63250521, P:00000000)  validator_1 | [00:19:01.734 INFO publisher] Now building on top of block: f57d5892(0, S:63250521, P:00000000)  validator_1 | [00:19:01.891 DEBUG interconnect] ServerThread receiving TP_REGISTER_REQUEST message: 144 bytes  validator_1 | [00:19:01.893 INFO processor_handlers] registered transaction processor: connection_id=cb5834ba71895c24d3883423cc71365b2b55ef2c2ab01cda03cc3ca51d3efc1fb4d40ff658c3557628e4b4d065e6422c4547ebe030dee300cf1d58c0dd7e9d5e, family=sawtooth_supplychain, version=0.5, encoding=application/protobuf, namespaces=['160343', '466f14', '8728e8']  validator_1 | [00:19:01.893 DEBUG interconnect] ServerThread sending TP_REGISTER_RESPONSE to b'763b0695f1394257'  tp_supplychain_python_1 | [00:19:01.882 DEBUG selector_events] Using selector: ZMQSelector  tp_supplychain_python_1 | [00:19:01.895 INFO core] register attempt: OK  sawtooth-tp_settings-default | [00:19:00 DEBUG selector_events] Using selector: ZMQSelector  restapi_1 | [00:19:01.984 DEBUG selector_events] Using selector: EpollSelector  sawtooth-tp_settings-default | [00:19:01 INFO core] register attempt: OK  sawtooth-tp_settings-default | [00:19:01 DEBUG core] received message of type: TP_PROCESS_REQUEST  restapi_1 | [00:19:01.985 INFO rest_api] Creating handlers for validator at tcp://validator:4004  restapi_1 | [00:19:01.987 INFO rest_api] Starting REST API on restapi:8080  sawtooth-tp_settings-default | [00:19:01 INFO handler] Setting setting sawtooth.settings.vote.authorized_keys changed from None to 02845303a294114701414a14dd9f3ca54be691523c94ca1074417241daa3a5ad66  supplychain_unit_test_1 | INFO:test_supplychain_integration:_agent_create: 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332  supplychain_unit_test_1 | INFO:root:agent_create 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158  supplychain_unit_test_1 | INFO:sawtooth_supplychain.client:http://restapi:8080/batches?wait=10  supplychain_unit_test_1 | INFO:requests.packages.urllib3.connectionpool:Starting new HTTP connection (1): restapi  restapi_1 | [00:19:02.447 INFO rest_api] Request abfade: """"POST /batches?wait=10"""" from 172.18.0.6  restapi_1 | [00:19:02.448 DEBUG route_handlers] Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator  validator_1 | [00:19:02.450 DEBUG interconnect] ServerThread receiving CLIENT_BATCH_SUBMIT_REQUEST message: 1042 bytes  validator_1 | [00:19:02.454 DEBUG interconnect] ServerThread sending TP_PROCESS_REQUEST to b'763b0695f1394257'  tp_supplychain_python_1 | [00:19:02.455 DEBUG core] received message of type: TP_PROCESS_REQUEST  tp_supplychain_python_1 | [00:19:02.455 DEBUG handler] SupplyChainHandler.apply action: AGENT_CREATE  tp_supplychain_python_1 | [00:19:02.456 DEBUG handler] _agent_create: 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158  validator_1 | [00:19:02.457 DEBUG interconnect] ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes  validator_1 | [00:19:02.457 DEBUG tp_state_handlers] GET: [('16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158', None)]  validator_1 | [00:19:02.458 DEBUG interconnect] ServerThread sending TP_STATE_GET_RESPONSE to b'763b0695f1394257'  validator_1 | [00:19:02.461 DEBUG interconnect] ServerThread receiving TP_STATE_SET_REQUEST message: 259 bytes  validator_1 | [00:19:02.462 DEBUG tp_state_handlers] SET: ['16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158']  validator_1 | [00:19:02.464 DEBUG interconnect] ServerThread sending TP_STATE_SET_RESPONSE to b'763b0695f1394257'  validator_1 | [00:19:02.468 DEBUG interconnect] ServerThread receiving TP_PROCESS_RESPONSE message: 69 bytes  validator_1 | [00:19:02.469 DEBUG interconnect] message round trip: TP_PROCESS_RESPONSE 0.01513814926147461  validator_1 | [00:19:02.554 INFO publisher] Claimed Block: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.555 INFO publisher] Block publishing is suspended until new chain head arrives.  validator_1 | [00:19:02.555 DEBUG chain] Block received: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.556 INFO chain] Starting block validation of : 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.558 DEBUG interconnect] ServerThread sending TP_PROCESS_REQUEST to b'763b0695f1394257'  tp_supplychain_python_1 | [00:19:02.559 DEBUG core] received message of type: TP_PROCESS_REQUEST  tp_supplychain_python_1 | [00:19:02.560 DEBUG handler] SupplyChainHandler.apply action: AGENT_CREATE  tp_supplychain_python_1 | [00:19:02.561 DEBUG handler] _agent_create: 0256f9f2891a05594b932353b4e56a20bec120a7bffed83eb37dd7705587070332 16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158  validator_1 | [00:19:02.562 DEBUG interconnect] ServerThread receiving TP_STATE_GET_REQUEST message: 177 bytes  validator_1 | [00:19:02.562 DEBUG tp_state_handlers] GET: [('16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158', None)]  validator_1 | [00:19:02.563 DEBUG interconnect] ServerThread sending TP_STATE_GET_RESPONSE to b'763b0695f1394257'  validator_1 | [00:19:02.566 DEBUG interconnect] ServerThread receiving TP_STATE_SET_REQUEST message: 259 bytes  validator_1 | [00:19:02.566 DEBUG tp_state_handlers] SET: ['16034371e3ee7dcce5b5ad8fc29fa478bb337a26cc8665744a0443f6ae19e75d020158']  validator_1 | [00:19:02.567 DEBUG interconnect] ServerThread sending TP_STATE_SET_RESPONSE to b'763b0695f1394257'  validator_1 | [00:19:02.569 DEBUG interconnect] ServerThread receiving TP_PROCESS_RESPONSE message: 69 bytes  validator_1 | [00:19:02.571 INFO dev_mode_consensus] Choose new fork 641d07a6: New fork head switches consensus to DevMode  validator_1 | [00:19:02.571 INFO chain] on_block_validated: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.572 INFO chain] Chain head updated to: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.572 INFO publisher] Now building on top of block: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.575 DEBUG chain] Verify descendant blocks: 641d07a6(1, S:98a859f6, P:f57d5892) ([])  validator_1 | [00:19:02.575 DEBUG state_delta_processor] Publishing state delta from 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.575 INFO chain] Finished block validation of: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1 | [00:19:02.576 DEBUG interconnect] message round trip: TP_PROCESS_RESPONSE 0.011431694030761719  validator_1 | [00:19:12.454 DEBUG interconnect] ServerThread sending CLIENT_BATCH_SUBMIT_RESPONSE to b'3ac55e5d8d8b469d'  restapi_1 | [00:19:12.455 DEBUG route_handlers] Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK  restapi_1 | [00:19:12.457 INFO rest_api] Response abfade: 201 status, 175B size, in 10.009s  supplychain_unit_test_1 | INFO:test_supplychain_integration:\{  supplychain_unit_test_1 | """"link"""": """"http://restapi:8080/batches?id=c22a771cd7125d440f62dc4849ddfe4ca23100af7775517f635b5a436e2789516fc02691c06e793fb47057ae3276ffd1d5469c78f3f46afd8ad04718da88b332""""  supplychain_unit_test_1 | }  supplychain_unit_test_1 | .set username: root  supplychain_unit_test_1 | set url: 127.0.0.1:8080  supplychain_unit_test_1 | writing file: /root/.sawtooth/keys/root.priv  supplychain_unit_test_1 | writing file: /root/.sawtooth/keys/root.addr  supplychain_unit_test_1 |  supplychain_unit_test_1 | -------------------------------------------------------------------Removing latest_supplychain_unit_test_1 ... done  Removing latest_restapi_1 ... done  Removing sawtooth-tp_settings-default ... done  Removing latest_tp_supplychain_python_1 ... done  Removing latest_validator_1 ... done  Removing network latest_default  Add Comment Click to expand inline 131 lines    cintel [5:21 PM]   @zac-intel there you go, there are still some of my debug logs in there. I am tracking down an issue with my address generation.    mitchell-intel [5:39 PM]   Oh well, I tried    cintel [5:44 PM]   :slightly_smiling_face:    zac-intel [7:54 PM]   @cintel Everything appears to be working in these logs    [7:55]   Unless I'm missing something    [7:55]    restapi_1                | [00:19:02.447 INFO     rest_api] Request  abfade: """"POST /batches?wait=10"""" from 172.18.0.6  restapi_1                | [00:19:02.448 DEBUG    route_handlers] Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator  validator_1              | [00:19:02.450 DEBUG    interconnect] ServerThread receiving CLIENT_BATCH_SUBMIT_REQUEST message: 1042 bytes    [7:56]    validator_1              | [00:19:02.575 INFO     chain] Finished block validation of: 641d07a6(1, S:98a859f6, P:f57d5892)  validator_1              | [00:19:02.576 DEBUG    interconnect] message round trip: TP_PROCESS_RESPONSE 0.011431694030761719  validator_1              | [00:19:12.454 DEBUG    interconnect] ServerThread sending CLIENT_BATCH_SUBMIT_RESPONSE to b'3ac55e5d8d8b469d'  restapi_1                | [00:19:12.455 DEBUG    route_handlers] Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK  restapi_1                | [00:19:12.457 INFO     rest_api] Response abfade: 201 status, 175B size, in 10.009s  (edited)    [7:58]   Ah    [7:58]   I see, the response came back 10 seconds after the block was validated    cintel [8:00 PM]   yes, that is exactly what I am seeing. In these logs I submitted with http://restapi:8080/batches?wait=10    zac-intel [8:05 PM]   Works fine on master, using intkey and the sawtooth CLI    [8:07]   Although someone is sending a bizarre number of state requests    [8:07]   It's not going through the REST API    [8:09]   I guess that's just the Intkey TP doing it's thing    zac-intel [8:12 PM]   added this Plain Text snippet: Validator Logs   [03:06:21.468 DEBUG interconnect] ServerThread receiving CLIENT_BATCH_SUBMIT_REQUEST message: 3038 bytes  [03:06:21.473 DEBUG interconnect] ServerThread sending CLIENT_BATCH_SUBMIT_RESPONSE to b'f8e79be9bbca42b0'  [03:06:21.475 DEBUG interconnect] ServerThread sending TP_PROCESS_REQUEST to b'102ca0fcdc2848c8'  . . .  Add Comment Click to expand inline 23 lines    zac-intel [8:13 PM]   added this Plain Text snippet: REST API Logs   [03:06:21.465 INFO rest_api] Request a7d001: """"POST /batches"""" from 127.0.0.1  [03:06:21.466 DEBUG route_handlers] Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator  [03:06:21.477 DEBUG route_handlers] Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK  [03:06:21.477 INFO rest_api] Response a7d001: 202 status, 311B size, in 0.012s  [03:06:21.487 INFO rest_api] Request a7d0db: """"POST /batch_status?wait=10"""" from 127.0.0.1  Add Comment Click to expand inline 8 lines    zac-intel [8:14 PM]   added this Plain Text snippet: CLI Commands   $ intkey create_batch  Writing to batches.intkey...  $ sawtooth batch submit -f batches.intkey --wait 10  batches: 2, batch/sec: 48.52917729684074  All batches committed in 0.157849 sec  Add Comment    zac-intel [8:14 PM]   Let me double check and make sure the POST wait works as well    cintel [8:15 PM]   There is not wait parameter on that post in my logs it reports as 'restapi_1                | [00:19:02.447 INFO     rest_api] Request  abfade: """"POST /batches?wait=10"""" from 172.18.0.6'    [8:15]   oops I missed the 2nd post in your logs.    [8:16]   That is to batch_status though, not batches    [8:17]   an off topic question, why is batch_status a post and not a get?    zac-intel [8:17 PM]   Yes, CLI uses a wait on batch_status    [8:17]   Sam mechanism though    [8:18]   And I just did a POST manually and it worked fine    [8:18]    $ curl --request POST \  >     --header """"Content-Type: application/octet-stream"""" \  >     --data-binary @batches.intkey \  >     """"http://localhost:8080/batches?wait=10""""  \{    """"link"""": """"http://localhost:8080/batches?id=9a8d32b69d4a14ce49e40c411bdc8ed8befa966acd26a71959fde8355963d34c17fe51e9aa04a011f9bd1d1b6435c9c55637b4d248010adb94efecdf9d3b4325,5435e3cf7f9e2486fe62fed8757a36ec5426dffef010d55a2cdb053ba5df8d5b38deab0bcb8c89bda0710cd6c7dc8fff0f3ea93e81a1f6842a7243bd57e0ba95""""  }    [8:19]    [03:16:49.300 INFO     rest_api] Request  079ccf: """"POST /batches?wait=10"""" from 127.0.0.1  [03:16:49.302 DEBUG    route_handlers] Sending CLIENT_BATCH_SUBMIT_REQUEST request to validator  [03:16:49.657 DEBUG    route_handlers] Received CLIENT_BATCH_SUBMIT_RESPONSE response from validator with status OK  [03:16:49.658 INFO     rest_api] Response 079ccf: 201 status, 306B size, in 0.358s    [8:20]   Side note: /batch_status accepts both a GET and a POST    [8:20]   The GET accepts a list of ids in a comma-separated query parameter id=a,b,c    [8:21]   However, since our id's are 128 characters, and URLs top out at 2048, that limits you to requesting the status of about 15 batches at a time    cintel [8:21 PM]   got it.    zac-intel [8:21 PM]   So the POST is a work around    [8:22]   you send a JSON body [""""a"""",""""b"""",""""c""""] and you can check on as many ids as you like    [8:23]   It is semantically inaccurate though    [8:23]   Anywho, your problem is weird    [8:24]   Your TP shouldn't be able to touch the wait mechanism    [8:24]   I would pull from master and make sure you have pristine validator code    [8:25]   If that's not it, maybe something weird with Docker?    [8:25]   I dunno though, by the logs the validator is clearly just hanging out, not doing anything    [8:26]   It's not like it's getting lost in some Docker middle-man or something    cintel [8:33 PM]   yeah, I have a lot of docker wrangling going on.    [8:33]   I agree my TP should not be able to affect that mechanism.    [8:34]   I'll shoot you a link to by branch once I get it cleaned up a bit more.    zac-intel [8:36 PM]   If you want to take a look in your validator, the relevant code is here:   • https://github.com/hyperledger/sawtooth-core/blob/master/validator/sawtooth_validator/journal/block_store.py#L138   • https://github.com/hyperledger/sawtooth-core/blob/master/validator/sawtooth_validator/state/client_handlers.py#L515   • https://github.com/hyperledger/sawtooth-core/blob/master/validator/sawtooth_validator/state/client_handlers.py#L534"""
"STL-470","Task","Validator Journal",2,"Review and Update BlockValidator Batch and Transaction validation","""Remove the completeness check (that is enforced by the Completer), verify that duplicate transactions and batch checking is implemented and working correctly.                """
"STL-499","Improvement","Validator Txn Execution",3,"Update ParallelScheduler to handle explicit dependencies","""If a txn has explicit dependencies, it should first look to see if that txn is before it* in the scheduler, and then only if it is use that explicitly dependent txn as a gate on it being next transaction.    Because 'intkey workload' uses dependencies, the parallel scheduler won't work with intkey workload until this is done.    * We are relying on the completer to never allow the dependency to be after that batch with the transaction that lists the dependency."""
"STL-498","Improvement","Supply_Chain",5,"Create State Delta Subscriber","""Create a delta state subscriber that will consume state values for the SupplyChain transaction family and store them in a database.     This task involves creating the subscriber, processing the events to insert values.  This client should handle disconnects and reconnects of the validator, delta catch-up, as well as fork resolution."""
"STL-497","Improvement","Supply_Chain",3,"Define Database Schema","""Define the database schema to support State Delta Subscription for the supply chain family.  Minimally, there needs to be a table {{block}} which tracks the history of blocks:        The remaining tables should support [slowly changing dimensions type 2|https://en.wikipedia.org/wiki/Slowly_changing_dimension#Type_2:_add_new_row].  This means that the tables should include, in addition to the domain-specific fields, the following:        where id is a generated primary key, and indexes should be created on the natural key of the rows.  """
"STL-495","Improvement","Burrow EVM",2,"Implement BLOCKHASH, TIMESTAMP, and NUMBER EVM opcodes","""These opcodes currently do not work correctly. The information needed to implement them can be obtained by querying the special addresses defined by the BlockInfo transaction family."""
"STL-488","Improvement","Validator Txn Execution",3,"Write more yaml scheduler tests","""These tests should include namespace inputs and outputs, mixed sizes of batches, batches that have predecessor transactions that are valid, with subsequent transactions in a batch that fail."""
"STL-487","Improvement","Validator Txn Execution",5,"Add another run_scheduler method to yaml scheduler tester","""The order of next_transaction, set_transaction_result, finalize, and complete can vary widely, with only some being possible.  The run_scheduler method currently is greedy on next_transaction getting the possible next_transaction after each subsequent set of set_transaction_result. Another method should be written that is greedy on set_transaction_result."""
"STL-486","Improvement","Validator Txn Execution",3,"Update the ParallelScheduler to fail-fast on a batch","""Since batches are atomic, it would be preferable to not run any txns that don't need to be run. So after a txn fails, provide an INVALID_BATCH status to the TransactionExecutionResult. Provide unit-tests."""
"STL-485","Improvement","Validator Txn Execution",2,"Update yaml scheduler tester to test gets from state","""To find errors, and provide more of a guarantee that the state """"seen"""" by the txn processor is correct in the parallel case it would be preferable to while running the scheduler using the run_scheduler method on the tester, to 'get' values that were inputs for the txn and assert that they are correct. When processing the yaml, collect the valid 'set' values to be asserted when run_scheduler is called."""
"STL-484","New Feature","PoET",2,"Investigate SGX SDK Simulator","""Determine and document the design of what would be needed to remove the standalone PoET simulator and instead use the SGX SDK simulator."""
"STL-480","New Feature","PoET",2,"Create Package for IAS Proxy","""Once the PoET SGX code has been committed to the repository, the IAS proxy needs its own separate package."""
"STL-479","New Feature","PoET",3,"Create Unit Tests for IAS Client","""The IAS client, once moved to its own package, needs its own unit tests to verify that it behaves properly in the face of network errors (timeouts, HTTP error return codes, etc.)."""
"STL-478","New Feature","PoET",2,"Create Package for IAS Client","""The IAS client, because it is used by both the SGX enclave and the IAS proxy, needs to be put into its own package."""
"STL-476","Improvement","sawtooth-core|Validator Global State|Validator Txn Execution",3,"Handle txn in a predecessor's batch failing by replay of subsequent txns","""For the parallel-scheduler, If [a, b, c] are a batch and [d, e, f] are a batch and d implicitly depends on a, if a is valid, but c is invalid, d and any subsequent txns should be re-run as if 'a' hadn't been run. This will cause more txns than are in the scheduler to be run, but there should be only 1 final txn_result per txn. After this task there should be unittests and yaml based scheduler tests for this functionality and the parallel scheduler should be passing them."""
"STL-506","Bug","Validator Txn Execution",3,"Debug scheduler never becoming complete","""On AWS often, and in test_poet_smoke.yaml sometimes, block validation within the validator fails to get a complete schedule; scheduler.complete(block=True) is called and never returns."""
"STL-510","New Feature","sawtooth-core",2,"Modify App Dev Guide ubuntu section to not require root user","""The App Dev guide should not assume all commands need to be run w/root.  Instead, it should provide sudo when appropriate and run services as sawtooth and user commands as the regular user.  """
"STL-509","Bug","sawtooth CLI",1,"intkey and xo commands produce bad output without arguments","""{{docker exec -it sawtooth-client-default bash}}  {{root@bdd0cd71cfd1:/# xo}}  {{Error: invalid command: None}}  {{root@bdd0cd71cfd1:/# intkey}}  {{<_io.TextIOWrapper name='<stderr>' mode='w' encoding='ANSI_X3.4-1968'> Error: invalid command: None}}    {{It would be nice if intkey and xo would give usage messages if a required positional argument is missing.}}"""
"STL-536","Improvement","sawtooth-core",2,"Rename cli commands","""Various commands for 0.8 were added with the assumption that we  would at some point rename them for consistency across the project.  Now seems an appropriate time to pick the final names and do the  renaming.    Commands will use a '-' separator instead of '_', since this is  more consistent with Linux commands in general.    The clients commands remain largely unchanged, with intkey_jvm being  renamed to jvmsc (since it is an example of JVM smart contracts).    The client commands:  sawtooth  poet  intkey  jvmsc  xo  noop    The validator components will be prefixed with 'sawtooth-':    sawtooth-validator  sawtooth-rest-api    Transaction processors will be renamed to conform to the general  format of <family>-tp[-<lang>]. This organization is intended to  sort the CLI commands by family instead of function. The commands  become:    intkey-tp-go  intkey-tp-java  intkey-tp-javascript  intkey-tp-python  jvmsc-tp  xo-tp-go  xo-tp-javascript  xo-tp-python  noop-tp-go  supplychain-tp  poet-validator-registry-tp"""
"STL-581","Improvement","Validator Txn Execution",3,"Update the SerialScheduler to handle explicit dependencies","""After an explicit dependency fails, the scheduler should mark transactions that listed this txn as a dependency as failed, also."""
"STL-580","Improvement","Validator Txn Execution",3,"Merge parallel-scheduler branch into master branch","""Deal with merge conflicts during the process of getting the parallel-scheduler branch merged into master."""
"STL-579","Improvement","Validator Txn Execution",3,"Update the SerialScheduler to fail-fast on a batch","""No transactions after the first failed txn in a batch need to be run, so the subsequent txns should be marked as neither valid or invalid, but should not be run."""
"STL-578","Improvement","Valdator Server",2,"remove wif transcoding ","""# transparently change the internal representation so it loads wif but thereafter remains native.  or   # remove wif entirely and store raw hex to disk.   or   # Change the import/export to default to pem."""
"STL-573","Improvement","Burrow EVM",3,"Update seth to use JSON-RPC or REST-API","""The seth client currently interacts with the REST API. With the creation of the seth-rpc server, it would be nice to add support to the seth client for interacting with the seth-rpc server."""
"STL-571","Improvement","Burrow EVM",0,"Implement Sawtooth generic transaction receipts and events per design","""Decomposed"""
"STL-566","Improvement","Burrow EVM",3,"Implement key storage security for seth","""The extent of the design described in milestone 2 is probably too broad for the time allowed to complete this task in Q3 plan. A simpler version should be implemented here, or the task should be moved to Q4 and given an appropriate amount of time to complete it."""
"STL-565","Improvement","Burrow EVM",3,"Design private key storage security for seth/RPC accounts","""Both seth and the JSON-RPC depend on storing private keys to sign transactions. These keys are stored as plaintext. Encryption should be used to store these keys more securely.    Output is a design doc that describes how keys will be secured."""
"STL-564","Improvement","Burrow EVM",3,"Research and document non-standard RPC calls to support","""Output is a list of additional RPC calls added to the JSON-RPC design doc"""
"STL-563","Improvement","Burrow EVM",3,"Design Burrow-EVM event subscriptions for Solidity events","""Output is a professional design doc describing how to use Sawtooth events to support Solidity events."""
"STL-554","Improvement","sawtooth-core",5,"Design domain specific transaction submission endpoint with server side signing","""Provide the design for an endpoint which can:    * Accept domain-specific transaction content.  For example, this could be submitted in JSON.  * Create a transaction body and batch for submission  * Sign the transaction using server-side stored keys.    The design is open to method on how these keys are associated with the submitter.  Most likely, this will also require one or more authentication endpoints."""
"STL-546","Improvement","sawtooth-core",5,"Implement benchmark Transaction Processor & Workload client ","""Based on the transaction family specification, implement benchmark transaction processor. Also implement a command-line client workload generator capable of generating and submitting workload consistent with the design intent of the benchmark."""
"STL-545","Improvement","sawtooth-core",2,"Write Transaction Family Specification for Benchmark","""Write the transaction family specification for the benchmark workload selected for benchmarking activity. """
"STL-543","Improvement","Burrow EVM",2,"Add --wait flag to seth commands","""Add a --wait flag to seth commands that submit transactions which sets the wait option for the client."""
"STL-542","Improvement","Burrow EVM",2,"Add option to wait for transactions to commit in Burrow-EVM client","""The Burrow-EVM client only checks that transactions were accepted by the REST API. It does not check to see if the transaction was committed or what the error was. An argument should be added to client methods which, if set, will cause the client to block until:   1. A timeout has been reached, at which point it should return and error   2. The transaction has been committed, at which point it should return normally   3. There was a problem committing the transaction, at which point it should return a useful error    Update the integration tests to use this feature once implemented."""
"STL-541","Improvement","Burrow EVM|Go SDK",2,"Remove MustEncode() and MustDecode() from Go SDK","""Remove the MustEncode() and MustDecode() methods from the Go SDK and replace all calls with hex.EncodeToString() and hex.DecodeString() from the """"encoding/hex"""" Go library. These methods cause panics instead of handling errors gracefully, which is no longer desired. Handle the error returned from DecodeString().     """
"STL-603","Improvement","C++ SDK|Go SDK|Java SDK|Javascript SDK|Python SDK",3,"Update sdks' State classes to have a delete method","""Each sdk needs to support deletes from state. The form, similar to gets and sets, should be .delete([add1, add2, add3]).         Needs to be added to Go and Javascript at the least. """
"STL-610","Improvement","PoET",1,"Update validator registry handler to use state delete method","""[https://github.com/hyperledger/sawtooth-core/blob/master/consensus/poet/families/sawtooth_validator_registry/validator_registry/processor/handler.py#L133]    Clears state at specified address.     Instead, make use of new state delete feature. Anticipated in     [https://github.com/hyperledger/sawtooth-core/pull/718]     """
"STL-612","New Feature","Documentation",3,"Update HL overview deck","""Update/Finalize Hyperledger's Slide deck on Sawtooth"""
