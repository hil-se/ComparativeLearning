"issuekey","type","components","storypoint","title","description_text"
"EVG-6628","Improvement","legacy-ui",2,"Stop and start instances via the spawn host page","""Similar to the trash button we have currently."""
"EVG-6627","Improvement","app",2,"Stop and start instances","""Users should be able to stop/start instances via commandline. ( {{evergreen host stop <host> or evergreen host modify --stop}}). This will involve adding a new status for stopped hosts."""
"EVG-6626","Improvement","app",0,"Allow admins to set quota/limit","""Should be able to restrict the size of hosts/block devices for users, as well as the number of expirable hosts. This would be from Admin Settings and for now would apply to all users. Should consider what to do if something is lowered and users already have more than the new limit–-should this only apply to future changes? """
"EVG-6625","Improvement","legacy-ui",2,"Display modify instance type for spawn hosts","""This will probably be a drop down list in a row below updating expiration time. If the Update button is pressed and the instance isn't stopped should tell the user. This shouldn't need a modal."""
"EVG-6624","Improvement","app",2,"Modify type of spawn hosts","""This can only be done on stopped instances. This should be configurable when creating a host (host create --type <value>) or modifying a host. (host modify --type <value>)     For general context: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html]"""
"EVG-6622","Improvement","legacy-ui",2,"Display alerts on notification page","""Allow users to turn on/off alerts, and choose a delivery method."""
"EVG-6621","Improvement","app",2,"Set up alerts regarding the host.","""Alerts about the expiration of the host."""
"EVG-6620","Improvement","app",2,"Support EBS volumes for spawn hosts","""We can create/attach volumes to instances, and detach/delete volumes. Volumes must be in the same availability zone as the instance."""
"EVG-6619","Improvement","legacy-ui",2,"Display spawn host tags","""Make spawn host tags editable from the spawn host page"""
"EVG-6617","Improvement","legacy-ui",0,"Display configurable expiration","""Add configurable expiration to the Spawn hosts page (this is mostly done, need to handle the non expirable case)."""
"EVG-6616","Improvement","app",0,"Make expiration for spawn hosts configurable","""If no expiration, spawn host shouldn’t be reaped (will need to do some AWS research on how to make this happen).  Should for now impose some default limit per user (probably 1) on non-expirable hosts."""
"EVG-6612","Improvement","app",2,"The v2 distros endpoint should log to the event log","""Editing a distro from the UI logs to the event log, but logging to the v2 distros endpoint does not. They should have consistent behavior, especially because automated processes have now moved to the v2 endpoint."""
"EVG-9284","Task","platform",1,"macOS linking fails on go1.9","""https://evergreen.mongodb.com/task/grip_macos_test_27c1b78bd559da919311877940bd8e605fb473b2_19_06_11_18_27_24"""
"EVG-9281","Task","platform",1,"Handle empty build_variants_status in evergreen.py","""This [version|https://evergreen.mongodb.com/rest/v2/versions/sys_perf_cf57e33764ba12a6a30ba6b75ef2aa3ccc192a78] has an empty 'build_variants_status'. Currently the client will crash if it tries to create a version object for that version. We should fix that.  ----  As an evergreen.py user,  I want evergreen.py to handle versions with empty 'build_variants_status' values,  So that I can perform actions on those versions.  ----  AC:   * evergreen.py does not crash trying to access the above version."""
"EVG-8622","New Feature","platform",1,"invert locking model","""the current background locking model needs to get called from the pool rather than the queue because jobs can't reasonably mark themselves complete if they take longer than the lockout timer, which may lead to re-execution.    my last change to locking reduced re-execution bugs for all short running jobs by causing us to lock-ping less often, but these longer running jobs, I think."""
"EVG-6638","Problem Ticket","perf-tools",2,"bg_* test results is not displayed on graph","""h2. [bg_* test results is not displayed on graph on move_chunk_workloads on Linux Shard Lite Cluster|https://evergreen.mongodb.com/task/sys_perf_linux_shard_lite_move_chunk_workloads_ac41c65f6355f83aac70136324c98561ac79daa1_19_08_21_05_23_37]   !Screenshot from 2019-08-21 16-25-23.png|width=600!     Known that graphs for bg_* tests were in place on Apr 14, 2019 - see BF-12525"""
"EVG-6636","Build Failure","app",0,"Failure: test-units on Ubuntu 16.04 (Docker) [Evergreen @ 1a819721] (TestHostCosts)","""h2. [test-units failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_units_1a819721ac1d4cf63c57e715f24a72ff91bfa82f_19_08_20_15_29_11/0]  Host: [|https://evergreen.mongodb.com/host/container-2899237677854148294]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/1a819721ac1d4cf63c57e715f24a72ff91bfa82f]: EVG-6420 consistently load graphs with legacy trend data (#2579) | 20 Aug 19 15:29 UTC  Evergreen Subscription: ; Evergreen Event:   *TestHostCosts* - [Logs|https://evergreen.mongodb.com/test_log/5d5c223d30661554e19546b1] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_units_1a819721ac1d4cf63c57e715f24a72ff91bfa82f_19_08_20_15_29_11#TestHostCosts=fail]    """
"EVG-6642","Build Failure","perf-tools",2,"perf charts is not exposed for some sys-perf tasks","""Please note there is a workaround - graphs are exposed only if """"All"""" Thread Levels checkbox selected    h2. [out_of_cache_scanner on Linux 1-Node ReplSet 15 GB WiredTiger Cache|https://evergreen.mongodb.com/task/sys_perf_linux_1_node_15gbwtcache_out_of_cache_scanner_1a39fab6a77a6fdddc889aaffa116b3376bfc488_19_08_15_19_02_30]     h2. [industry_benchmarks/ycsb_* on Linux Shard Lite Cluster|https://evergreen.mongodb.com/task/sys_perf_linux_shard_lite_industry_benchmarks_8c49a9e761e6c829e91fac0369db470c198d43ec_19_08_16_23_03_25]   !Screenshot from 2019-09-03 11-25-38.png|thumbnail!     h2. [retryable_writes_workloads/mixed_* on M60-Like 3-Node ReplSet|https://evergreen.mongodb.com/task/sys_perf_atlas_like_M60_retryable_writes_workloads_ba434d76511a28336d23c0bb2985f5cf8164670a_19_08_02_22_05_05##mixed_insert_retry]    h2. [map_reduce_workloads/map_reduce_doc_* on Linux 3-Shard Cluster|https://evergreen.mongodb.com/task/sys_perf_linux_3_shard_map_reduce_workloads_fdc2af124b38652be53ff46ad658e86f7dd1f47a_19_08_26_18_44_08]"""
"EVG-8537","New Feature","platform",2,"allow configurable locktimeouts","""add methods to pool interface, and then manage it in the queue (no changes to the queue interface), pushing config down in SetRunner as needed.     this will make it possible to test lock timeout handling. """
"EVG-6799","Improvement","app",2,"Support multiple commits in one batch in commit queue","""It's a best practice to separate logically separate code into multiple git commits. It's clearer for readers and easier for partial backport and revert. However, commit queue only supports a single commit and encourage developers to squash commits into larger ones. If the commits are not logically relevant but dependent, they'd have to be pushed separately, one after the other gets merged. SERVER-42219 is an example. The code change broke an unnecessary unrelated test, so it depends on the test removal. Ideally these commits can be pushed together, when one of them failed, either the following commits get rejected or all get rejected as a whole."""
"EVG-6645","Bug","app",2,"The Commit queue tried to process two entries at the same time","""Two entries to the commit queue processed at the same time. One had disappeared from the queue, but was still processing and caused the next entry to fail. Here are the evergreen version in question:    Currently on the queue: 5d604db30305b93646e618b7  Was skipped: 5d6047af3627e0407809c458"""
"EVG-9028","Task","platform",2,"manger implmenetation that runs single commands (locally) over ssh","""I think this is a minor change, but might make bootstrapping easier/clearer, and looks like a functional gap in the library"""
"EVG-9243","Task","platform",2,"measure/benchmark overhead of job dispatching","""Test throughput of dispatcher with mock and and scoped job."""
"EVG-9160","Task","platform",2,"revise queue/remote/driver interfaces","""with the inverted locking model (pools take locks rather than queues,) the existing interfaces are a bit too broad and a bit duplicated. SaveStatus can be removed, etc, and it would be good to take a high level look at these interfaces to see if there's some cleanup worth doing"""
"EVG-9159","Task","platform",2,"reduce duplication in remote queue drivers ","""see if we can push remote-group and remote-single drivers into single implementations. """
"EVG-9144","Task","platform",2,"add management interface support for more advanced job cancelation ","""e.g. mark jobs complete to clear backlogs in pathological cases (we do this in the database now, but it might be nice to pave the cowpath a bit. """
"EVG-8961","Task","platform",2,"distributed in-progress job cancelation ","""after MAKE-906 (and MAKE-902) we might be able to have a better story about stopping distributed jobs. Currently, the only way to cancel an in-progress job is to identify which application server is running the job and then use the abortable queue to cancel its context (or restart that app server,) but we could have some mode to invalidate the lock and mark the job complete, which would cause it to stop executing and prevent another server from picking it up."""
"EVG-8922","Task","platform",2,"split up test, local, and remote queue implementations","""mostly to be able to get 5min make spans by splitting up the queue package which is too large """
"EVG-6651","Improvement","app",2,"subprocess.exec should have an option to add prefixes to the PATH environment variable","""The following pattern is currently only possible with the {{shell.exec}} command:    {code:yaml}  f_install_third_party:  - command: shell.exec    params:      working_dir: *a_project_root      shell: bash      script: |        set -euo pipefail        PATH=""""${workdir}/prefix/bin:$PATH"""" ./scripts/install_third_party.sh  {code}    (You could technically use {{expansions.update}} to have a script write the contents of {{""""$\{workdir\}/prefix/bin:$PATH""""}} and then specify that in {{env}} to {{subprocess.exec}} but that's way more work than the above.)"""
"EVG-6650","Improvement","app",2,"Allow absolute paths to be specified for working_dir parameter","""The {{working_dir}} parameter is prefixed with the contents of the {{$\{workdir\}}} expansion despite possibly already being an absolute path.    https://evergreen.mongodb.com/task/realm_sync_mongo_proto_ubuntu_debug_t_compile_core_patch_08de2f1d23f3bb266eb76e89bb6941d1bd74d443_5d6073d0e3c3311f0038517d_19_08_23_23_16_55        In particular, it prevents    {code:yaml}  working_dir: ${workdir}  {code}    from being specified and requires that the {{working_dir}} parameter be entirely omitted."""
"EVG-6649","Bug","app",2,"Single-host task groups scheduling subsequent tasks on same machine despite prior failure","""{{setup_group}} failing (system failure): https://evergreen.mongodb.com/version/5d605c2a7742ae5639e5ae2a  first task in task group failing (task failure): https://evergreen.mongodb.com/version/5d607711850e616ed5256b5c    My expectation was that implicit dependencies between tasks within a single-host task group would still apply."""
"EVG-6648","Task","app",2,"evergreen services closers should be ordered ","""currently they're a map internally, and they get terminated in random order, which means that clean shutdown can be hard because the database and logger could disappear before the queue terminates. """
"EVG-9278","Task","platform",2,"pail/curator should respect tokens from enviornment variables ","""`AWS_ACCESS_KEY_ID`,  `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`"""
"EVG-8958","Task","platform",2,"investigate deadlock in pail push/pull sync","""ran into problems with deadlock using the index generation job on versions of curator that use pail. """
"EVG-8490","Bug","platform",1,"amboy waituntil uses stale value for now","""While working on something that requeues jobs in the group queue, I noticed that adding WaitUntil to a job causes that job not to execute. I believe this is because the value of now is stale in the the drivers' Next() methods."""
"EVG-8382","Bug","platform",1,"TestArtifact changes not propagating when Upload called","""This is causing the artifacts to upload correctly to S3 but the metadata in the Cedar database does not have the correct bucket/key info."""
"EVG-6655","Bug","legacy-ui",1,"Evergreen waterfall page is missing variants","""Example: !Screen Shot 2019-08-26 at 5.42.54 PM.png!"""
"EVG-6653","Improvement","legacy-ui",0,"Evergreen Spawn Host Page modify option","""Currently, the only configurable detail for spawn hosts is the expiration, which is displayed in a row on the details page for the spawn host. Now that we're adding many configurable details, this should look more like a list with an overall """"Save"""" option."""
"EVG-9312","Task","platform",1,"annotating sender ","""would call message.Annotate before sending the message, and otherwise pass through to sub senders"""
"EVG-9004","Task","platform",2,"move jasper options types into their own package","""would reduce chances of circular dependencies and make it possible to simplify test infrastructure """
"EVG-8888","Task","platform",2,"amboy pool internals should get rid of workUnits as their main use case was removed","""this is tricky because maybe it causes a deadlock in context cancelation.     the work unit channel was a way that we passed a cancel func that could cancel the lock pinging in the old logging model, but now that the pools are responsible for lock pinging the current mechanism will stop a background lock pinging. """
"EVG-6658","Build Failure","app",2,"Failure: test-service on Race Detector [Evergreen @ 05e9f6e6] (TestNextTask)","""h2. [test-service failed on Race Detector|https://evergreen.mongodb.com/task/evergreen_race_detector_test_service_05e9f6e631b98ed600ba6e2ac8cca1104e70f07a_19_08_26_21_55_10/0]  Host: [ec2-52-204-110-192.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-030c575e302e9c490]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/05e9f6e631b98ed600ba6e2ac8cca1104e70f07a]: EVG-6581: log errors from host's Jasper service to Splunk (#2598) | 26 Aug 19 21:55 UTC  Evergreen Subscription: ; Evergreen Event:   *TestNextTask* - [Logs|https://evergreen.mongodb.com/test_log/5d645fc3d6d80a038ae2652f] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_service_05e9f6e631b98ed600ba6e2ac8cca1104e70f07a_19_08_26_21_55_10#TestNextTask=fail]    """
"EVG-8736","New Feature","platform",2,"Auto deploy evergreen.py to pypi on merge to master","""Right now, changes to evergreen.py must be manually pushed to pypi after being merged to master. We could update to the evergreen configuration to automatically push changes to pypi as part of mainline runs on master. In doing this, we should add checks that the project version has been updated so that we don't overwrite a preexisting version.  ----  As a DAG engineer,  I want change to evergreen.py to automatically push to pypi  So that I don't have to manually publish changes.  ----  AC:  * Changes on evergreen.py master are automatically pushed to pypi.  * A test is put in place to block merge to master if the evergreen.py version has not been updated."""
"EVG-6669","Improvement","app",2,"Handle malformed AWS DescribeInstances response","""On https://github.com/evergreen-ci/evergreen/blob/75a7439d74793fffa5fc76e182d25f140db6a0d8/cloud/ec2.go#L549  we will panic if the response is missing information.  Add validation to make sure it's complete."""
"EVG-6668","Task","app",2,"restarted system failure tasks shouldn't lead to notifications","""I just got a """"failure caused regression"""" notification for https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_dist_75a7439d74793fffa5fc76e182d25f140db6a0d8_19_08_28_15_19_17/0 which system failed, had restarted, and succeeded by the time I looked at it. No harm in the current behavior but it looks/smells bad. """
"EVG-6666","Improvement","app",2,"Put provisioning-create-host in its own queue","""With EC2 fleet, provisioning-create-host jobs take longer if Evergreen has hit its AWS API limits. This can cause other jobs to become blocked behind these jobs. We should move these to their own group queue. See {{startSystemCronJobs}} for an example."""
"EVG-6665","Improvement","app",2,"Create modify host command for spawn hosts","""To start should only be able to add/remove tags, and should only be available for spawn hosts."""
"EVG-8974","Task","platform",2,"expand certdepot interface to include practical items from evergreen's credentials ","""make the ergonomics of certdepot better. """
"EVG-6671","Improvement","app",2,"Add new endpoints for test/task details over ""x"" versions","""For Foliage, it's required to see how a task performed in some """"x"""" amount of versions starting from some version """"Y"""" (or the latest).     Can you add an endpoint that would return a json with:  {    """"version1"""" : {<task/test_object>},    """"version2"""" : {<task/test_object>},    .....    """"versionx"""" : {<task/test_object>},  }    the parameters we would need for it to be useful is:  * start_version=<version> (Optional, if not sent, use most recent  * limit=<number-of-versions> (optional, if not sent - have some default)  * variant_name=<The variant where the task """"lives""""> (maybe this could be optional and then the return structure is a bit more complex, having variants as the top elements and inside them the versions, and the task/test. If this is too hard, it's less important, normally we would do this per variant, and making this mandatory would be perfectly fine.  * task_name=mandatory - the task name we want to know about  * test name=optional (if none is sent, return the task data, otherwise - return the test data  * pagination support    Note: Another optional argument could be: skip unscheduled versions. That would allow us to make a much smaller amount of calls to evergreen. Every time we check a task/test that runs on a batch timer, we hit plenty of unscheduled versions until we actually get to that """"X"""" amount of versions with statuses."""
"EVG-6676","Bug","app",2,"Task in task group ran in order different from how it is listed in project configuration","""[The {{t_realm_sync_tests_with_simulated_txn_errors}} task|https://evergreen.mongodb.com/task/realm_sync_mongo_proto_ubuntu_release_t_realm_sync_tests_with_simulated_txn_errors_patch_8850b71cae3aeb9dbb9b49b86c394633b74bfb0d_5d67fbde2fbabe17685294c7_19_08_29_16_22_56/1] ran before [the {{t_realm_sync_tests}} task|https://evergreen.mongodb.com/task/realm_sync_mongo_proto_ubuntu_release_t_realm_sync_tests_patch_8850b71cae3aeb9dbb9b49b86c394633b74bfb0d_5d67fbde2fbabe17685294c7_19_08_29_16_22_56/0] despite them appearing in the opposite order in the list of tasks the {{tg_compile_and_test}} task group runs.    {code:yaml}  - name: tg_compile_and_test    max_hosts: 1    setup_group_can_fail_task: true    setup_group:    - command: manifest.load    - func: f_fetch_source    - func: f_create_python_virtualenv    - func: f_install_build_tools    - func: f_install_third_party    teardown_group: []    setup_task: []    teardown_task:    - func: f_post_resmoke_test    tasks:    - t_compile_core    - t_compile_sync    - t_realm_sync_tests    - t_realm_sync_tests_with_simulated_txn_errors  {code}"""
"EVG-6675","Bug","legacy-ui",1,"Why are patch names truncated?","""Look at all that blank space! So much room!     !image-2019-08-30-11-31-59-833.png!"""
"EVG-6684","Improvement","app",2,"Investigate occurrences of a task being dispatched despite a task it depends_on failing ","""*Staging Example:*     [https://evergreen-staging.corp.mongodb.com/task/mci_lint_lint_rest_data_patch_bda9f6dd6b703f6a11379786f4bf1818b94ac660_5d0a91f29dbe321e48f5137d_19_06_19_19_50_18]    *Production Example:*     [https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_rest_route_patch_b0f5cd4077aa92e65072a93a896e000a619d2809_5d66e25c2fbabe628b4f9c47_19_08_28_20_22_12]               """
"EVG-6682","New Feature","app",2,"Track commit queue length and time from submission to start and finish","""Currently we don't know what wait times for the commit queue or its length over time is. We should log both (1) the length of the queue and (2) how long each item waited in the queue before it was popped. Both could probably be logged each time an item is popped."""
"EVG-6679","Bug","app",1,"Updating the ""ref"" field for a module has no effect in a patch build","""https://evergreen.mongodb.com/version/5d6e27753066150e9e7c53ad continued to use the manifest from the base commit despite the """"modules"""" section being modified. The current behavior makes it awkward because using the {{evergreen set\-module}} to update the entry in the patch build's manifest doesn't demonstrate whether the Evergreen project configuration syntax is actually correct."""
"EVG-8662","New Feature","platform",2,"Create periodic queue group operation","""See [https://github.com/evergreen-ci/evergreen/pull/2630/files#r320848758] for the origin of this ticket.    Currently Populate* jobs in Evergreen return a function that takes as its second argument an amboy.Queue. This doesn't make sense for a queue group, since there is no single queue to pass. There should probably be a new type, amboy.QueueGroupOperation."""
"EVG-8565","New Feature","platform",2,"investigate negative duration and total times ","""[example here|https://cedar.mongodb.com/rest/v1/perf/task_id/sys_perf_linux_3_node_replSet_big_update_03c012864560206b7d8716584cbe96b4de0235cc_19_09_04_04_17_46]"""
"EVG-6688","Improvement","app",2,"Make self-tests on Docker green","""Currently js-test, test-agent, and test-command fail when run in Docker. We should either skip these tests or make them pass."""
"EVG-6686","Improvement","app",0,"Batch Fleet AWS API calls","""Fleet appears to make more API calls than the previous spot implementation. We should see if it's possible to batch more Fleet calls."""
"EVG-6693","Improvement","app",2,"Validate base commit sent to patch-file command","""It's currently possible to set {{-b}} of the {{evergreen patch-file}} command to a string that is not a commit in the repository you are patching. This can break the scheduler, because a patch without a base commit does not have the project yaml and therefore cannot sort task groups, for example. Presumably this breaks other parts of the scheduler as well, but sorting task groups happens early so is the thing that visibly breaks."""
"EVG-6692","Improvement","platform",2,"Task Groups broken for Distro Aliases","""The problem (from Brian):   # Host asks for task. There's no task in its distro queue, so we get a task from an alias queue.   # The host finishes the task and asks for another one. In the meantime, tasks have entered the distro queue.   # We iterate over the distro queue, and, having not found a task in the host's current task group, we return a different task.    We should instead check both queues for task group tasks before returning a different task."""
"EVG-9099","Task","platform",2,"Group and/or parent concept for buildlogger logs","""we need someway to group logs since logs have a flat hierarchy... or add concept of parents logs"""
"EVG-9297","Task","platform",2,"Grouping mechanism for buildlogger logs","""We need some way to group related logs, whether this is by a simple group id or parent mechanism.    """
"EVG-6703","Bug","app",2,"The project API does not provide the PR tasks","""it seems like it was supposed to be as part of the aliases with a tag:    """"alias"""":""""__github"""",  """"variant"""":""""^bazel_linux_x86_64$"""",  """"task"""":"""""""",  """"tags"""":[  """"pr_check""""  ],  """"_id"""":""""5c9e8a88850e61524f891a74""""    but this was the only result of a PR task, and we have many more (this is for mms master project)"""
"EVG-6701","Improvement","app",1,"Use cached task group order","""EVG-6441 stopped saving full projects to the database by fixing a bug where we should have been saving the parserProject. However, it appears that [calling model.LoadProjectInto|https://github.com/evergreen-ci/evergreen/commit/039d385f79e63472bd660c91afcecbe318be54ee#diff-f6193ab04bcefcdbc748b1761aa54e9dL50] in {{cacheTaskGroups}} occasionally spikes CPU on the application servers. Since we may have been caching task group order elsewhere, we should see if we can use that cached order."""
"EVG-9184","Task","platform",2,"poplar helpers for setting up test environment","""it seems like there's a bunch of things that users end up needing to do to get a poplar test set up (credentials management, etc.) and we should see if we can get nearly all of that to happen automatically using environment variables and functions which do all of the setup. """
"EVG-9126","Task","platform",2,"publish_packages is failing on rhel on master","""E.g;,    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_publish_packages_8cd307c097460f10ca0a6255a1dfcfa7f2a4ebbb_19_09_11_13_00_29    https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_70_64_bit_publish_packages_8cd307c097460f10ca0a6255a1dfcfa7f2a4ebbb_19_09_11_13_00_29    It looks like the failure started with this commit https://github.com/mongodb/curator/commit/ec14f6b0da1df67cc762fdc02e86845d05f6ea3d."""
"EVG-6727","Task","app",2,"increase frequency of cache historical stats jobs ","""run them more often so that they're less expensive.     particularly after EVG-6719 and EVG-6718"""
"EVG-6726","Task","app",2,"avoid running the scheduler so often","""in part we'll run fewer scheduler jobs when we reduce the number of distros, but in the mean time, we spend a lot of time sorting and resorting slower moving static queues, so I think that we should figure out some way to insert fewer jobs in queues with lots of pending tasks. """
"EVG-6724","Task","app",1,"fail more gracefully when task.Task.GetHistoricRuntime errors","""we're seeing a bunch of errors {{got unexpected task runtimes data points (0)}} in the logs for the {{collect-task-end-data}} job.     we should figure out why this errors, and potentially not mark the jobs as errored when it happens."""
"EVG-6721","Bug","app",2,"Provisioning Host Errors","""There were many more provisioning hosts errors than usual in the time frame from 9/10 at 9:00pm to 9/11 at 11:30am"""
"EVG-6719","Task","app",3,"optimize efficency of cache-historical-data jobs ","""See document [here|https://docs.google.com/document/d/1ThGk7NqM9Dy_Y1zvBaQZOs7k5ZoFIVq3ue89-TmllVg/edit#heading=h.4s07yeciuzvf]."""
"EVG-6717","Bug","legacy-ui",0,"Display issues with blocked tasks","""Since the new change of blocked tasks, it is really hard to read the UI.    1. scheduled tasks and blocked tasks both appear as dark grey.  2. a dependent task will be shown as scheduled while it's actually blocked (see attached)"""
"EVG-9298","Task","platform",2,"Special API endpoint for resmoke","""This end point should take in a task_id, task_name, time range (can be zero), and group_id. The task will first get the time range of the test (if tr is zero), get all logs for that test, get all logs with the given group_id (assumed to be in tags) but no test name."""
"EVG-8883","Task","platform",1,"Remove sleep from poplar benchmark case","""[here|https://github.com/evergreen-ci/poplar/blob/master/harness_case.go#L311]"""
"EVG-8839","Task","platform",2,"add indexes to support reporting queries to queue/driver_mongo.go","""currently there are queries in the reporting interface that aren't supported by indexes and should be. We need to identify what those indexes are, and add them to the setupDB function in the driver so they get built. Users should be able to opt into indexing reporting queries in the DB options.     we should also work to build these indexes in production before deploying this change (or opting into/onti it. """
"EVG-6743","Improvement","app",0,"Have a way of speeding up a long commit queue.","""When the commit queue gets long, it would be nice to be able to change the tasks that are part of the commit queue in order to speed up processing time and clear the queue. However, it appears that tasks for queue items are determined when the user submits the queue entry, so changing items in the queue isn't helpful.    Having some way to quickly drain the queue could be helpful if the queue gets really backed up. Assigning tasks when an entry reaches the head of the queue would provide a way to do that, but if there is another way of solving this that could work as well."""
"EVG-6742","Task","app",1,"Ensure required provisioning directories exist","""Current new provisioning assumes that all parent directories exist already."""
"EVG-6739","Bug","app",0,"depends on with all three asterisks fails.","""when trying to run a patch that contains a task within a variant,  if the task depends on settings are as follows:   depends_on:     - name: """"*""""       variant:  """"*""""       status: """"*""""  the variant doesn't appear in the tasks to run.  even if I check that task in the UI, it will not show up.  this is the command I ran:  evergreen patch -p mms -v evg_foliage,unit_python,unit_js,unit_java,code_health -t all -u  (the task I changed locally is within evg_foliage, it's named stat_check_init. The only change I made is to make the depends on as mentioned above)    here's a link to the patch: https://evergreen.mongodb.com/version/5d7bc47ee3c33105bdfada04    (note, I unscheduled and aborted since this would not help me test the deps, so ignore task failures here)  """
"EVG-6738","Task","app",1,"User data provisioning should have deadline ","""Currently, a host that is provisioning depends on the provisioning host job to try SSHing until it succeeds or uses up all attempts, at which point it is decommissioned and terminated. However, user data independently provisions the host and the app server will not be able to know when provisioning is done unless the agent contacts it. If user data fails (i.e. the agent never contacts the app server), the host should be terminated. Ideally the idle host termination job should catch when the host has been provisioning for too long."""
"EVG-8912","Task","platform",0,"RedirectErrorToOutput is should actually redirect stderr to stdout","""It currently does the opposite of what it's supposed to do."""
"EVG-8819","Build Failure","platform",1,"Failed: test on Windows [Grip (Logging) @ 955dc7ef] ","""h2. [test failed on Windows|https://evergreen.mongodb.com/task/grip_windows_test_955dc7efb4b47d32d77efd5793288dea9837f559_19_09_10_21_16_08/0]  Host: [ec2-34-239-153-41.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-067efdb8ef8a33581]  Project: [Grip (Logging)|https://evergreen.mongodb.com/waterfall/grip]  Commit: [diff|https://github.com/mongodb/grip/commit/955dc7efb4b47d32d77efd5793288dea9837f559]: MAKE-922: new annotating sender (#59) | 10 Sep 19 21:16 UTC  Evergreen Subscription: ; Evergreen Event:     """
"EVG-6747","Build Failure","app",2,"Statics hosts show terminated when moving between distros","""When a static host is removed from a distro its status changes to 'terminated'.  There is no way to change it back to running from the UI."""
"EVG-6745","Bug","app",2,"Regression in overriding dependencies","""EVG-5960 may have introduced a regression in EVG-2723."""
"EVG-9277","Task","platform",1,"Fix latency percentiles to use latency per operation instead of per iteration","""Currently the average latency calculated in cedar uses latency per operation, the latency percentile calculations uses latency per iteration. While neither calculation is """"incorrect"""" we should be consistent. For performance analysis, latency per operation seems to make the most sense."""
"EVG-6754","Task","app",1,"reduce size of catchup historical stats job","""max 1 day, run every 2 hours """
"EVG-6755","Improvement","app",2,"Restarting tasks does not appear to unblock dependencies","""https://evergreen.mongodb.com/task/gosre_rhel7_gotest_patch_ee12121052f4edd8375bdbe77cfae5c0923361e9_5d83a25be3c33118a00b1377_19_09_19_15_44_28 was restarted and passed, but https://evergreen.mongodb.com/task/gosre_rhel7_rpm_systemd_patch_ee12121052f4edd8375bdbe77cfae5c0923361e9_5d83a25be3c33118a00b1377_19_09_19_15_44_28 was not unblocked."""
"EVG-9218","Task","platform",2,"tail function for buildlogger","""tail last 100 lines of a log"""
"EVG-6765","Task","app",2,"Documentation for tunable scheduler ","""Document the use of new configuration options for system and project maintainers."""
"EVG-6764","Bug","app",1,"""Failed to update cached display task"" errors in production","""This is currently our most frequent error in production."""
"EVG-6761","Bug","app",2,"Errors of the form ""<task group name> does not exist in project <project>"" in the logs","""These errors occur in the logs occasionally, and I'm concerned that this might signify some kind problem in task group processing."""
"EVG-6760","Improvement","app",2,"Ensure a task outside of a group can depend on a single task within a task group","""Although it's possible to depend on an entire task group, we should ensure that it's possible to depend on task within a group, which would allow work to start when only part of work in a group has finished."""
"EVG-6759","Improvement","app",0,"Store strings instead of bytes in task document for generate.tasks","""Currently we store bytes in the task document for generate tasks. Instead of bytes, we should store strings so that someone reading the task document in the database can examine the JSON."""
"EVG-6757","Task","app",1,"turning off the tunable scheduler should delete the cached plans","""probably enough to just do removeOne operations on the distros when we go from tunable to legacy planning. """
"EVG-6756","Task","app",0,"allow DAG dispatcher without tunable scheduler","""currently you you have to change the scheduler (planner) and dispatcher as one, but there's no reason we can't use the new dispatching code with the legacy planning infrastructure, and it might be easier to gain confidence in the new dispatching code. """
"EVG-6768","Improvement","app",0,"Log Fleet response that causes an error","""When Fleet gives a response that doesn't contain an instance ID we should log the response to get more insight as to what went wrong"""
"EVG-6766","Task","app",0,"Client directory needs non-root permisssions","""The agent monitor has to put the evergreen executable in this directory so it needs to be able to write to it, but currently it is created by the user data script."""
"EVG-6774","Bug","perf-tools",1,"Perf plugin can't show expanded metrics","""Perf plugin is showing the following error. E.g. [this task|https://evergreen.mongodb.com/task/sys_perf_linux_1_node_replSet_big_update_397f0556a9e2d4fa3106d9490611b405d0e1ecf3_19_09_23_23_10_40]    """
"EVG-6773","Bug","app",2,"Aborting tasks blocks the commit queue","""If a commit queue version is unscheduled while it's running the version completion is not logged and the item is not removed from the queue."""
"EVG-8999","Task","platform",0,"Windows needs password for running service","""The CLI should provide a password flag/environment variable to allow users to run the service with a password."""
"EVG-6778","Bug","app",2,"The -d option for ""evergreen commit-queue set-module"" does not work","""The --help for """"commit-queue set-module"""" indicates that """"-d"""" or """"--description"""" flag should use the given commit message instead of the contents of the git commit, like the """"-m"""" flag in the """"commit-queue merge"""" command. It doesn't seem to work currently, however."""
"EVG-6782","Bug","app",1,"Don't dereference a nil projectRef","""[This error message|https://github.com/evergreen-ci/evergreen/blob/433ccd02f80781848e2e31636a7784fab8fa5e33/service/timeline.go#L73] dereferences a project when it's nil."""
"EVG-9161","Task","platform",0,"Splunk token should be readable from a file","""The splunk token is visible from the output of {{ps}}, so users should have an option to read from a credentials file containing the token."""
"EVG-6792","Improvement","app",0,"Refactor scheduler-related database model","""Create discrete sub-documents within the distro document to contain stage specific fields:   # finder_settings   # planner_settings   # dispatcher_settings   # host_allocator_settings (while not scheduler specific, this information is currently defined within the catch-all _planner_settings_ sub-document )"""
"EVG-6791","Bug","app",1,"commit queue patches use an outdated project config","""Because we cache projectConfig we don't update it when a commit queue patch comes to the front of the queue. It's set when the patch is created and then never updated.  If a patch is enqueued and the project config is updated in an intervening commit the old config will be used when the patch is tested."""
"EVG-6790","Task","app",1,"Host Jasper service should read splunk credentials from a file","""Jasper should instead read the token from a file."""
"EVG-6789","Bug","app",2,"Hosts can leak in create host job","""One host started successfully in the host create job but for some reason, the app server never ran the setup host job on it and the host intent document doesn't exist (e.g. it may have been removed), preventing the app server from being able to stop the agent monitor (since the IP is taken from the host document and the setup host job must run in order to get the IP addres from EC2).     It seems that if the create host job fails after the cloud manager spawns the host, the host is leaked and never terminated despite the fact that it may have actually started.    There also seems to be an issue with multiple createt host jobs running simultaneously and creating multiple hosts from a single intent host (e.g. {{evg-rhel62-large-20190927045902-7097260184595140677}})."""
"EVG-6800","Build Failure","app",2,"Failures: test-cloud on Ubuntu 16.04 (Docker) [Evergreen @ 6696fb39] (TestDockerIntegrationSuite, TestImagePull, TestGCESuite, TestCostForDuration)",""" h2. [test-cloud failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41/0] Host: [|https://evergreen.mongodb.com/host/container-5089955620005571190] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/6696fb3919b8b10b31f254a97fdaec04dd174e53]: EVG-6793: fix test-model-host | 30 Sep 19 16:04 UTC Evergreen Subscription: ; Evergreen Event:  *TestDockerIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestDockerIntegrationSuite=fail] *TestImagePull* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestImagePull=fail] *TestGCESuite* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestGCESuite=fail] *TestCostForDuration* - [Logs|https://evergreen.mongodb.com/test_log/5d923861562343280a074b3c] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_cloud_6696fb3919b8b10b31f254a97fdaec04dd174e53_19_09_30_16_04_41#TestCostForDuration=fail]  """
"EVG-6798","Improvement","app",2,"User data hosts should be terminated if the DNS name is not set","""If the setup host job does not run or it fails to get the DNS name for the host, the host should be terminated. Otherwise, the agent monitor (which will start sometime after the host is spawned) cannot be contacted at all and will repeatedly attempt to contact the server and there is no way for the app server to terminate it since it needs an IP to contact the Jasper service."""
"EVG-6797","Bug","legacy-ui",1,"New expiry selector does not provide useful information","""It allows me to pick arbitrary dates but the validation rules prevent me from picking one that's too far in the future. The old style provided this guidance by saying """"Extend by Some Valid Value"""".    The date picker should not show me dates I cannot actually select or should indicate what the valid values are in some way.     !screenshot-1.png|thumbnail! """
"EVG-6796","Improvement","app",0,"Validate instance type when creating/modifying spawn host","""Currently, the create and modify spawn host commands do not check whether the specified instance type is a valid one (even though the EC2 API should return an error in this case). It might be a good idea to have a list of allowed instance types for the EC2 provider and validate the instance type field when creating or modifying hosts."""
"EVG-6794","Improvement","app",1,"Save/log termination reason when requesting to terminate a host","""To aid in troubleshooting"""
"EVG-6793","Bug","app",1,"Host agent should no-op until the setup host job has run ","""The agent might start before the provisioning setup host job has run."""
"EVG-9042","Task","platform",0,"Rename macos distro","""The distro name should be macos-1014 since macos-1014-i7 was deleted."""
"EVG-6803","Bug","app",2,"New patch creation behavior times out queries too aggressively","""https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20error%3D%22Error%20finalizing%20patch%3A%20error%20inserting%20tasks%20for%20build%20mongodb_mongo_master_enterprise_rhel_62_64_bit_inmem_patch_15c6c085126f5d459f30191ef736c10607bea3f6_5d930d46e3c3314ac8dbf79f_19_10_01_13_30_26%3A%20context%20deadline%20exceeded%22&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1569934980&latest=1569936783&sid=1569938172.2719352    https://mongodb.slack.com/archives/C7CFR3FUP/p1569918524016800"""
"EVG-6802","Improvement","app",1,"Finalized: No is misleading in evergree commit-queue merge","""When running a patch build from the CLI the message {{Finalized: No}} means that I as the user have work to do and must go to the patch page to schedule tasks or manually update the tasks to run. When running {{evergreen commit-queue merge}} however it always states {{Finalized: No}} even if the commit is actually queued and will run without any further interaction required on my part.    It should probably just be omitted since it seems it doesn't have any meaning for a commit-queue merge?    Command line ran:        Output received:    """
"EVG-6810","Bug","app",1,"Avoid parsing project in loop for bulk task restart","""    """
"EVG-9309","Task","platform",0,"Only attempt to shlex arguments for non-remote commands","""In the case of SSH commands, it's undesirable to shlex the bash commands before they get evaluated by bash on the remote host (e.g. if you have quotation marks in a string and want to preserve them, you can't shlex the string). This would effectively parse the string twice instead of once."""
"EVG-6812","Improvement","legacy-ui",2,"Frozen webpage for task with many tests","""The BIC team has some large tasks with many tests, and we find that the task webpage often gets stuck rendering for a long time, sometimes so long that Chrome suggests killing the page (screenshot included below). We noticed that this happens only when the task has failing tests, and that it actually renders quite quickly when the task is passing. Perhaps it's searching for the failing tests to display them at the top of the """"Tests"""" panel? We could of course split up the task but thought we should flag this as this might be indicative of an issue on your end.    Here's the link to one such task (the one showed in the screenshot): https://evergreen.mongodb.com/task/sqlproxy_full_matrix__os_full_matrix~osx_mongodb_version~latest_mongodb_topology~standalone_module_tests_patch_bb2a884fe1453485ce29f489cca281276862f4e3_5d962ead61837d0adbc54a27_19_10_03_17_23_58##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522bb2a884fe1453485ce29f489cca281276862f4e3%2522%257D%255D%257D"""
"EVG-6811","Improvement","app",1,"Change switch value to d.PlannerSettings.Version within PrioritizeTasks()","""    =>                 """
"EVG-6824","Task","app",0,"Host allocator should delete credentials for uninitialized stale hosts","""{{host.RemoveStaleInitializing()}} removes all intent host documents that are stuck in initializing or building, meaning a cloud host was never successfully spawned. However, this can leave dangling host credentials in the database, which should logically also be deleted with the removed documents."""
"EVG-6823","Task","app",1,"Allow patch tasks to be specified in the same way as variants","""The {{variants}} flag allows the user to submit a comma-separated list but {{task}} does not."""
"EVG-6822","Bug","app",2,"[Tunable dispatcher] Investigate why orphaned tasks get stuck in the queue after a common depends_on task has failed","""We need to understand why these tasks became orphaned in the queue: why was """"unattainable"""" : true not set after the _depends_on_ task (evergreen_lint_lint_units_patch_65408b97b6b0f0c56eaecc4b0d2507e3a2a21145_5d9793032fbabe207dc6697e_19_10_04_18_44_20) failed?    """
"EVG-6821","Improvement","app",2,"Turn on the DAG dispatcher and Tunable Planner in production (Take 1)","""Take 1 will be  limited to """
"EVG-6820","Bug","app",1,"scheduler does not schedule all tasks of a single build at the same time","""I have a task (stat_check_init) that does the following:  1. goes over all build variants in its version  2. IF for that build variant there are tasks that are not task[""""activated""""], skip  3. IF not - create a new task within that variant that depends on all other tasks in that variant  I made sure that stat_check_init depends on all other tasks that have generate tasks in them  but I see now that sometimes, it does not create tasks for some of the variants  for example, variant thirdparty (f4c. Thirdparty Int......) usually has 3 tasks in it, unless stat_check_init creates the fourth:  did create: https://evergreen.mongodb.com/version/mms_6a6463038824dd3405491eb81a435436650ddd65  did not create: https://evergreen.mongodb.com/version/mms_83cfbc131a893b6c31cfff274e843b38e49ede24  I think this is because all tasks in f4c depend on another task.... and until that task is not done - they don't get to the activated status.    (I get the task above with the API call: """"/v2/builds/{}/tasks"""")    I clearly see that the cases in which stat_check_init doesn't create the fourth task are cases where it finishes its run BEFORE the other tasks get their schedule time (according to the event logs)"""
"EVG-6819","Task","app",1,"App server cannot connect to Jasper service on Windows hosts","""This most likely has to do with the credentials file path not being valid (i.e. it has to be specified as a native path, not a cygwin path).    The scope of this ticket only fixes new SSH provisioning, not user data provisioning."""
"EVG-6817","Improvement","app",2,"Add a delete button to a commit queue patch's patch page","""Currently if a user has a patch they want to remove from the queue they need to use the CLI. Add a way to remove a patch from the queue through the UI."""
"EVG-6816","Task","app",1,"SSH commands should be able to run without parsing","""Some commands rely on preserving the command or shell script without. By default, the current SSH invocation ({{(*host.Host).RunSSHCommand()}}) automatically splits the string using shell lexing rules."""
"EVG-6815","Task","app",1,"Host should be able to run setup script as PowerShell","""PowerShell has some requirements such as running with the extension ps1. The evergreen binary also has to check if the script being run is a regular shell script or a powershell script."""
"EVG-6829","Improvement","app",1,"Add dependencies check prior to dispatching a task via the Revised Dispatcher","""In an ideal world we should never have to check dependencies prior to dispatching a task via the _Revised Dispatcher_.     This guard maintains the desired dependency relationships (and associated task dispatch ordering) in case the independent _task_finder_ stage adds tasks with unsatisfied dependencies to the _task_queue_."""
"EVG-6828","Bug","app",0,"Rate Limit Host Creation","""Host creation is supposed only create 16 hosts at a time, but doesn't because of a bug where the count is not incremented."""
"EVG-6827","Bug","app",2,"Mark notifications as processed only once they've been dispatched","""If the event-metajob is interrupted after an event is marked processed the NewEventNotificationJob will not make it to the database and the event will not be processed by the next event-metajob run.    Assess the feasibility of moving MarkProcessed to after the event is dispatched."""
"EVG-6826","Improvement","app",1,"Add Alert for Stuck Commit Queues","""Add an alert when a queue gets stuck.    As a possible implementation, since we log when an item is enqueued, if when adding an item to a queue the item at the head of the queue has been on the queue for a """"long time"""" we know the queue is stuck and can trigger a Splunk alert."""
"EVG-6825","Bug","app",2,"Tasks specified in depends_on not being respected","""I ran the following command manually    """"evergreen patch -p ops-manager-kubernetes -t all -v all""""    I then removed all of the tasks I didn't want to run. The resulting run didn't respect the order based on the """"depends_on"""" field. The tasks still appeared in the depends on section, but they weren't run beforehand.    I experienced the same behaviour on multiple attempts.    Sample: [https://evergreen.mongodb.com/version/5d9b46ed2fbabe301b7435f7]"""
"EVG-8579","New Feature","platform",1,"move dial cedar convenience function to aviation ","""[This|https://github.com/evergreen-ci/poplar/blob/master/setup.go#L128-L166] should be in aviation so it can be used by both poplar and timber (and any other future clients of cedar)."""
"EVG-6834","Bug","app",2,"Missing RHEL8 artifacts","""When I spawn a host from [this task|https://evergreen.mongodb.com/version/5d9cc03de3c331217608fb52], I do not seem to get artifacts provisioned into {{/data/mci}}. Instead, I get a copy of the source code called {{source-patch-1305_mongodb-mongo-master}}."""
"EVG-6832","Bug","app",1,"Build/task outcome triggers don't work","""They have a mismatch of the event type and the object in the selectors"""
"EVG-6843","Bug","app",0,"Collect unsent notification stats for the CLI commit queue","""Add the subscriber type to the switch statement."""
"EVG-6842","Task","app",2,"Collect stats on hosts that never finish provisioning","""Hosts that are provisioned with user data will never indicate that they are running until the agent starts. If they fail to start for any reason, this should be tracked in Splunk. Currently, the idle host job will only run on hosts that managed to start the agent. More useful would be the ability to track hosts that were started in EC2 but never managed to start an agent."""
"EVG-6841","Improvement","app",2,"Create a list volumes command","""There should be a command available through the CLI (perhaps evergreen host list-volumes) that lists a user's volumes. This should include ID, size, type, and a host ID if the volume is attached to a host."""
"EVG-6840","Task","app",0,"Include provisioning type in idle host statistics","""This would be useful for tracking host utilization by provisioning type (legacy vs new)."""
"EVG-6847","Task","app",1,"Remove string buildvariants for patches","""Buildvariants should now be passed in the patch submission request (i.e. {{evergreen patch}}) as a string slice instead of string of comma-separated buildvariant names. However, users must first update their evergreen binaries, so they should be given a grace period to update before switching to the new JSON payload."""
"EVG-6844","Bug","app",2,"Fix questionable lookups of builds by revision","""https://github.com/evergreen-ci/evergreen/blob/06d4d0ebac0602152942984337de11edb3aeff00/service/version.go#L98 is definitely wrong, and there may be others"""
"EVG-9261","Task","platform",2,"fix pail ""deleteOnSync"" semantics ","""should be """"delete local if remote doesn't exist"""" rather than """"delete all after operation"""" """
"EVG-6852","Task","app",1,"Set GOCACHE to task directory","""We see static hosts running out of disk space and in most cases go cache folder is the biggest offender.  We talked to a few project owners about setting GOCACHE in their project to task's temp dir and they did it but it looks like there are more projects and it feels we're playing whack-a-mole here.    Brian and Sam said we can do this on the agent level.  Let's please set this to task's temp dir."""
"EVG-6851","Improvement","app",1,"Generate and Validate Device name","""Currently has to be specified by the user via commandline. Per Thomas' comment:    With this new struct, it should be easier to validate the device name specified by the user when attaching volumes using the Volumes field of the struct and the guidelines here: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html] (we should loop through the possibilities and assign the first device name that isn't taken!)."""
"EVG-6850","Improvement","app",0,"commit-queue support git commit specification syntax","""It would be really nice if commit-queue could take a parameter that allowed me to specify which commit to submit, a la the """"SPECIFYING REVISIONS"""" section in gitrevisions(7) man page.  Then I would be able to do something like:    And this would work even if that particular commit wasn't at the HEAD of my local tree and there were other differences in my tree compared to upstream."""
"EVG-6859","Task","app",1,"Agent deploys jobs should not wait until MaxLCT elapses to attempt redeploy","""Currently, if a deploy fails on an SSH command, it will not set the """"needs new agent"""" flag, which is used to determine if the agent still needs to be deployed. Therefore, if SSH fails (the most likely thing to fail in the job), it will have to wait until MaxLCT elapses (5 mins) before attempting to deploy again. This wastes host compute minutes and increases the likelihood that the host will be idle terminated."""
"EVG-6858","New Feature","legacy-ui",2,"Provide a way to download a subset of the logs","""Often on test timeouts the logs have hundreds of thousands of lines, but only the first few thousand or first hundred thousand are helpful. Sometimes the logs are even too long to download at all. It would be great if there were a way to download the raw logs for the first """"n"""" lines, and/or a way for the lobster view to only download the first """"n"""" lines.     CC [~jesse] and [~jason.chan]"""
"EVG-6863","Improvement","app",1,"Commit Queue doesn't allow submitting as someone else","""Currently the commit queue doesn't allow submitting a commit with someone else as the author. This breaks the worfklow we have for accepting [external pull requests|https://wiki.corp.mongodb.com/display/KERNEL/How+We+Handle+Pull+Requests] as external users can no longer be the author of any MongoDB commits. We need a way to allow specifying a different author."""
"EVG-6872","Bug","legacy-ui",1,"Cannot update host expiration date","""I would like to update my spawn host's expiration date. However, when I select a new date, I am told that the expiration date was updated to the existing expiration date (tomorrow).  !Screen Shot 2019-10-18 at 9.26.22 AM.png|width=100%!"""
"EVG-8675","New Feature","platform",1,"support streaming logs in evergreen.py","""As a DAG engineer,  I want to be able to read logs from evergreen via a stream,  so that I can iterator over long log files.  """
"EVG-6886","Improvement","app",1,"Put commit-queue diff on its own line","""    The first line of the output from git should print on its own line."""
"EVG-6885","Bug","app",2,"Apparent multiple execution of generate.tasks jobs","""Consider this task https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_sharding_ese_patch_b3b494a72f0e19d7556bee627da7ae9b79e26a03_5dadc8ef30661551b09da831_19_10_21_15_04_43. (There are many similar examples in that version.) The generator clearly finished, since it generated tasks. However, there is an error that returns early, which suggests there must have been multiple executions."""
"EVG-6884","Task","app",1,"Fix permissions on evergreen host setup","""In the setup script, {{/data}} is owned by root and all subdirectories obey its umask. Root's umask prevents setting options to give write permission to user subdirectories in other. The setup command should either not be run or should be run as the distro user."""
"EVG-6879","New Feature","app",2,"Update testresults schema to support efficient hourly and daily test stats generation ","""As an evergreen engineer,  I want testresults to contain extra fields,  So that the hourly / daily test stats aggregations can use $merge as efficiently as possible.    ----  AC:  * testresults will be amended to add the following extra fields:   ** branch (the project)   ** build_variant   ** distro   ** r (requester)   **  display_name, the task display name   ** execution_display_name, the execution task display name (can be null or missing).   ** create_time, the task create time.    ----"""
"EVG-9102","Task","platform",1,"Rename local manager","""The name is not particularly illuminating to its purpose as a thread-safe manager."""
"EVG-8965","Task","platform",0,"Remove unused lint package","""github.com/surullabs/lint is unused."""
"EVG-7049","Bug","app",1,"Windows spawnhost administrator bash misconfiguration","""When I ssh into a fresh Windows spawnhost bash emits an error    It's just one big PATH= statement.    $cat /home/Administrator/.bash_profile  PATH=/bin:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/Python38/Scripts:/cygdrive/c/Python38:/cygdrive/c/Perl64/site/bin:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program Files/Amazon/cfn-bootstrap:/cygdrive/c/ProgramData/chocolatey/bin:/cygdrive/c/Program Files/dotnet:/cygdrive/c/Program Files/Git/cmd:/cygdrive/c/Python27:/cygdrive/c/Python27/Scripts:/cygdrive/c/openssl/bin:/cygdrive/c/sasl/bin:/cygdrive/c/snmp/bin:/cygdrive/c/go/bin:/cygdrive/c/Program Files/Git/bin:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Perl64/bin:/cygdrive/c/curl/dlls:/cygdrive/c/Program Files/nodejs:/cygdrive/c/Users/Administrator/AppData/Local/Microsoft/WindowsApps:/cygdrive/c/Users/Administrator/AppData/Roaming/npm:/cygdrive/c/go/bin:/cygdrive/c/Windows/Sysnative:/home/Administrator/cli_bin    The PATH=""""..."""" needs quotes to make it all one word.  Currently there's an error printed on login and I get an incomplete PATH."""
"EVG-6887","Improvement","app",1,"Refactor BlockTaskGroupTasks in model/task_queue.go","""Refactor the updating of blocked dependencies as a batch to avoid doing many updates in a for-loop."""
"EVG-9174","Task","platform",2,"sort out Flush api on events.Recorder interface","""the implementations of flush are a bit weird"""
"EVG-8435","Bug","platform",1,"Fix recursive directory walk in pail","""Symlinks not checked"""
"EVG-6889","Improvement","app",2,"Add notifications for silent API routes","""Some of the new API routes (modify host, etc) create a job and return OK to the user because it takes too long to complete in the request. I'd like to add a way for users to indicate notification (maybe just notification=true or something) so they can get a slack message or related with any updates."""
"EVG-6895","Improvement","app",2,"evergreen host modify should update expiration on UI","""If you extend the expiration via the CLI ({{evergreen host modify --host <host> --extend <hours>}}, the spawn host modify job does not seem to actually update the expiration time in the database so the UI expiration shows the wrong expiration time."""
"EVG-6893","Improvement","app",2,"Add feature to bump a commit queue merge request to the top of the queue","""With the commit queue, the build can be broken for longer. Sometimes the Build Baron wishes to revert a commit in order to fix the build, but that commit must wait for the rest of the queue to be processed.    This feature will be a flag, which, at commit queue item submission time, will put this item at the top of the queue. Explicitly out of scope is reordering the queue in any other way or putting the new item behind the other higher-priority items.    We will not in this ticket create an authorization mechanism for this feature. Instead, we should log each time this happens so that we can audit abuses of this feature if they occur."""
"EVG-6892","Bug","app",2,"Staging hosts not marked as externally terminated","""The hosts (i-0100d98816ddbc085 and i-06167e9cabc05bd0b) were reclaimed by AWS but for some reason the host was marked as needing a new agent monitor. This started the agent monitor deploy job, which updates the LCT and prevented the external termination job from running.         The host alerting job indicated that the host was running a task for a long time but the running task was cleared before the host could be checked for external termination."""
"EVG-6891","Bug","app",2,"Logs that processes are failed to be cleaned up, but none that processes are being killed","""[~robert.guo] noted that he saw a process with pid 23571 leak between https://evergreen.mongodb.com/task/jstestfuzz_self_tests_mutational_fuzzer_master_jstestfuzz_replication_session_concurrent_patch_2a11d50c783f555d524909936efba0ceed77dcdc_5db196d0c9ec44772070ce14_19_10_24_12_19_29 and https://evergreen.mongodb.com/task/jstestfuzz_self_tests_mutational_fuzzer_v4.2_jstestfuzz_replication_continuous_stepdown_flowCtlLow_concurrent_patch_2a11d50c783f555d524909936efba0ceed77dcdc_5db190d45623437f20d415b4_19_10_24_11_53_58. When I look at the agent logs, I see https://github.com/evergreen-ci/evergreen/blob/7e3b481d4caaa0ac5ca10bcc73de1f7456443848/util/subtree_linux.go#L97 but not https://github.com/evergreen-ci/evergreen/blob/7e3b481d4caaa0ac5ca10bcc73de1f7456443848/util/subtree_linux.go#L67. Going back in time, I don't see """"Killed process"""". I went back to July and still don't see it, so I'm not sure what's going on."""
"EVG-6890","Bug","legacy-ui",2,"It is possible to enable the commit queue with no variants and tasks","""We should not create commit queue versions if there are no variants and tasks. (Validation is probably not sufficient, because a person could add variant and task regexes, but those regexes might not pick out existing variants and tasks.) If a commit queue version is created with no variants and tasks, it will block the queue, since it will never be dequeued."""
"EVG-6904","Build Failure","app",2,"Failures: test-cloud on Ubuntu 16.04 [Evergreen @ a416596a] (TestDockerIntegrationSuite, TestImagePull)",""" h2. [test-cloud failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38/0] Host: [ec2-54-160-68-104.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0c4258cf6b188d2ac] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/a416596a6789e622f901bd35894223faf0dedbc2]: EVG-6270 persist parser project by introducing a new collection (#2804) | 25 Oct 19 17:25 UTC Evergreen Subscription: ; Evergreen Event:  *TestDockerIntegrationSuite* - [Logs|https://evergreen.mongodb.com/test_log/5db332e13627e01b1ce0d64b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38#TestDockerIntegrationSuite=fail] *TestImagePull* - [Logs|https://evergreen.mongodb.com/test_log/5db332e13627e01b1ce0d64b] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38#TestImagePull=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_test_cloud_a416596a6789e622f901bd35894223faf0dedbc2_19_10_25_17_25_38/0?type=T ] """
"EVG-6903","Task","app",0,"Remove cloud manager GetSSHOptions","""This method has been replaced by {{(*host.Host).GetSSHOptions()}}."""
"EVG-6902","Task","app",0,"Remove unused Host.DispatchTime","""This field is never set anywhere so it can be removed."""
"EVG-6901","Bug","app",2,"Embedded task ordering issue","""Looking at this patch build: https://evergreen.mongodb.com/build/mongodb_mongo_master_embedded_sdk_android_x86_64_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34    The first execution of this install_dev task ran before its required prerequisite, the build_cdriver phase:    - https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_android_x86_64_embedded_sdk_install_dev_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34/0##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224403da71126ea32e37f059ce848898dfab22f720%2522%257D%255D%257D    - https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_android_x86_64_embedded_sdk_build_cdriver_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224403da71126ea32e37f059ce848898dfab22f720%2522%257D%255D%257D    Though they did run on the same machine. The restart of the install_dev task ran on a different machine:    - https://evergreen.mongodb.com/task/mongodb_mongo_master_embedded_sdk_android_x86_64_embedded_sdk_install_dev_patch_4403da71126ea32e37f059ce848898dfab22f720_5db259d632f4173e9269dbfe_19_10_25_02_12_34##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%25224403da71126ea32e37f059ce848898dfab22f720%2522%257D%255D%257D    So it seems there are some lingering dependency ordering issues. Perhaps we need to (or now can) specify dependencies among the various embedded tasks now that other evergreen issues are fixed?    While the embedded builders are probably going to be torn down, the ability to sequence dependent tasks that will run on the same machine is important to future projects to improve server build performance.    CC [~brian.samek] and [~billy.donahue]"""
"EVG-6898","Improvement","legacy-ui",2,"Use only one update button for spawn hosts","""The spawn host page currently has a separate """"Update"""" button for every type of update (RDP password, Host Expiration, etc). It would be much more intuitive/less cluttered if users could make all the updates they wanted and then have a single Update button."""
"EVG-6909","Bug","legacy-ui",2,"Sorting tests by sequence doesn't do anything","""No visible errors"""
"EVG-6906","Bug","app",1,"host.list broken for staging","""The host list command seems to be hardwired for prod"""
"EVG-8970","Task","platform",1,"OpScope message should be able to register handlers for all contexts","""Currently, the OP_SCOPE implementation requires that a handler be registered that matches the exact collection/db name currently being used. However, for some operations (e.g. {{getFreeMonitoringStatus()}}, {{buildInfo()}}), it would make more sense for commands to be able to register handlers for all contexts."""
"EVG-8949","Task","platform",0,"Fix op types","""They're of type int instead of OpType."""
"EVG-8869","Task","platform",1,"Handle service panics","""The mongorpc service starts goroutines to handle connection requests but does not have panic recovery."""
"EVG-9314","Task","platform",0,"Fix updating process info options","""Since the options were refactored, the options stored in process implementations were changed so the options are no longer stored as pointers, causing issues with returning the wrong process information."""
"EVG-9000","Task","platform",2,"better avoid reflection in performance event processing","""I did this for the events.Performance type, but we should do it for HDR    also add a """"DocumentExport"""" interface for producing a bsonx.Document to avoid needing to over-marshal documents, or use reflection, and then make the collectors a bit smarter."""
"EVG-8967","Task","platform",1,"placeholder for productionizing poplar metrics collector service","""mostly performance and robustness checks:     - event metrics export should be more safe for missing fields.  - potentially avoid copying things in the conversion from protobuf to birch.Document  - error check timestamp conversions  - testing the service (integration or otherwise.)  - summing cumulative stats (may break out into its own ticket)   - making a buffering ftdc collector"""
"EVG-8860","Task","platform",0,"Allow address to be retrieved from service","""The service has to reply to {{whatmyuri}} as part of mongo wire, which is easier if the address can be read."""
"EVG-6915","Task","app",2,"Hosts spawned by tasks never marked as running","""[This task|https://evergreen.mongodb.com/task/mms_on_prem_4.0_e2e_opsman_os_sanity_E2E_OpsManager_SanityTests_RemoteAutomation_Debian92_patch_ccfe0cff5242e683d2eb2423266526e78320dee4_5db970a432f4170a00c7525f_19_10_30_11_14_46] fails and the host (i-0f5c1d925f18ee459) was never reachable by Jasper when polling for user data done. The host should do all the steps to start up, minus starting an agent (and also maybe running the setup script).    The user data done job errors trying to contact the Jasper service, suggesting that it may not have provisioned successfully."""
"EVG-6912","Bug","app",1,"Fix test-cloud","""The fleet tests for {{GetInstanceStatuses}} fail due to caching host data and seemingly some fields not being properly populated in the mock AWS client."""
"EVG-9103","Task","platform",0,"Command reply needs constructor","""It's currently impossible to construct a commandReplyMessage struct since it's unexported."""
"EVG-8885","Task","platform",0,"Add lint to pull request tasks","""Lint is not currently tested in PRs."""
"EVG-8862","Task","platform",0,"Remove slices of pointers from messages","""Slices of pointers are currently used in two places ([here|https://github.com/tychoish/mongorpc/blob/92e26d3d5f8e011ad5a39923a04d4dcf2040fff1/mongowire/message.go#L24] and [here|https://github.com/tychoish/mongorpc/blob/92e26d3d5f8e011ad5a39923a04d4dcf2040fff1/mongowire/message.go#L69]."""
"EVG-8794","New Feature","platform",2,"New data change point detection in Cedar","""As a DAG engineer,  I'd like to evict change points before data at the tip of a metric's time series, and recalculate the change points in order to reflect the latest test data.  Such that, the change points are kept up to date.    AC:  * Hook into Cedar's event infrastructure and raise a """"new data at tip of metric XYZ"""" event for each statistic in a rollup when a new test run event is raised  * Create handler that handles these events by evicting all change points 50-10,000 (configurable) points before the tip of the time series, recalculates them, and persists them (in one transaction)  * Handler should exit gracefully, notifying cedar of success or errors to look into"""
"EVG-8726","New Feature","platform",3,"Create backstop change point bootstrapper in Cedar","""As a DAG engineer,  I'd like to have a backstop route in Cedar to reprovision its entire database with change points.  Such that, we can have an initial dataset to use, can use the functionality in other areas, and can reprovision the database if needed.    AC:  * Expose a route """"/perf/signal_processing/recalculate"""" that raises a change point reprovisioning event and then returns '200/OK'  * Add change point reprovisioning event handler to handle the raised event:    - -Block any further events in the analysis/change_points channel (however that is implemented in Cedar)-  - -Cancel any jobs related to analysis/change_points that may already be running (they should exit gracefully on their own)-  - Sequentially load time series metric by metric; use change point detector interface to generate change points for them; once new change points are acquired, evict the old ones for the metric and persist the new ones --> continue to next metric in new transaction  - Log progress and milestones appropriately  - Close out the job gracefully regardless of outcome --> log success or metric by metric exceptions as need be and finish successfully  """
"EVG-8589","New Feature","platform",3,"Add change point detector to cedar","""As a DAG engineer,  I'd like cedar to consume DAG's change point detection microservice using a nice interface.  Such that, Cedar can detect changes in its performance data.    AC:  * Cedar consumes signal-processing-microservice web service (name may change) according to following interface pseudocode:    """
"EVG-8585","New Feature","platform",2,"Revised data change point detection in Cedar ","""As a DAG engineer,  I'd like to evict change points around data being revised in a metric's time series, and recalculate the change points in order to reflect the latest test data.  Such that, the change points are kept up to date.    AC:  * Hook into Cedar's event infrastructure and raise a """"revised data at index I, version V of metric XYZ"""" event for each statistic in a rollup when a rollup statistic is being revised  * Create handler that handles these events by evicting all change points 50-10,000 (configurable) points around the tip of the time series, recalculates them, and persists them (in one transaction)  * Handler should exit gracefully, notifying cedar of success or errors to look into"""
"EVG-6918","Bug","app",1,"No instance ID in create fleet response errors","""We regularly have errors that look like this:      We should handle this case differently. It occurs frequently enough from the API that it seems like it's not actually an error."""
"EVG-6917","Bug","app",2,"Display task shows multiple dependencies but should only be one","""In https://evergreen.mongodb.com/task/mongodb_mongo_master_enterprise_rhel_62_64_bit_display_noPassthrough_patch_b78aaa49979b02b92f62f8917edc5689b5cea2c8_5dbaf338e3c3312096458c22_19_10_31_14_44_21, there is a list of dependencies which is in fact the same dependency repeated multiple times. It looks like the execution tasks correctly only display it once, but this display task shows it multiple times. I'm not sure if display tasks should have no dependencies or just one."""
"EVG-9140","Task","platform",0,"Connection handler should use context","""This is to prevent reads/writes from hanging, as well as handling service cancellation/signals."""
"EVG-6922","Bug","app",1,"Can't read gimlet error responder into error response","""When getting an error from a route (specifically noticed for CreateVolume), the body was:    ```    {      """"status"""": 400,      """"error"""": """"volume size limit 100 exceeded""""    }    ```    but trying to read this into a &gimlet.ErrorResponse{} gave the error: `problem creating volume and parsing error message: error attempting to unmarshal into *gimlet.ErrorResponse: unexpected end of JSON input`.     """
"EVG-6934","Bug","app",2,"Moving a Repo Breaks Webhooks","""EVG-6540 was supposed to allow us to use existing webhooks, such as when a repo is moved from one owner to another. It doesn't appear to be working.    [https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3D%22evergreen%22%20%22can%27t%20get%20existing%20webhook%22&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=-24h%40h&latest=now&sid=1572908025.4001655]"""
"EVG-6931","Bug","legacy-ui",2,"Malformed version configs should not break UI","""If the version config in a project's most recent config is malformed, it will cause errors when finding the last known good config for a project, which breaks all UI pages where the project context is set to that. We should safeguard against this"""
"EVG-6929","Improvement","app",1,"Cleanup ParserProject","""Assuming UseParserProject is true, go through and remove it, and potentially remove writing the config string at all."""
"EVG-6928","Task","app",1,"Use Parser Project","""Reference EVG-6270–we need to flip UseParserProject to true (and make sure this logic is right) to start using the parser project."""
"EVG-6926","New Feature","app",2,"Add a last_id field to hour / daily historical test and task collections.","""As an evergreen engineer.  I want the current daily / hourly cache historical testr aggregations to add the last processed id,  So that the $merge pipeline can take over from the current implementation .    ----  AC:  * The current pipeline using lookup add a last_id field to test stats containing the last processed test result.   * The current pipeline using lookup add a last_id field to task stats containing the last processed task.     """
"EVG-9244","Task","platform",0,"Fix linting, makefile, and synchronize process error handling","""Several packages are not being linted. There are also multiple makefile issues due to the linting changes that need to be resolved."""
"EVG-6939","Task","app",0,"Delete task_event_log collection","""It is empty and unused."""
"EVG-6935","Bug","app",2,"Trying to retrieve recent versions for a nonexistent project produces 500 error","""Getting 500 from the api for the following request:    Evergreen GET rest/v2/projects/mongo-ruby-toolchain/recent_versions failed: 500: request aborted    Info from ops-alerts channel:        The correct project name is """"mongo-ruby-driver-toolchain"""", not """"mongo-ruby-toolchain"""".    When asked to retrieve recent versions for a nonexistent project, api should return a response indicating the project does not exist rather than a 500 error."""
"EVG-9123","Task","platform",1,"Vendor dependencies","""It currently does not vendor any of its dependencies and this causes the test failures in its evergreen tasks."""
"EVG-9085","Task","platform",0,"Support different wire protocol versions","""Depending on the version sent by the shell, the wire protocol service has to respond to OP_QUERY/OP_MSG requests with OP_REPLY/OP_MSG. For example, on v4.2, the shell sends only OP_MSG. However, on v4.0, it still sends OP_QUERY which is then converted to OP_COMMAND."""
"EVG-8850","Task","platform",1,"Standardize cache pruning behavior","""Context cancellation/timeout does not gracefully stop the goroutine running the RPC service.         Each service has slightly different cache behavior. For example, the REST service handles panics while the RPC service does not. The RPC service cache pruning shouid be cancelled by a context."""
"EVG-8367","Bug","platform",0,"Header sizes incorrect for large message body size","""When sending large payloads (approx. 1mB), the header size is incorrect. It can send smaller payloads without issue (approx. 1kB)."""
"EVG-6945","Bug","app",1,"Fix Attach/Detach Volumes",""" Something is going on with volumes! Test more."""
"EVG-6943","Task","app",2,"Test provisioning on upstart and init in staging","""This is in preparation for deploying to RHEL 6.2 (uses init) and other distros like ubuntu 14.04 (uses upstart).         If this succeeds, new provisioning should be turned on for more distros using init/upstart."""
"EVG-9169","Task","platform",2,"Add service account and credentials to LDAP query for isMemberOf","""Add service account and credentials to LDAP query for isMemberOf"""
"EVG-9124","Task","platform",1,"add synchronized ftdc collector","""simple wrapper that adds locks to the collector (will also fix race detector on anser"""
"EVG-9119","Task","platform",2,"Instrument LDAP call timing","""Instrument LDAP call timing"""
"EVG-9051","Task","platform",0,"Fix linux init template","""It is missing end tags."""
"EVG-8875","Task","platform",1,"collector wrapper that handles events.Performance events","""should handle cumulative summing across events."""
"EVG-6951","Task","app",1,"document periodic builds","""it would be good to have this in the wiki"""
"EVG-6949","New Feature","app",1,"add rest route for getting projects that match tags","""add both """"give me a list of matching projects"""" and """"give me all project refs that match"""""""
"EVG-9033","Task","platform",1,"Make it possible to wrap RPC server for mongo client","""The mongo client sends some initialization requests such as isMaster and getLogs that must be handled by the server in order to begin transferring information between them. It would be good to have a convenience base server that can handle this automatically. It should also be able to do things like respond based on the shell version sent to it."""
"EVG-6958","Bug","app",2,"linux-64-amzn cannot provision hosts","""The linux-64-amzn-test and linux-64-amzn-build distros can't provision the host with user data or new SSH because of an error while curling the agent, stating: """"curl: (35) Cannot communicate securely with peer: no common encryption algorithm(s).""""    This does not occur if you curl the binary through SSH."""
"EVG-6957","Bug","app",1,"Some CLI subcommands do not obey specified configuration file ","""For example, {{evergreen host list}} will use the configuration specified in {{~/.evergreen.yml}} even if you set the config file explicitly (i.e. {{evergreen -c <conf_file> host list --mine}})"""
"EVG-6954","Bug","app",2,"rhel76-test spawn host authorized_keys is incorrect","""One spawn host (i-091488ba317364495) had its public key cut off. The cloud-init logs are unusual in that they don't show the user data script execution.    I can reproduce this on rhel70-small and rhel76-test, but not ubuntu1804-build.    One guess I have is that, given that it seems to be confined to rhel and only occurs occasionally, the awssshkey service is trying to write to the file concurrently with the user data script. Redirects might be atomic [if writes are small enough|https://linux.die.net/man/3/write]."""
"EVG-8634","New Feature","platform",1,"Add environment variables on service via CLI","""Some commonly-used environment variables are [set in systemd by default|https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Environment%20variables%20in%20spawned%20processes], but this behavior is not mirrored for older init systems (sysv, upstart). GIven that many programs implicitly rely on the presence of environment variables like HOME, it should be possible to set these values."""
"EVG-6962","Improvement","app",2,"Reduce host cycling when using evergreen.DispatcherVersionRevisedWithDependencies","""When running with _evergreen.DispatcherVersionRevisedWithDependencies_ It is possible for a single _depends_on_ task to """"block"""" a significant number (or all) the tasks present in the _task_queue_ if they are dependent on this single task.    For example, at one point every task (33 tasks) in the _archlinux-test_ _task_queue_ were """"blocked"""" from being dispatched as they all had a _depends_on_ for the same dispatched/running task:    While waiting for this _depends_on_ task to complete, the _host_allocator_ is cycling hosts for work that cannot be dispatched as the length of the _task_queue_ is a factor in determining how many hosts to provision.    We should try to minimise, and ideally avoid this scenario."""
"EVG-6961","Bug","app",1,"ubuntu1404 missing HOME environment variable","""Other distros (e.g. rhel70, ubuntu1604) were confirmed to have an agent with the HOME environment variable set. This is an issue with upstart not providing some common environment variables like $SHELL, $USER, $HOME, etc. Systemd [already provides HOME as an environment variable|https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Environment%20variables%20in%20spawned%20processes].    These can probably be pulled from {{/etc/passwd}}."""
"EVG-6968","Bug","app",2,"amazon1-linux distros do not have /usr/local/bin in PATH","""The amazon1-linux distros run on a very old version of upstart (0.6.5, released in 2010). This means that it does not have the setuid stanza (added in v1.4.3). This is not an issue on other distros (e.g. ubuntu12/14), which have a more recent version of upstart."""
"EVG-6967","Bug","app",2,"Undispatchable display tasks are stuck in the task_queue when when running with evergreen.DispatcherVersionRevisedWithDependencies","""[~sam.kleinman] - as discussed in person yesterday:    Here is an arbitrary _task\_queue_ which contains 52 tasks over 24 hours old.          Some of the _tasks_ that we inspected, you identified as (undispatchable) display tasks, e.g.:    https://evergreen.mongodb.com/task/mongodb_mongo_v4.2_enterprise_ubuntu1604_64_aggregation_multiversion_fuzzer_5_enterprise_ubuntu1604_64_1006ba7736ec24da479de805c7777e63315711fb_19_11_06_19_34_42    We need to address this particular subset of undispatchable tasks remaining in the queue.    """
"EVG-8328","Bug","platform",1,"Performance results start/end do not return consistent results","""The 'start' and 'end' values in performance results are not stored in a consistent type. So we should not automatically try to convert them to a type."""
"EVG-6975","Task","app",1,"Increase HTTP client timeout for s3 commands","""Maybe to 20 min?"""
"EVG-6973","Bug","app",0,"JasperClient should not generate Jasper credentials","""After the certdepot refactor, [this line|https://github.com/evergreen-ci/evergreen/blob/50df9cd27639e7e3cd0962ab5c22ef3cf96f9dcf/model/host/hostutil.go#L739] deletes the current Jasper credentials for a host that is already assumed to be running Jasper. *This is incorrect because it will delete the host's Jasper credentials and replace them with new ones, causing a data inconsistency between the host's Jasper credentials on disk and the app server's copy of the credentials.*"""
"EVG-6972","Improvement","app",1,"Allow Volumes to be spawned using a different region","""GetManager uses the DefaultEC2Region for creating volumes. Should be able to specify this region."""
"EVG-6971","Bug","app",2,"Resolve issue where a task is status ""dispatched"" for a number of days, blocking (and enqueuing) its dependent tasks when running with evergreen.DispatcherVersionRevisedWithDependencies","""Another scenario where we end up with orphaned tasks stuck in the _task_queue_ when running with _evergreen.DispatcherVersionRevisedWithDependencies_.             Why is this blocking task stuck in status: """"dispatched"""" for so long?     """
"EVG-8513","Bug","platform",0,"Re-add ExtendRemoteArgs to Jasper","""This was accidentally removed in the SSH library change."""
"EVG-6983","Bug","legacy-ui",0,"Fix unexpirable host error message","""On the spawn host page, if you exceed the number of unexpirable hosts, it gives an error stating: """"Error extending host expiration: can only have 0 expirable hosts""""    This should probably say 0 _unexpirable_ hosts."""
"EVG-6982","Bug","legacy-ui",1,"Spawn host start time displays invalid time if host hasn't started yet","""Time is weird. I spawned a host and since it hadn't reached starting yet, it displayed uptime as 2020 years and the start time suggested we had gone back to the age of the Roman empire:    !Screen Shot 2019-11-15 at 10.36.39 AM.png!"""
"EVG-6980","New Feature","legacy-ui",2,"Add Browser Load Times to New Relic Evergreen Monitoring","""As an Evergreen Engineer  When a user visits the Evergreen website  Then I'd like to know how long it takes that user to load/render the entire page  """
"EVG-6978","Bug","app",0,"Fix when spawn host page shows user data command","""For new provisioning, the host should only show the SSH command once its status is running. There was a minor distro bootstrap settings change so the current page will not correctly wait for the host to be running before showing the command."""
"EVG-6977","Bug","app",0,"evergreen fetch needs to clone as unprivileged user","""User data runs as root, but we want it to actually run as the user defined in the distro settings. This will prevent issues with cloning repositories, which requires the github SSH keys."""
"EVG-6976","Improvement","app",0,"Host should be marked running even if evergreen fetch fails to get task data","""Hosts should not have fetching task data be required to be considered 'running'. A spawn host that is supposed to be loaded with task data might fail at {{evergreen fetch}}, but should still be marked as running. This is the current legacy SSH behavior."""
"EVG-7001","Task","app",1,"Add service credentials to admin settings","""The Okta LDAP auth needs to use a special service user's credentials for performing LDAP operations (e.g. ismemberof)."""
"EVG-6996","New Feature","ui",1,"Lobster: upgrade React to v16.8+ ","""Use hooks!"""
"EVG-8478","Bug","platform",1,"APM flusher goroutine races when logging message","""Example logs: https://evergreen.mongodb.com/task/evergreen_race_detector_test_scheduler_eb377d1e36be021b4075a5536aa34d5d9dd2b417_19_11_13_20_32_17"""
"EVG-7004","Build Failure","app",0,"Failures: test-model-host on Race Detector [Evergreen @ ad317055] (TestFindByExpiringJasperCredentials, IgnoresNotRunning, TestJasperProcess, RunJasperProcessPasses, StartJasperProcessPasses, RunJasperProcessFailsIfProcessExitsWithError +1 more)","""h2. [test-model-host failed on Race Detector|https://evergreen.mongodb.com/task/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50/0]  Host: [ec2-3-84-161-130.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-07f056d6fa482f77a]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/ad3170559f038d2951ab6442dab5add2878d3012]: 'evergreen-ci/evergreen' pull request #2890 by Kimchelly: EVG-7003: fix go environment in evergreen config (https://github.com/evergreen-ci/evergreen/pull/2890) | 18 Nov 19 22:41 UTC  Evergreen Subscription: ; Evergreen Event:   *TestFindByExpiringJasperCredentials* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#TestFindByExpiringJasperCredentials=fail]  *IgnoresNotRunning* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#IgnoresNotRunning=fail]  *TestJasperProcess* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#TestJasperProcess=fail]  *RunJasperProcessPasses* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#RunJasperProcessPasses=fail]  *StartJasperProcessPasses* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#StartJasperProcessPasses=fail]  *RunJasperProcessFailsIfProcessExitsWithError* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#RunJasperProcessFailsIfProcessExitsWithError=fail]  *StartJasperProcessFailsIfProcessCreationFails* - [Logs|https://evergreen.mongodb.com/test_log/5dd40c5c9ccd4e283271bb5a] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50#StartJasperProcessFailsIfProcessCreationFails=fail]    [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_race_detector_test_model_host_patch_ad3170559f038d2951ab6442dab5add2878d3012_5dd4050957e85a0dc21c4dba_19_11_19_15_06_50/0?type=T ]  """
"EVG-7003","Bug","app",0,"Properly set go environment","""Tests are failing because GOROOT (which determines standard library) and gobin (which determines the go binary) are not explicitly set in the build images anymore."""
"EVG-9091","Task","platform",1,"Fix go environment for all linted projects","""All projects that use a similar gometalinter copy-paste in the makefile will likely fail to lint due to changes in the golang toolchain and default go version."""
"EVG-9052","Task","platform",0,"Support OP_MSG","""OP_MSG is not completely implemented in the mongowire package yet."""
"EVG-7013","Bug","app",2,"Over 20 slack notifications received for a single patch build","""After some time creating a patch build, I suddenly received over 200 email notifications saying my patch has succeeded (though in reality only a small portion of the patch turned green at that time).     The patch build: [https://evergreen.mongodb.com/version/5dd5bb40e3c3315db82f82f3]    Attaching a few notifications as below. Please note they are for the same patch build but having different event IDs.    And I did not customize my evergreen notification settings recently. """
"EVG-7011","Bug","app",2,"parent-decommission-job should not decommission parent hosts with task-spawned containers","""or if the containers aren't up yet, move them to another parent"""
"EVG-7008","Bug","legacy-ui",2,"Patch builds have ""No patch status available for this page""","""Some ordinary patch builds have no patch status in Evergreen:    https://evergreen.mongodb.com/version/5dd51e88d1fe0728cc337115  https://evergreen.mongodb.com/version/5dd51ecf1e2d17344ae44bd2    I don't know if it's something about how I create patch builds? I see that another patch build in the mongodb-mongo-master project has a patch status as usual:    https://evergreen.mongodb.com/version/5dd51f3ed6d80a7b15ddfd03"""
"EVG-9286","Task","platform",0,"Add license","""Apache 2.0"""
"EVG-9205","Task","platform",1,"Run lint and tests in task group","""Similar to how cedar currently does it."""
"EVG-7014","Bug","app",2,"Commit queue was blocked","""The Genny commit queue got stuck because the version completion wasn't logged."""
"EVG-7024","Bug","app",2,"Poisoned host check should also decommission docker parents","""If it has to decommission too many containers due to tasks turning purple"""
"EVG-7022","Task","app",0,"Host should turn off needs new agent or monitor flag when contacting host","""Some agents could not contact the app server for several minutes when attempting to heartbeat and this caused the app server to attempt to deploy a new agent monitor since the db's max LCT elapsed even though the agent and agent monitor were both alive on the host's side.         This can be fixed by clearing the needs new agent/monitor flag when the agent contacts the app server (all cases in which the agent/agent monitor should be signaled to shut down are handled within the agent REST API anyways).         Example host: [https://evergreen.mongodb.com/host/i-0a30a5a74b5896a02|https://evergreen.mongodb.com/event_log/host/i-0a30a5a74b5896a02]    Running task: [https://evergreen.mongodb.com/task/mms_int_mdb_latest_INT_JAVA_BRS_36_MM_705ed64b2f9a7b130e8139c94ead0a3c9d51d5f5_19_11_22_13_42_09]     """
"EVG-7021","Improvement","app",0,"ProjectRef changes through the API aren't logged ","""If a ProjectRef is changed through its project page the before/after will be logged to the event_log, but not if the change is made through the API."""
"EVG-7017","Task","app",1,"Remove path parameter from mock environment","""This field has been unused for at least a year."""
"EVG-8787","New Feature","platform",2,"Explore using golangci lint instead of gometalinter","""If golangci lint is feasible to use, it would be preferable to gometalinter, which has been deprecated and requires some makefile configuration to work properly."""
"EVG-7033","Improvement","app",2,"Support shallow clone on configured distros in GitHub patches and mainline commits","""Shallow clone is easier here, since cloning the latest commit is already the right thing to do."""
"EVG-7032","Improvement","app",1,"Add distro API and UI for shallow clone","""We should be able to turn on shallow clone on a distro by distro basis, since some distros don't support shallow clone."""
"EVG-8340","Bug","platform",0,"Set stdin/stdout/stderr when exec.Command is not resolved","""The SSH binary implementation panics because stdin is set before {{exec.CommandContext}} is called."""
"EVG-7042","Task","app",2,"Move evg logs to cedar buildlogger","""* Make sure that the logs appear correctly in the UI (talk with John)   * Figure out how to transition away from logkeeper/evergreen"""
"EVG-8908","Task","platform",2,"jasper test compile failures don't fail tasks","""e. g."""
"EVG-7047","Bug","app",2,"No notification generated for blocked task group","""This does not have a notification for the lint buildvariant, but it should https://github.com/evergreen-ci/evergreen/pull/2923. It's also missing a version notification."""
"EVG-7046","Improvement","app",1,"Include version requester type in rest v2 endpoint","""An ETL job was relying on URLs to determine whether something was a patch build. An object ID is a patch build, while something with a project name prepended to an object ID is a mainline build. This is awkward, and it now has broken, since periodic builds look like patch builds.    We should provide the version requester type itself in the rest v2 endpoint for versions. The list of types is here: https://github.com/evergreen-ci/evergreen/blob/13546d429c9c218b5024b0d329004db52fab7d01/globals.go#L300-L306."""
"EVG-7045","Improvement","app",1,"Github push webhook got 400 response for non-tracked branches","""After turning on """"Pushes"""" event in the Evergreen webhook ([https://evergreen.mongodb.com/rest/v2/hooks/github)] for the wiredtiger/wiredtiger repository on Github, I saw 400 responses returned from Evergreen for push events associated to branches that are not tracked by Evergreen (i.e. branches that have no Evergreen project to test against). It is actually quite usual push events being generated from those short-lived feature branches for pull request changes. And the 400 response code feels a bit misleading as well.          It would be nice if Evergreen could tolerate push events from those non-tracked branches with a positive response code. """
"EVG-8725","New Feature","platform",1,"Support requester field in versions","""The `requester` field was recently added to [versions|https://github.com/evergreen-ci/evergreen/wiki/REST-V2-Usage#id9] in the evergreen api. This allows a much better way of testing if a version is patch or not. We should switch to using it.  ----  As a DAG engineer,  I want to use requester for checking if a version is a patch,  So that I can more reliably know what triggered a version.  ----  AC:  * requester can be retrieved from Version object.  * is_patch uses requester to determine if a version is a patch."""
"EVG-8362","Bug","platform",1,"Fix wire test","""Logs: https://evergreen.mongodb.com/task/jasper_ubuntu1604_test_wire_bfb108fd91424eb6e405fe9640b54b2547b39ae0_19_12_04_16_59_25    It should be {{assert.NoError}}, not {{assert.Error}}.    This can probably be fixed by changing the contexts so that writing responses occurs in a separate context."""
"EVG-9252","Task","platform",0,"Upstart should handle environment without setuid","""Upstart scripts might fail to inherit the desired environment in some cases (e.g. PATH might not be modified by setting environment variables if {{secure_path}} is set in {{/etc/sudoers}})."""
"EVG-8723","New Feature","platform",2,"Add error handling to signal processing detector client","""As a DAG engineer:  I'd like to handle """"common"""" errors that come up while using signal processing microservice in cedar gracefully.  Such that,  Cedar doesn't fail randomly due to issues that can be gracefully recovered from.    AC:  * Use results from stress testing signal processing microservice to implement appropriate handling of error codes with retrying/panic policy."""
"EVG-7058","Bug","app",1,"windows-64-vs2017-test spawn host bash: export 'Files/...' not a valid identifier errors ","""When I ssh into a windows-64-vs2017-test spawn host I get these errors:      Fixing the paths in .bash_profile (escape space with backslash) and reloading seems to fix the issue:    """
"EVG-7054","Task","app",2,"Set up golangci-lint","""golangci-lint will go in the other MAKE repos assuming this goes well."""
"EVG-7053","Task","app",1,"Document how new provisioning works","""In evergreen developer's guide."""
"EVG-7069","Improvement","ui",2,"Parameterize New Relic spruce browser plugin","""EVG-7028 parameterized New Relic for the legacy Evergreen UI. We should also parameterize it for Spruce. Unlike the Evergreen UI, where something can be stored in the admin interface, this will need to passed in to the Spruce buildsystem."""
"EVG-7059","Task","app",1,"Windows agent depends on .gitconfig in HOME","""In new provisioning, HOME is C:/Users/<service_user>, not C:/cygwin/home/Administrator. This means that environment variables are not exported."""
"EVG-8674","New Feature","platform",1,"Simplify RunCMD","""This was suggested by the gocognit linter and I do think that the method is excessively complicated and should be broken into some helper functions."""
"EVG-7074","Bug","app",1,"Change the TAG API to be part of the update project API (or at least similar to it)","""There are a few reasons to ask for this:    1. someone may want to add/remove more than a single tag.  2. someone may want to change from one tag to another (would require two calls instead of a single call with {tags: ['new'], tags_to_remove: [""""old""""]}  3. most likely someone may want to already make some other changes to a project in addition to changing its tags. This way a single update call can be used to make all the required changes."""
"EVG-7070","Task","app",0,"Fix static host reprovisioning to legacy and tune job enqueueing","""Fix various issues:  * If we're converting a static host to legacy provisioning, it has to be able to use a Jasper client to stop the agent monitor.  * The host event page has the wrong event type name.  * Jobs should be rounded to the nearest minute for uniqueness to allow provisioning to be changed multiple times per hour. Otherwise, the host will have to wait until the next deploy to be reprovisioned.  * Needs new agent/monitor should be checked only after the job is locked."""
"EVG-7080","Build Failure","app",2,"Setup Failure: test-cloud on Ubuntu 16.04 [Evergreen @ b5d79830] ","""h2. [test-cloud failed on Ubuntu 16.04|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_test_cloud_b5d798308e84a22c9f8aece21c506c3fdd0037e7_19_12_10_20_37_30/1]  Host: [ec2-3-91-38-130.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0526f1bd337f73f84]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/b5d798308e84a22c9f8aece21c506c3fdd0037e7]: EVG-6882 prevent triggered builds for disabled projects (#2952) | 10 Dec 19 20:37 UTC  Evergreen Subscription: ; Evergreen Event:     [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_test_cloud_b5d798308e84a22c9f8aece21c506c3fdd0037e7_19_12_10_20_37_30/1?type=T ]  """
"EVG-7076","Bug","app",0,"Host that does not come up can cause all host provisioning to fail","""At 6:07pm EST on 12/09/19, a user requested spawn host i-0489a525d49f1af12. This spawn host hit the [host not ready for setup|https://github.com/evergreen-ci/evergreen/blob/f50768d851142375ee202210e4f6424128199c79/units/host_status.go#L130] case from 6:08pm to 7:10pm, suggesting either that it's possible for a host to get stuck in some pending status or that there is some failed status that Evergreen does not handle correctly.    After the hour passed, AWS no longer returned data about that host. This caused Evergreen to [return early|https://github.com/evergreen-ci/evergreen/blob/f50768d851142375ee202210e4f6424128199c79/cloud/ec2.go#L724] from GetInstanceStatuses, because that host was no longer included in the DescribeInstances response.    This in turn blocked on host provisioning that went through that DescribeInstances code path. Since fleet is its own provider, most task hosts did come up, but hosts spawned by users, hosts spawned by host.create, and on-demand hosts (i.e., perf) did not. We fixed this in production by terminating all on-demand hosts older than 1 hour.    One possible fix for this is to terminate a host in the database if it is not included in the DescribeInstances response. Another is to figure out the additional case we are failing to handle in setCloudHostStatus."""
"EVG-7075","Bug","app",1,"evg-lint needs to handle nolint","""It must be able to handle nolint comment directives as part of migration to golangci-lint instead of gometalinter. golangci-lint does not have easy integration with custom linters because it does not support running linter binaries."""
"EVG-8870","Task","platform",2,"fix model.TestGetDownloadWindows","""I've added a skip"""
"EVG-8836","Task","platform",1,"Deduplicate Jasper remote tests and do not skip tests","""There are many copy-pasted tests in the remote package which are named slightly differently but test the exact same things. They should be unified under the common remote tests.         Fix this test: [https://evergreen.mongodb.com/task/jasper_windows_test_remote_61a695020101f18236583d806735d4ea1ccfd1fe_19_12_11_15_47_40]         The tests that are being skipped should most likely not be skipped and should be fixed."""
"EVG-8459","Bug","platform",1,"Task mapping creation should increment source_file_seen_count even when no tasks flip","""For this file in src/evergreen/__init__.py file in evergreen.py, it has changed in 14 commits since this commit on May 4: https://github.com/evergreen-ci/evergreen.py/commit/61ee0d619d4adb31c84abc02dd9d52d41ae45f63. Thus, when I run the following command in the selected-tests repo, the task mapping that is created should have a source_file_seen_count of 14.         Currently the task mapping has a source_file_seen_count of 2 (see below). This is because we are only incrementing source_file_seen_count when tasks in Evergreen have flipped for that commit. Instead, we want to increment source_file_seen_count regardless of whether tasks have flipped.      """
"EVG-7100","New Feature","app",2,"Remove TaskOrdering from code","""ubuntu1604-test is running the new tunable scheduler. I observed that a patch was at the top of the queue https://evergreen.mongodb.com/version/5df10c3030661525ab8d4acf, followed by all the tasks for this mainline commit https://evergreen.mongodb.com/version/mongodb_mongo_v3.6_919b7c1ce02104a22a06b14016d152440f66161d, followed by all the tasks in other patches https://evergreen.mongodb.com/version/5df112e2a4cf47113ff144d7.    This is unexpected because I would expect """"interleave"""", which is what, to interleave patch and mainline commits."""
"EVG-7088","Bug","app",2,"Slack notification says succeeded but task actually failed","""This PR patch was cancelled because I pushed another commit, but the slack notification says that it succeeded: [https://evergreen.mongodb.com/version/5df17050c9ec444c0b932df0]         Subscription: 5bd86621e3c331358aa373f3  Event: 5df1718e3066155171dbbe2a"""
"EVG-7085","Task","app",2,"Toggle UseParserProject to true","""This cannot be done until EVG-7077. Test extensively in staging. Once this is done and in for a safe amount of time we can revisit EVG-5313.  """
"EVG-7093","Bug","legacy-ui",1,"Updating spawn hosts doesn't refresh the page","""Clicking the Update button doesn't refresh the spawn hosts page to show the new properties and the banner."""
"EVG-7092","Bug","app",2,"Improve host creation throttling","""Since all task hosts are throttled together it's possible to starve out a single distro and tasks waiting on that distro will not run.    Perhaps a round-robin over the distros would allow each distro to be serviced."""
"EVG-7090","New Feature","app",1,"pip failure on windows-64-vs2017-compile server","""Our automation agent MSI builds have been failing since yesterday (12/11/2019) on windows-64-vs2017-compile.   Here is a link  to the failed build:  https://evergreen.mongodb.com/task/cloud_automation_master_build_windows_msi_Automation_Agent_Generic_0a37709a3505599f828defd6e1df66fc0782671f_19_12_12_17_14_00    cc [~kimberly.tao] [~tomer.yakir]  """
"EVG-7089","Task","app",0,"Copy teardown script to host","""This might cause user data to hit its limit (it has a 16kb limit) since the teardown script can be arbitrarily large."""
"EVG-8973","Task","platform",1,"make bson documents json marshalable (native)","""this shouldn't be extended json support."""
"EVG-7098","Task","legacy-ui",1,"Add a notes field to distros","""We have created more custom distros which have very specific use cases. If you don't have a knowledge of the history of the distro, it's easy to change distro settings in a way that breaks implicit assumptions about how the distro will be used. We should add a notes field to the distro, visible in the UI, so that administrators can record facts about the distros."""
"EVG-7097","Bug","app",0,"Task directories not being cleaned up between tasks","""Windows agents are failing to clean up their task directories and leave behind files between tasks.    Example errors in agent logs:    {{agent-3424-14.log:[evergreen.agent] 2019/12/13 17:57:46 [p=critical]: Error removing working directory for the task: \data\mci\24b47f5b24b3be8ac822dea79146ea26: remove \data\mci\24b47f5b24b3be8ac822dea79146ea26\mms\server\build\java\classes\com\xgen\svc\mms\api\view\atlas_private\dataLake: The directory is not empty.}}   {{agent-3424-16.log:[evergreen.agent] 2019/12/13 18:15:22 [p=critical]: Error removing working directory for the task: \data\mci\5d8f220a77d23a59aba3912c4a97d73f: remove \data\mci\5d8f220a77d23a59aba3912c4a97d73f\mms\server\build\java\classes\com\xgen\svc\mms\api\view\atlas_private\dataLake: The directory is not empty.}}   {{agent-3424-18.log:[evergreen.agent] 2019/12/13 18:33:11 [p=critical]: Error removing working directory for the task: \data\mci\4b701a6ca0f7fbaac61a430895e05133: remove \data\mci\4b701a6ca0f7fbaac61a430895e05133\mms\server\build\java\classes\com\xgen\svc\mms\api\view\atlas_private\dataLake: The directory is not empty.}}         There is also a related issue where a Windows agent is cleaning up a task directory but then stops communicating with the app server, causing the app server to attempt to deploy agents/agent monitors to the host when the agent is still running.         This applies to both non-legacy and legacy provisioning on Windows machines. I checked on windows-64-vs2013-small and windows-64-vs2015-compile and both had this issue.         Example of a legacy host (windows-64-2019) in production that had this issue: https://evergreen.mongodb.com/host/i-00807d0b61df6bdfc         I quarantined some hosts in staging that seem to have this issue (using legacy provisioning). I'm unsure if they're the same issue but they have the same symptom of not being able to clean up the task directory:    [https://evergreen-staging.corp.mongodb.com/host/i-035a2aab525bd8c77]    [https://evergreen-staging.corp.mongodb.com/host/i-0218a3aa604dbfa88]"""
"EVG-7095","Bug","app",1,"Periodic builds include all tasks","""Periodic builds include all tasks, not just the ones that match the alias."""
"EVG-8607","New Feature","platform",2,"Cron backfiller for signal processing recalculation","""I'd like a schedule based backstop to recalculate change points over cedar's data. Such that, any stale time series get refreshed regularly.    AC:  * Recalculate change points for all cedar metrics with new data. Run every hour."""
"EVG-8468","Bug","platform",1,"Task mapping creation should set repo value to module's repo name for module-related task mappings","""When I create task mappings for the mongodb-mongo-master project and enterprise module, the task mappings that are generated for the enterprise module have their repo value set to the project repo rather than to the module repo.    Command to create task mappings:      Here is one of the task mappings created by the above command:    This mapping corresponds to [this file|https://github.com/10gen/mongo-enterprise-modules/blob/master/src/queryable/SConscript] in the mongo-enterprise-modules repo. The """"repo"""" field says """"mongo"""" when it should say """"mongo-enterprise-modules"""".   """
"EVG-7105","Bug","app",0,"Commit queue set-module won't use the description argument","""Since the message flag was removed (https://github.com/evergreen-ci/evergreen/commit/8f99d8f744f39051ee6fd5338ce977e15483b4a6) pulling the message flag from the context will get the empty string."""
"EVG-7104","Improvement","app",1,"Prevent using regular patch and set-module commands for commit queue patches","""Users should not be able to create a commit queue patch with the regular patch command.   Also, if a module is added with the regular set-module command the message will be empty and the commit will fail. We should error if a user does this."""
"EVG-7101","Bug","legacy-ui",2,"Sys Perf trend charts in patchbuilds can misorder results","""In this [patchbuild|https://evergreen.mongodb.com/task/sys_perf_linux_standalone_audit_industry_benchmarks_patch_58abcf6577982367232a6c76d1ee277a4031ed3c_5dead5740ae6060c325daab9_19_12_06_22_26_35##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%252258abcf6577982367232a6c76d1ee277a4031ed3c%2522%257D%255D%257D], the output was rendered on the far left of the trend chart. The patchbuild was performed December 6th 2019 off of a recent commit. However, the visualization places it near patches from 2018.    Placing the results for the patchbuild far away from related results makes it more difficult to visualize changes.    This commit:   !image-2019-12-17-09-55-56-482.png|thumbnail!     The """"next"""" commit:   !image-2019-12-17-09-56-28-389.png|thumbnail! """
"EVG-8627","New Feature","platform",1,"Move selected-tests to python 3.7","""It recently came up that using Python 3.6 prohibits us from using annotations: https://github.com/mongodb/selected-tests/pull/30#discussion_r359564871     We should move our selected-tests deployment onto Python 3.7 by updating our Docker image."""
"EVG-8391","Bug","platform",1,"Cedar: problem persisting argument adding sample #10002: collector is overfull","""After adding O(1000000) events closing the stream fails with an error similar to the following:    problem persisting argument adding sample #10002: collector is overfull  """
"EVG-7115","New Feature","ui",2,"Start gql server in evergreen behind feature flag","""Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.l5hu22fsyoxi]"""
"EVG-7114","New Feature","ui",2,"Dependency inject mock data connector for integration testing","""Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.rpf8yyiq0cg5]    Support integration tests for the server by instantiating a test gql server with the mock data connector"""
"EVG-7113","New Feature","ui",2,"Support pagination in queries","""This is the full stack feature for supporting pagination in GQL queries between the client and server.    Apollo Client queries for paginated requests include a cursor and the GQL server returns paginated data based on that cursor.    Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.yqh5m6v86y8s]"""
"EVG-7112","New Feature","ui",1,"Disable introspection in production","""Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.4va3kae6h7ev]"""
"EVG-7111","New Feature","ui",1,"Configure CORS in gql server","""Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.gzmckhx4wevo]   # Support queries from localhost when in dev or test environment   # Support origin url of spruce"""
"EVG-7109","New Feature","ui",2,"Handle authentication","""Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.lazhk4iywuu2]    Handling authentication in graphQL server should be done using middleware to inspect the cookie from incoming requests. """
"EVG-7108","New Feature","ui",1,"Map schema to database models","""Design doc: [https://docs.google.com/document/d/1vvvPkIgjgFq4iFq239b37kjzQ-gcf2Xw1suc730SyWo/edit#heading=h.4jq6vrtk2brz]"""
"EVG-7107","New Feature","ui",2,"Design GQL schema","""Final version of the schema depends on getting final version of the mockups from product designer. """
"EVG-7120","Improvement","app",1,"Add distro feature to download legacy agent","""EVG-7119 adds the ability to build a legacy agent on an older Go. We should have a feature to opt a distro into deploying this older agent."""
"EVG-7118","New Feature","ui",1,"Add styled lib to Spruce","""Adding the library and some default styles should be enough. The existing styles do not need to be replaced because most of Spruce UI (the patches page) will be deleted once we get the mockups for the new UI."""
"EVG-7121","Improvement","app",2,"Add created_date to collections that do not have it","""This would aid in dumping a limited set of data, to aid in creating local Evergreen for development, and also for DR to quickly get a limited set of data up. This does not apply to the logs or test results collections, which are large enough to be ignored for any local Evergreen or DR initial restore.    Remember also add an index on this field."""
"EVG-8476","Bug","platform",1,"test selection should return data as json","""It looks like the test-selection service is returning most of the data as a string instead of json. This will be annoying to consumers of the service and should be changed. See [here|https://selected-tests.server-tig.prod.corp.mongodb.com/projects/evergreen.py/test-mappings?changed_files=src%2Fevergreen%2Futil.py&threshold=0.5] for an example.  ----  As a test-selection consumer,  I want all the data returned as json,  So that I can easily parse it.  ----  AC:  * All endpoints return their data as json.  * Tests are written to ensure this is the case."""
"EVG-7127","Bug","legacy-ui",1,"Duplicating a project creates empty redacted variables","""If you create a project by clicking """"New Project"""" and selecting """"Duplicate current project"""", the new project will include the keys of the redacted variables from the old project, but their values will be empty. This is confusing for users, as it appears that the redacted variables were copied successfully."""
"EVG-7130","Bug","app",2,"Adding a tag fails before AWS gives us an instance","""Trying to add a tag to a spawnhost before we get an instance fails because we try to add tags to the instance and its resources before they actually exist. It's not made clear to the user what went wrong (the request eventually returns 500).    We should prevent a user from attempting to set tags until the host is provisioning."""
"EVG-8884","Task","platform",1,"Implement user manager logout","""This should clear the user in the database so that evergreen considers them logged out (i.e. delete their cached login tokens). Their Okta login status should be unchanged."""
"EVG-8849","Task","platform",2,"Set up Okta user manager","""Similar to the OAuth client for GitHub."""
"EVG-8753","New Feature","platform",2,"Switch to FastAPI framework","""As a DAG engineer,  I would like to use FastAPI rather than Flask + flask-restplus to build selected-tests service, so that my endpoints have faster response times and so that coding in the application code is faster and easier to do.    AC:  * Use FastAPI  * Endpoints maintain good documentation equivalent to current flask-restplus documentation  * HTTP requests are logged to stdout so we can see them in Splunk"""
"EVG-8624","New Feature","platform",2,"Integrate mypy","""As a DAG engineer, I want to know that functions and methods in the selected-tests repo have correct type annotations, so that fewer bugs are introduced to the code base.    AC  * mypy is run through pytest as part of CI"""
"EVG-8562","New Feature","platform",2,"Jasper managed daemon processes (auto-restart option on creation)","""Jasper managed daemon processes (auto-restart option on creation)"""
"EVG-7152","Improvement","app",0,"Admins can run a script on groups of hosts","""Admins can run a script on groups of hosts"""
"EVG-7151","Improvement","app",0,"Spawnhost option to mount a volume on a user’s home directory","""Spawnhost option to mount a volume on a user’s home directory"""
"EVG-7149","Improvement","app",0,"Reverse-proxy code-server through Evergreen app servers","""Reverse-proxy code-server through Evergreen app servers"""
"EVG-7148","Improvement","app",1,"Start code-server on spawnhosts","""Start code-server on spawnhosts"""
"EVG-7145","Improvement","app",1,"Document VS Code remote development setup and workflow","""Document VS Code remote development setup and workflow"""
"EVG-7140","New Feature","ui",2,"Update local GQL schema from GitHub as a dev build step","""Conditionally update local GQL schema from evergreen GitHub repo as a dev build step"""
"EVG-7139","New Feature","ui",1,"Retry failed GQL requests","""Decide on how we should implement apollo-link-retry"""
"EVG-7138","Bug","app",2,"Volume attach command times out","""Trying to attach a volume to a host from the CLI consistently times out and cancels the context so the volume never gets attached.  Maybe we should return immediately and optionally subscribe for notifications, similar to what we do for spawning hosts from the CLI."""
"EVG-7132","Bug","perf-tools",1,"create_time is being over ridden with the default","""The ordering in [getDefaultFiltering|https://github.com/evergreen-ci/evergreen/blob/060c9dac8bf27c860857275185843a0743659d61/public/static/app/perf-bb/SignalProcessingCtrl.js#L38-L45] of __Settings.perf.signalProcessing.persistentFiltering__ and __mandatoryDefaultFiltering__ needs to be swapped in the following extract:     """
"EVG-8997","Task","platform",0,"Handle reauthorization after given expiration time","""The current LDAP manager reauthorizes users after a TTL (configured to one hour right now) by checking the user's LDAP groups. The new Okta user manager should also do some kind of periodic checks against Okta.    Checking the user group (in a similar way as LDAP is currentl ydone) requires using the user's access token, which expires after some amount of time. When the token is expired, we have to handle getting a new one. This could potentially be achieved by requesting refresh tokens.    If the access token and refresh token are invalid, then we have to redo authentication to get more tokens.         There's also the possibility that we can't use refresh tokens (i.e. due to security policies), so we might have the user go through silent reauthentication (without a login prompt). If we go this route, we have to somehow know where to redirect the user."""
"EVG-8792","New Feature","platform",2,"add support for okta ldap to gimlet","""be able to support okta and legacy/standard ldap"""
"EVG-7167","Improvement","app",0,"Send Parser Project over the wire instead of yaml","""For example, [https://github.com/evergreen-ci/evergreen/blob/master/service/rest_version.go#L310] converts ParserProject back into yaml, which won't be necessary when Parser project is done."""
"EVG-7166","Bug","legacy-ui",1,"Hide Never expire checkbox when there are 0 unexpirable hosts","""(On the spawn host page)"""
"EVG-7163","Bug","app",2,"Parent hosts shouldn't be running agents","""https://evergreen.mongodb.com/host/i-07f82fbbe9fcfa38c  https://mongodb.splunkcloud.com/en-US/app/search/search?q=search%20index%3Devergreen%20i-07f82fbbe9fcfa38c&display.page.search.mode=verbose&dispatch.sample_ratio=1&earliest=1578426540&latest=1578428377&sid=1578428433.4285417"""
"EVG-7159","New Feature","ui",0,"Uneject Create React App","""our current version of create react app has been ejected. we should be running a version of create react app that has not been ejected.    The unejected CRA should have:    1) the fractal file layout pattern    2) the same deploy steps as before w/ npm scripts    3) the GQLWrapper and tests    4) environment variable utils    5) New Relic plugin    6) Bugsnag integration    7) absolute imports instead of relative imports    8) same readme as before    9) same npm scripts to start mock & dev server     """
"EVG-7156","Task","app",2,"Integrate Okta user manager","""Mostly this is passing the admin settings to the Okta user manager to create it. Additionally, we have to set the access and refresh tokens with the caching functions."""
"EVG-7154","Task","app",0,"Create admin setting to select auth method","""Currently, the auth method is chosen based on which auth fields in the admin settings are populated in {{LoadUserManager}}. It would be nice to be able to manually select one if multiple auth methods are supported."""
"EVG-7153","Task","app",2,"Add admin settings for Okta auth","""Requires client ID, client secret, issuer, reauthorization TTL, and user group name."""
"EVG-8859","Task","platform",1,"Implement and persist nonce and state","""For the authentication process, we have to get access/ID tokens so we can authenticate/authorize the user. To do so, we have to temporarily store two secrets (nonce and state) because it is required to get the access/ID tokens when the redirect URI callback is invoked.    The nonce and state should have a TTL since they are not used after the user is authenticated."""
"EVG-7176","Improvement","app",2,"Automate migrating between instances","""Detach the old instance's home volume and attach it to the new host."""
"EVG-7174","Bug","legacy-ui",0,"fix perf charts for stitch (BAAS)","""perf charts still not showing up for projects that do not have legacy perf data (such as stitch)"""
"EVG-7168","New Feature","ui",1,"Query linting","""All GraphQL queries on the client should be linted. This can be achieved by using the GQL schema."""
"EVG-7183","Improvement","app",0,"Cleanup from mbox formatting","""A lot of code from EVG-6592 cases on the fact that old commit queue items won't be mbox formatted. Can now go back and remove that."""
"EVG-7178","Bug","app",1,"Updating a project without projectVars panics","""projectVars is dereferenced [here|https://github.com/evergreen-ci/evergreen/blob/f036124c01bd7de98e2b03e660636d08634a6fe9/service/project.go#L526] and if it isn't found [here|https://github.com/evergreen-ci/evergreen/blob/f036124c01bd7de98e2b03e660636d08634a6fe9/service/project.go#L458], projectVars will be nil.    It's hard to know how a project could have been created without [also inserting projectVars|https://github.com/evergreen-ci/evergreen/blob/f036124c01bd7de98e2b03e660636d08634a6fe9/service/project.go#L636]."""
"EVG-7177","Task","app",2,"Create model for storing required Okta auth information","""     Once we've authenticated the user, we need to store each user's token (to find users in the database), access token (for checking groups), refresh token (for getting new access tokens without having to reauthenticate the user), TTL (to reauthorize the user periodically)."""
"EVG-9224","Task","platform",2,"Instrument Okta calls","""It would be useful to know how long re-authorization of a user takes after they've already logged in. Since users are periodically re-authorized, it would be good to know the impact on page load times.    It would also be valuable to know how long each individual request takes."""
"EVG-9220","Task","platform",1,"Manage Okta user cache","""Once the has functions to manage the cache, it should be possible to save access/refresh tokens for later use. The access token can be used to reauthorize the user periodically (like what is currently done for LDAP). Access tokens might be less useful to store since they are very short-lived, while refresh tokens have a much longer lifetime."""
"EVG-7191","Bug","app",1,"Stranded task job should be able to handle docker containers","""could not check host with timed out task for external termination: error getting cloud status for host container-1691131538922827018: Failed to get container information for host 'container-1691131538922827018': Docker inspect API call failed for container 'container-1691131538922827018': Cannot connect to the Docker daemon at tcp://ec2-34-205-72-241.compute-1.amazonaws.com:2376. Is the docker daemon running?"""
"EVG-7190","Bug","app",0,"Commit queue merges without community changes get the wrong commit message","""If a commit queue patch is created that contains no community changes the message will be set to the default patch message [here|https://github.com/evergreen-ci/evergreen/blob/6fd48e04af41e4c05285cac628e4e67d8be95685/operations/patch_util.go#L100], instead of waiting for the message to get filled in when the modules are added. """
"EVG-8631","New Feature","platform",2,"add default reporting jobs to barque ","""amboy job status  cron setup and addr  system stats  """
"EVG-7215","Bug","app",1,"Unable to add variables to a new project","""After creating a new project I tried adding two variables and saved the project.  I get a message that the project was saved successfully, but the variables are not there.     If I close down the browser and go back into the project in a new browser window, the new variables still do not show up."""
"EVG-7214","Improvement","app",2,"Enable Copying redacted variables between projects","""Can we add a way to copy REDACTED variables into a different EXISTING project (and leave then redacted)    Potentially, also have a “dry-run” option to tell if a value will or will not change    """
"EVG-7213","Improvement","app",2,"Investigate large numbers of TerminateInstance calls to AWS","""We make many calls to TerminateInstances, even more than calls to CreateFleet and RunInstances combined. We should investigate if this is necessary since it eats up AWS API calls and increases host-intent queue length.    The attached image is a search over the past week."""
"EVG-7210","New Feature","ui",2,"Logs column in Tests table","""HTML button directs user to Lobster    RAW button directs user to raw logs"""
"EVG-7209","New Feature","ui",2,"Task page route","""Route for task page `/task/\{taskId}`"""
"EVG-7208","New Feature","ui",0,"Tests table",""".Queries for the tests for a task. This ticket only includes the table itself. It does NOT include the tabs, i.e. Tests, Execution Tasks, etc    Shows a row for each test with Name, Status and Time. Showing logs for each test done in a separate ticket. Infinite scroll is also in another ticket.    !Task Page - Tests - Branch.png!"""
"EVG-7207","New Feature","ui",2,"Query for user's favorites","""Query for user's favorites projects. Only project name and ID are needed."""
"EVG-7206","New Feature","ui",2,"Query for task tests","""Given a task ID and sort/filter params, fetch paginated task tests"""
"EVG-7205","New Feature","ui",0,"Spruce Auth","""Protected routes redirect user to login page if not authenticated   # Login page (nothing special since need designs for final version)   # Auth context/state that holds global auth state about current user   # Auth wrapper for protected routes   # Query response middleware/afterware that updates auth context based on request response"""
"EVG-7203","New Feature","ui",2,"Query for individual task","""Given a task id get all data needed for that task    Separate queries for task metadata and task tests, execution tasks, files and build baron since these will be fetched separately"""
"EVG-7201","New Feature","ui",2,"Sorting tests table updates the URL query params","""When table is sorted, update url query params and re-fetch task tests data"""
"EVG-7199","New Feature","ui",2,"Query for Evergreen projects","""Get all Evergreen projects to be displayed in the projects dropdown. Only project name and ID are needed."""
"EVG-7196","Task","ui",2,"Determine caching mechanism for REST API responses","""It is likely that we will need to make REST API calls in some parts of our application. We should determine how we want to cache responses from these endpoints."""
"EVG-9240","Task","platform",2,"Add Okta mock tests","""In order to do this, we have to create a mock HTTP server that can return mock responses for each endpoint."""
"EVG-9153","Task","platform",2,"Validate access and ID tokens, acquire refresh token","""The token can be easily verified by using the /introspect endpoint to validate the token. However, this requires one network call per authorization, which has to be done often. If we don't care about performance and number of requests made, this might be good enough.    The best way to do this would be to add application logic for caching and periodic refreshing of the keys from the authorization server. If the access token is expired, get a new one using the refresh token. If the access token key does not match the authorization server key, try getting a new access token first. If the keys still do not match, only then do we try getting the authorization server keys. That way, will only ask for new keys if the validation fails (due to key mismatch) or if the caching TTL has expired."""
"EVG-7219","Improvement","app",2,"Increase time in queue factor & (maybe) reduce boost for mainline commits","""boost from 48 hrs to 12 or 24"""
"EVG-9198","Task","platform",1,"Migrate poplar off of github.com/satori/go.uuid","""It has an insecure randomness vulnerability."""
"EVG-7220","Bug","app",2,"Docker host terminated while running a task","""https://evergreen.mongodb.com/task/mongodb_mongo_master_ubuntu1604_container_cwrwc_rc_majority_passthrough_gen_patch_e32c7e7b2a4f8680090616c256b4cd8ad2a047ee_5e1c98e67742ae47a535cea1_20_01_13_16_20_55##%257B%2522compare%2522%253A%255B%257B%2522hash%2522%253A%2522e32c7e7b2a4f8680090616c256b4cd8ad2a047ee%2522%257D%255D%257D"""
"EVG-8701","New Feature","platform",1,"Trigger signal processing job in cedar when YCSB added manually","""As a DAG engineer,  I want YCSB metrics being added to cedar to trigger signal processing jobs.  Such that,  Signals get processed.    AC:  * YCSB signals processed when they are updated"""
"EVG-8348","Bug","platform",2,"GET Task mappings should return just display tasks, not execution tasks, for generated tasks that are split into display and execution tasks","""Background:  The GET /projects/\{project\}/task-mappings endpoint returns *all* tasks that are related to a list of changed source files. This means that if there is a display task """"replica_sets_large_txns_format"""" that contains numerous executions tasks (i.e. """"replica_sets_large_txns_format_01_enterprise-rhel-62-64-bit"""", """"replica_sets_large_txns_format_02_enterprise-rhel-62-64-bit""""), both the display task and the execution tasks are returned by the endpoint. You can see an example of this if you make a GET /projects/\{project\}/task-mappings request with the src/mongo/db/storage/storage_engine_impl.cpp changed file.    User story:  As a MongoDB engineer, I should be confident that, for generated tasks that are split into display and execution tasks, the selected-tests GET /projects/\{project\}/task-mappings endpoint only returns the display task, and not a display tasks's execution tasks, so that I am not being returned duplicate tasks to run.    AC:  *  Making a GET /projects/\{project\}/task-mappings request with the src/mongo/db/storage/storage_engine_impl.cpp changed file should return the """"replica_sets_large_txns_format"""" task but not its execution tasks"""
"EVG-7227","Task","ui",2,"optimize task gql query when testResults is omitted","""only query db for TestResults when testResults is included as a task query field    include integration tests"""
"EVG-7226","Bug","app",2,"s3.put should handle absolute paths to ""local_file""","""The s3.put command seems to always concatenate the working directory to the {{local_file}} argument.    It may be desirable to use the full path instead of a relative path because the path that {{local_file}} is relative to is not immediately obvious.    See example output here where local_file is ${workdir}/mongod.log    """
"EVG-7229","Bug","app",2,"BFGs are created for every stepback commit","""It look like BFGs are being created for every stepback commit instead of the first one that failed. One example is BFG-393900 and BFG-394834. They were created from two consecutive commits on the same variant with the same failing task name and test name.    I have not checked other occurrences of stepback since Jira search in the build baron plugin has been timing out for me.    This is causing pain for build barons and it would be great if it could be prioritized."""
"EVG-7230","Task","app",2,"populate logs field in Task gql query","""populate the logs field in Task gql query in Task resolver"""
"EVG-7250","Improvement","app",1,"Validator should check for empty functions","""Functions without commands cause panics bc we assume that they don't exist (but also they shouldn't exist so the validator should handle this)"""
"EVG-7249","Bug","app",2,"Docker containers get decommissioned too aggressively","""https://evergreen.mongodb.com/host/container-3894847770651935761"""
"EVG-7248","Improvement","app",1,"Cleanup the string copy of a patch from the upload","""When we've concluded most users have updated their CLI past [f03612|https://github.com/evergreen-ci/evergreen/commit/f036124c01bd7de98e2b03e660636d08634a6fe9] we should remove the extra copy of the patch from the upload."""
"EVG-7247","Improvement","app",2,"Require explicit confirmation for unexpirable instance and volume deletion","""Perhaps have users type """"delete"""" if they really want to delete, i.e. less automatic than typing y to our usual prompts. This should handle the spawn host page as well as the CLI."""
"EVG-7242","Task","app",2,"Improve timeouts in Evergreen","""Timeouts can be confusing, and it is not obvious to users which one was hit."""
"EVG-7241","Improvement","app",1,"Add flag to filter CLI `host list` by region","""Should be optional"""
"EVG-7240","Improvement","app",2,"Add region option to spawn host page","""Should default to the region in UserSettings.If this region isn’t available for this instance type, should return a helpful error to the user.Add region (or perhaps more helpfully availability zone) to the Spawn Host details card.Should also modify the UI API routes."""
"EVG-7239","Improvement","app",1,"Add region option to spawn host CLI","""Should default to the region in UserSettings.If this region isn’t available for this instance type, should return a helpful error to the user."""
"EVG-7238","Improvement","app",1,"Add region option to spawn host API routes","""Modify spawn host routes in service.go"""
"EVG-7237","Improvement","legacy-ui",1,"Specify default spawn host region in User Settings","""Should default to us-east-1, our current default"""
"EVG-7236","Improvement","app",2,"Consider region for Hosts","""Add Region to Host struct, and consider this region when creating a client for a given host document (to create/modify/query a host)"""
"EVG-7235","Improvement","app",0,"Consider region when creating a client","""Now modify GetManagerOptions and fromDistroSettings to choose ProviderSettings by region, although initially can set this always to a default, and potentially other places."""
"EVG-7234","Improvement","app",0,"Cleanup from ProviderSettings move","""Potentially two fields will be considered while moving data in provider settings to a new provider settings variable, so after some point we need to go back and remove support for the old field."""
"EVG-8710","New Feature","platform",1,"Add index for signal processing to cedar","""As a DAG engineer,  I'd like an index to cover the queries I issue during signal processing.    AC:  * Cover get performance data queries with an appropriate index"""
"EVG-8722","New Feature","platform",1,"Null coalesce rollup statistic values to 0","""We have experienced failure processing signals in cedar when getting time series with null values in them --> Golang bson driver does not know how to convert these to floats.    As a DAG engineer,  I'd like to coalesce these nulls to 0, such that I can process signals!    AC:  * Null coalesce to statistic values to 0 during performance data aggregation."""
"EVG-8697","New Feature","platform",1,"Log url and auth user when signal processing client fails to detect change points","""As a DAG engineer,  I'd like to log out service url and auth user when failing to detect change points.  Such that,  I can debug failures."""
"EVG-8693","New Feature","platform",1,"Add resource limits to selected-tests","""We should implement resource limits in Kanopy as described here: https://github.com/10gen/kanopy-docs/blob/master/docs/production_checklist.md#resource-requestslimits    See this ticket for more information about default resource limits: https://jira.mongodb.org/browse/TIG-2051    User story:  As a DAG engineer, I should know that there are resource limits set on the selected-tests service, so that I am following the process advised by the Kanopy docs and so that resources and resource requests are distributed properly across services.    AC:  * selected-tests has resource limits for cpu and memory  * resource limits and resource requests are distributed across services"""
"EVG-8577","New Feature","platform",2,"Expose analysis results through cedar API","""As a DAG engineer,  I'd like to expose analysis results through cedar's API, such that, consumers can see them!    AC:  * expose analysis results through cedar's API"""
"EVG-7274","New Feature","ui",2,"Restart task mutation","""mutation to restart task"""
"EVG-7271","New Feature","ui",2,"Schedule task mutation","""Mutation to schedule a task"""
"EVG-7264","Task","app",0,"configurable logging to s3 should not use environment variables","""either shared credentials file or IAM roles."""
"EVG-7263","New Feature","ui",2,"Automatically authenticate user","""Right now, user must login to be authenticated even if they have an evergreen cookie in their browser. The app should automatically authenticate the user if a cookie is present and the user can make successful requests to the API. """
"EVG-7262","Bug","legacy-ui",2,"Commit queue tasks aborted by the failure of another task should indicate what task had a real failure","""as it is people waste a lot of time trying to track down the actual error message."""
"EVG-8835","Task","platform",2,"Try using library for access token validator instead of endpoint","""Access tokens can be validated by polling the introspect endpoint but it's slower than using the Okta library to verify the access token. For some reason, the access token doesn't validate when used with the library (it says that its {{kid}}, which is a value used to check which public key to use for decoding, does not match any of the keys returned by the authorization server)."""
"EVG-8739","New Feature","platform",0,"Add rate limited jobs to Amboy","""Right now, there exists a concept of rate limited jobs in the sense that you can set their id with a rounded off timestamp, generating a duplicate key error on collision that you then ignore.    It would be nice if we had some more formal notion of a rate limited job, that doesn't generate errors to handle in the specific case that it is enqueued when another of its type is still in the queue."""
"EVG-8555","New Feature","platform",1,"Don't generate errors due to duplicate keys for recalculate-change-points job queueing","""As a DAG engineer,  I'd like not to generate errors when failing to enqueue a job due to rate limiting.  Such that,  I don't get errors about a system that functions properly!    AC:  * No errors generated due to rate limiting"""
"EVG-7433","New Feature","app",2,"Allow downloading of very long log files","""Using curl (with no timeout)"""
"EVG-7284","Bug","legacy-ui",0,"Fix copied host allocator settings","""It has a misspelling in the JS file so it isn't be copied when we clone the distro."""
"EVG-7280","Task","ui",2,"Query for a Task's files","""query for a tasks files. the files should be grouped by exec task"""
"EVG-8772","New Feature","platform",1,"Support sending SIGABRT in Jasper grpc","""Resmoke sends SIGABRT to processes that are configured to archive in the event of a test failure in order to force the creation of a core dump. This doesn't currently seem to be [supported|https://github.com/mongodb/jasper/blob/76466aca6b613c14629889d49c53a5e41efd0655/jasper.proto#L133] for Jasper processes. """
"EVG-8708","New Feature","platform",1,"Handle case of no measurements","""As a DAG engineer,  I want signal processing for performance results with no recorded measurements not to panic, such that, people don't have to deal with meaningless panics.    AC:  * GetPerformanceData should return empty performance results if no measurements are recorded in the DB."""
"EVG-8611","New Feature","platform",1,"Fix periodic change point job","""As a DAG engineer,  I'd like to fix the periodic change point job, such that, it works.    AC:  * Periodic change point job works"""
"EVG-8390","Bug","platform",0,"Specify cookie domain when clearing it","""If the cookie domain is not specified when cookies are cleared, it will fail to clear the correct cookie because it will assume the domain is the current domain."""
"EVG-8342","Bug","platform",0,"LDAP URL is ambiguous","""Since URL parsing is ambiguous, checking the scheme in the LDAP url is insufficient since it might interpret host:port format as the scheme."""
"EVG-7292","Problem Ticket","app",2,"Under load notifications can take a long time to be processed","""We rate limit ourselves to 1000 notifications per notification run, which seems to be not enough. We should be cautious scaling these up though, since this is natural rate limiting of queries against the DB."""
"EVG-7290","Bug","app",1,"Catch nil when no user is found","""[Here|https://github.com/evergreen-ci/evergreen/blob/6e3a626a35b044c27bf3af4c62b244d307452a4f/model/project_ref.go#L718]"""
"EVG-7289","Bug","ui",2,"Local evergreen server is unresponsive in CI environment","""Making calls to local evergreen server in CI results in a 500 error and an ECONREFUSED error because the local evergreen server is unresponsive. Figure out how to successfully talk to local evg server in ci. """
"EVG-7288","Bug","app",1,"Creating a new project doesn't make it visible in the UI immediately","""Also it adds it to the list of all projects twice"""
"EVG-8658","New Feature","platform",1,"Retry 499 status codes in change detector","""Sometimes the load balancer for Kanopy returns 499 for timeouts. We should retry these requests since it is usually due to burst activity."""
"EVG-7304","Improvement","app",1,"File one BFG per Display Task Instead of Execution Task","""With the Server test suites moving to execution tasks for increased parallellism, the number of BFG tickets has grown accordingly. This is caused by a couple of factors.     First, widespread failures that affect multiple tests in a suite would create X number of BFGs instead of 1.    Second, consistently failing tests are not guaranteed to run in the same execution task, due to the way the knapsack packing algorithm relies on test history information. This prevents backtracking from working and could cause more BFGs to be created for the same failure on different execution tasks"""
"EVG-9031","Task","platform",1,"Remove group check from Okta","""It seems like any users who can log into Okta is an employee (which is all we care about), so we don't have to perform the group check that is done in LDAP  Therefore, we can remove (or make optional) much of the logic with checking the user's groups from userinfo and validating the access token.         It seems like this is somewhat annoying to do because the ID token validation expects a nonce to be provided, but there is none for an ID token received from refreshing tokens. There is [some ambiguity|https://github.com/IdentityServer/IdentityServer4/issues/2180] about what to do since the ID token doesn't have a nonce when we refresh tokens. [This thread|https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on#comment-44979149] suggests that a refresh grant should not return a nonce, so the Okta library may simply be wrong."""
"EVG-8619","New Feature","platform",1,"Reconfigure change point detector retry policy to be lenient","""The change point detector currently retries requests 10 times with a maximum delay between requests of 5 seconds. This is not allowing signal processing service to recover in time when a 499 comes up.    As a DAG engineer,  I'd like to reconfigure the detector to retry 50 times, with a max delay of 5 minutes,  Such that,  the service has time to recover and respond during high load periods.    AC:  * change point detector reconfigured per above."""
"EVG-7309","New Feature","ui",0,"Mutation to remove favorite project from user","""Given a project id, remove project from user's favorites"""
"EVG-7314","Build Failure","app",1,"Failure: test-model-grid on Ubuntu 16.04 (Docker) [Evergreen @ 924ea8ee] (TestFetchFailures)",""" h2. [test-model-grid failed on Ubuntu 16.04 (Docker)|https://evergreen.mongodb.com/task/evergreen_ubuntu1604_docker_test_model_grid_924ea8ee4016255a2cdf7496ab5b8284f1fbb899_20_01_06_17_05_58/0] Host: [|https://evergreen.mongodb.com/host/container-34966100467904843] Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen] Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/924ea8ee4016255a2cdf7496ab5b8284f1fbb899]: Revert """"Revert """"Revert """"Revert """"EVG-7119: fix toolchain issues (#2998)""""""""""""""""  This reverts commit 1bfa579f24aff033c49866945ec3f8e71e92f90d. | 06 Jan 20 17:05 UTC Evergreen Subscription: ; Evergreen Event:  *TestFetchFailures* - [Logs|https://evergreen.mongodb.com/test_log/5e138898850e611b0b739ca4] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_ubuntu1604_docker_test_model_grid_924ea8ee4016255a2cdf7496ab5b8284f1fbb899_20_01_06_17_05_58#TestFetchFailures=fail]  [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_ubuntu1604_docker_test_model_grid_924ea8ee4016255a2cdf7496ab5b8284f1fbb899_20_01_06_17_05_58/0?type=T ] """
"EVG-7313","Bug","ui",2,"TaskTests query returns duplicate keys between paginated queries","""TaskTests query returns duplicate keys across two subsequent pages with the same sort category, direction, and limit """
"EVG-7311","Task","ui",1,"Only import required antd css","""Install react-app-rewired customize-cra and babel-plugin-import for selective importing    [https://ant.design/docs/react/use-with-create-react-app#Advanced-Guides]"""
"EVG-8485","Bug","platform",2,"Daily update script is creating duplicate mappings instead of updating pre-existing mappings","""Currently, the cronjobs that run daily to update the selected-tests task mappings and test mappings have a bug. When the past day's evergreen versions or git commits, respectively, are analyzed, the newly created mappings are inserted into the db like so: https://github.com/mongodb/selected-tests/blob/a8251a6ab0f880526d7ac27f545c389f3a87c964/src/selectedtests/task_mappings/update_task_mappings.py#L41. This causes an issue because, for source_files with pre-existing mappings, the mapping should be updated, not inserted.    The resulting duplicates are visible from running these queries:        User story:  As a MongoDB engineer, I should know that there will not be duplicate test mappings or task mappings in the selected-tests database, so that the data which I am using to run my selected tests patch builds is clean.    AC:  * No one source_file should have two entries in either the test_mappings or task_mappings collection  * Put unique index on source file field  * Clean database and rerun code once bug is fixed"""
"EVG-7318","Task","ui",2,"Figure out how to get Cypress to match on the body of a Post","""There are probably ways we can workaround this issue    [https://github.com/cypress-io/cypress/issues/3755]"""
"EVG-7316","Improvement","legacy-ui",2,"Add UTC as a timezone","""Please add UTC as a timezone in the Evergreen UI so that my Evergreen UI and my logs from build slaves are in the same timezone."""
"EVG-9204","Task","platform",2,"migrate cedar and barque to simple service users","""Ideally, we would use Okta service users for this. However, since Okta service accounts are not ready yet and LDAP is imminently going to lose support, we have to implement service users in the same way as is currently done for evergreen as a stopgap.         Note: after the mgiration is complete, regular users who were relying on their LDAP credentials will no longer be able to auth and they'll have to ask us for service users."""
"EVG-7323","Bug","app",1,"Commit queue includes file summary in commit messages","""If a commit contains new or moved files the commit message includes a record of the added/moved files."""
"EVG-7321","Bug","app",2,"Running command 'archive.targz_extract' fails on the Node.js archive","""I am downloading Node.js in a specific version:    And I was trying to extract it using the “archive.targz_extract” command in evergreen:    But I get the following error:    The error seem to be thrown if an unexpected type of item is being extracted from the archive (see [https://github.com/evergreen-ci/evergreen/blob/master/util/artifacts_tar.go#L209-L211]). Are the any (undocumented) limitations to the “archive.targz_extract” command?"""
"EVG-7320","Bug","legacy-ui|ui",1,"Difficulties changing timezone","""I wanted to change timezone to """"Central European Time"""", but I couldn't due to false-negative form validation (error says """"Please fill out all required fields before submitting""""):     !timezone.png|thumbnail!     I turns out the fields requiring values are hidden and only visible if I toggle on and off the """"Opt In to New Patch Page"""" checkbox.     !required-fields.png|thumbnail!     It might be related that I previously toggled this checkbox on to see how the new patch page looked."""
"EVG-7336","Task","app",1,"Re-add vet shadow to linters","""It's currently disabled. The previous incarnation of it in gometalinter was enabled, but half-baked and barely worked."""
"EVG-7335","Task","app",0,"Make static host authorized keys path configurable","""Right now it's hard-coded as {{~/.ssh/authorized_keys2}}, but this can be changed."""
"EVG-7334","Task","app",2,"Clean up host provisioning","""For example, some of the logic done in the provisioning setup job should probably be cleaned up."""
"EVG-7333","Task","app",2,"Write docs for virtual workstations","""This goes in the employee wiki."""
"EVG-7332","Task","app",1,"Enable mac static host provisioning","""Should start on the distros with the smallest host pools to increase confidence."""
"EVG-7331","Task","app",2,"Migrate usernames and deploy Okta to prod","""Once we turn on Okta, we have to migrate all the non-conformant LDAP names to their new Okta names."""
"EVG-7329","Improvement","app",0,"Distro API routes should use multiple provider settings","""When creating/modifying distros.     Should also check that the default instance type is valid for the region."""
"EVG-7328","New Feature","ui",2,"Add version displayName to task query","""The breadcrumb on the task route needs to show the displayName of the patch it belongs to. Add the version's displayName to the task query so it can be passed to the TaskBreadcrumb component"""
"EVG-7327","New Feature","ui",2,"Query to retrieve a single patch","""Given a patch id, get the patch metadata"""
"EVG-7353","New Feature","ui",2,"Add modify version mutations to patch buttons","""Show buttons for schedule, unschedule, abort and restarting a patch. Disable buttons based on status. """
"EVG-7351","New Feature","ui",1,"Status of patch auto updates","""When the status of a patch updates, the UI should update to reflect it"""
"EVG-7348","New Feature","ui",2,"Query for patch tasks sorted by variant","""Accept param in query to sort by variant asc or desc"""
"EVG-7347","New Feature","ui",2,"Query for patch tasks sorted by status","""Accept param in query to sort by ascending or descending"""
"EVG-7346","New Feature","ui",2,"Query for patch tasks sorted by name","""Accept a name parameter in query for name that is either ascending or descending."""
"EVG-7345","New Feature","ui",2,"Patch tasks table","""Use data from patch tasks query to render the tasks table."""
"EVG-7344","New Feature","ui",2,"Query for patch tasks","""given a patch id, get all tasks for that patch in the shape specific in UI for tasks table"""
"EVG-7343","New Feature","ui",0,"Patch header and metadata","""Use data from patch query to render the patch name in header and the metadata in left sider"""
"EVG-7341","New Feature","ui",2,"Toast feature to show errors","""When an occurs, such as an internal server error from trying to favorite a project, show a toast message for that error.    Use context to implement. Should be able to use it like:  """
"EVG-7340","New Feature","ui",2,"Catch-all route that shows 404 for unknown routes","""If I go to a route that does not exist then I should see a 404 page """
"EVG-7339","New Feature","ui",2,"Layout of the Task and Patch routes","""The patch and task routes have the same layout.    # Header   # Left sider   # Content    Use antd layout"""
"EVG-7338","New Feature","ui",1,"Toggle from legacy UI to new UI","""PAGES UNSUPPORTED BY SPRUCE WILL NOT HAVE A LINK IN THE NAVBAR    Link in navbar that goes to corresponding Spruce page"""
"EVG-7337","New Feature","ui",1,"Toggle from new UI to legacy UI","""* If I am on 'my-patches' route then clicking toggle should bring me to 'my patches' in legacy UI   * If I am on 'patch' route then clicking toggle should bring me to 'patch' in legacy UI   * If I am on 'task' route then clicking toggle should bring me to 'task' in legacy UI"""
"EVG-9267","Task","platform",2,"Use golangci-lint in all repos","""This is already being used in the main evergreen repo and in Jasper."""
"EVG-8917","Task","platform",1,"Fix windows file handling in tests","""Test failure: https://evergreen.mongodb.com/task/jasper_windows_test_jasper_1475c6ddedb0af97b9a57b1bed704da25ac5f3cc_20_02_09_19_20_08"""
"EVG-8640","New Feature","platform",2,"Fix timeout handling in cedar change point detector","""Sometimes our service times out and returns a 499 status code. This appears to not make it through to cedar, and an [error is generated|https://github.com/evergreen-ci/cedar/blob/master/perf/change_point_detector.go#L136]. Probably the fix consists of configuring the client timeout properly.    As a DAG engineer,  I'd like to fix whatever is going wrong, such that, it works.    AC:  * Retrying timeouts properly"""
"EVG-7363","New Feature","ui",1,"Full page loading screen","""Currently the full page loading screen is just the work """"LOADING..."""". We should get designs to show a loading spinner."""
"EVG-7362","Improvement","app",1,"Create alert for 30% of GitHub API limit","""We currently don't have good visibility into how much of our GitHub API limit we're using. As more projects enter Evergreen, we may get close to our limit and not realize it. We should make the log statement structured. (Currently it looks like """"message: Github API response: 200 OK. Rate limit: 4412/5000"""".) And we should create an alert for if we get below some threshold (1500?). Once that happens, we should begin planning our approach."""
"EVG-7360","Task","app",0,"Preserve reprovisioning state until host is reprovisioned","""Right now, the host allocator will clear the  reprovisioning state without checking if the host already needs reprovisioning."""
"EVG-7359","New Feature","ui",2,"Upgrade to Cypress 4.0","""Cypress is currently at 3.8.2 which has known issues running on Ubuntu 18.04. Upgrade Cypress to version 4.0 and then change the variant in Evergreen from Ubuntu 16.04 to 18.04. Cypress 4.0 fixes known bug in Ubuntu 1604."""
"EVG-8782","New Feature","platform",1,"Use new putunique API in cedar/amboy","""As a DAG,  I would like to use the new putunique API from amboy in cedar,  such that, we don't generate errors due to duplicate jobs being enqueued (these trigger alerts).    AC:  * Use new putunique API when enqueueing recalculate change points jobs."""
"EVG-7371","Bug","app",1,"Commit Queue strips windows line endings from patches","""If a patch is submitted with a windows line ending the extra \r is removed from the patch by git mailsplit. This causes 1) patches to not apply, and 2) lines to be committed without windows line endings."""
"EVG-7366","Bug","legacy-ui",1,"Setting a host to unexpirable panics",""""""
"EVG-7365","Bug","app",1,"Fix rsync test on Windows","""The rsync binary on Windows is the cygwin rsync binary, so it only accepts cygwin paths and not native Windows paths."""
"EVG-8615","New Feature","platform",1,"Handle inconsistent timestamp format from the evergreen api","""The evergreen API returns different timestamp format for the """"create_time"""" field. It sometimes includes milliseconds and sometimes does not. Which means that we frequently fail to parse the timestamp because we are getting an expected format. We need to be able to detect when the format is different and handle it appropriately.    ----    As an evergreen api user  I want the api client to be able to handle different date formats  So that I can handle when evergreen returns different date formats.    ----    AC:  * The api client can handle when evergreen returns date format without milliseconds as well as when it returns them with milliseconds."""
"EVG-7380","New Feature","ui",1,"Reusable typography components","""Each piece of text in the app should be able to be classified. For example, """"My Patches"""" on patches page, and display name on task page are both h1's. The task/test names in the table are the same. Instead of assigning font size to each typography element rendered, we should be able to render a typography element.    # Classify each piece of typography   # Make reusable typography components based on those classifications"""
"EVG-7379","Build Failure","app",2,"Failure: test-rest-client on Windows [Evergreen @ 7ec94b3e] (TestLogSenders)","""h2. [test-rest-client failed on Windows|https://evergreen.mongodb.com/task/evergreen_windows_test_rest_client_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0]  Host: [ec2-54-242-24-13.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-02e538b76ca87fa7b]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/7ec94b3eb3377a60aa93fffc9cf8feae8261670f]: Increase time until unresponsive agent monitor attempts to deploy (#3149) | 12 Feb 20 14:14 UTC  Evergreen Subscription: ; Evergreen Event:   *TestLogSenders* - [Logs|https://evergreen.mongodb.com/test_log/5e44093b306615219ac16c40] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_windows_test_rest_client_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50#TestLogSenders=fail]    [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_windows_test_rest_client_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0?type=T ]  """
"EVG-7378","Build Failure","app",1,"Failure: coverage on Coverage [Evergreen @ 7ec94b3e] (TestGetRevisionsSinceWithPaging)","""h2. [coverage failed on Coverage|https://evergreen.mongodb.com/task/evergreen_coverage_coverage_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0]  Host: [ec2-34-207-144-162.compute-1.amazonaws.com|https://evergreen.mongodb.com/host/i-0e949e59eb0cca13c]  Project: [Evergreen|https://evergreen.mongodb.com/waterfall/evergreen]  Commit: [diff|https://github.com/evergreen-ci/evergreen/commit/7ec94b3eb3377a60aa93fffc9cf8feae8261670f]: Increase time until unresponsive agent monitor attempts to deploy (#3149) | 12 Feb 20 14:14 UTC  Evergreen Subscription: ; Evergreen Event:   *TestGetRevisionsSinceWithPaging* - [Logs|https://evergreen.mongodb.com/test_log/5e440ac77742ae6aeb621482] | [History|https://evergreen.mongodb.com/task_history/evergreen/evergreen_coverage_coverage_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50#TestGetRevisionsSinceWithPaging=fail]    [Task Logs | https://evergreen.mongodb.com/task_log_raw/evergreen_coverage_coverage_7ec94b3eb3377a60aa93fffc9cf8feae8261670f_20_02_12_14_14_50/0?type=T ]  """
"EVG-7377","Improvement","app",1,"Check if agent monitor is still alive before attempting deploy","""Most agent monitor deploys that occur during app server deploys are not actually necessary, especially during high times of churn (i.e. daily app server deploys). The job should no-op if the agent monitor is still running in Jasper, and assume the agent will come up and contact the app server if given enough time."""
"EVG-7376","Bug","app",2,"Enterprise module fails to compile - manifest lost?","""Consider following 3 builds:    Base commit, Jan 31: https://evergreen.mongodb.com/version/sys_perf_23603867ca8e968453683a9dc55c72a32e3cb0b5  Patch 1, Jan 31: https://evergreen.mongodb.com/version/5e3435cbe3c33137bd061b9c  Patch 2, Feb 10: https://evergreen.mongodb.com/version/5e416147e3c331076ef691b7    Manifest shows following revisions for enterprise module:  Base: 4ef3662babc  Patch 1: 4ef3662babc  Patch 2: af509c51bc2373    Consequently, Patch 2 fails to compile."""
"EVG-7393","Improvement","ui",2,"Task metadata panel","""render task metadata side panel. confirm the displayed in the screen shot is from a finalized design """
"EVG-7390","Improvement","ui",2,"Files table in tasks page","""create a table with filter support !Screen Shot 2020-02-13 at 4.46.56 PM.png!"""
"EVG-7389","Improvement","ui",2,"render task logs in task page ","""Render logs under the logs tab like so:"""
"EVG-7388","Improvement","ui",0,"Query for task logs","""GQL Query for task logs in Task Page     """
"EVG-7387","Bug","app",1,"Evergreen fetch for Windows spawn host uses incorrect path","""The working directory needs to be a native Windows path in order to open the file, but it's actually specified as a cygwin-style (i.e. Unix) directory path. This has not been a problem up until now because almost all files go into {{/data}}, which is fine because {{/data}} can be found at the root of the C drive as well.         This only affects legacy SSH hosts."""
"EVG-7385","New Feature","app",1,"Add Validation to attach_artifact","""If a user attaches an artifact through the attach_artifact command and supplies their own link to a file, as opposed to doing it through the s3_put command, they should not be able to set Visibility to """"signed"""".    The motivation:   When a user attaches a file that way, it can be a link to GitHub, a wiki page, or any arbitrary link. Since it's not a url that we generated and uploaded to s3, we cannot sign it.     Even if the link they are provided IS an s3 link, we still can't sign it, unless we expand the params to also take in the aws key and secret that they used to upload the file with. However, in that case, if that is the functionality that they are looking for, it would make more sense for them to upload it using the s3_put command than to hack attach_artifacts to behave like s3_put with visibility set to signed. """
"EVG-8944","Task","platform",0,"Run ssh client with non-interactive flags","""Since the SSH client runs without user input, it has to disable pty allocation and logs."""
"EVG-7397","Bug","app",1,"Version build errors are not exposed in API","""If I go to  https://evergreen.mongodb.com/version/mongoid_7.0.0_53e15f580edc4f281b826327ecbaff8e10d8c9a6 I see this error message:        This information appears to be written into the page html, as follows:        When I retrieve this version via the API, it has no error information:          Is there another place in API where this error information is exposed? If not can it be added to the API please?"""
"EVG-7396","Task","app",0,"Move local SSH key update job population","""It should go in `startSystemCronJobs`."""
"EVG-7400","Bug","app",2,"Empty patches error in git.getproject","""The `git.getproject` command is trying to apply empty patches."""
"EVG-8361","Bug","platform",2,"Handle inconsistent timestamps and missing manifests in cronjobs/process_task_mapping_work_items.sh script","""I was running the cronjobs/process_task_mapping_work_items.sh scripts today and noticed some new errors. Evergreen has changed their create_time format (addressed in MAKE-1156) so we need to use a more updated version of evergreen.py. Additionally, create_time is now stored in a format that is UTC offset-aware. Finally, evergreen versions like [this one|[https://evergreen.mongodb.com/rest/v2/versions/mongodb_mongo_master_f31bc89f66632b2d521be2d076dc23f94ff663eb]] raise an [error when getting manifest|[https://evergreen.mongodb.com/plugin/manifest/get/mongodb-mongo-master/f31bc89f66632b2d521be2d076dc23f94ff663eb]], so we need to handle this exception better.    As a mongoDB engineer, I should be able to add my project to the selected-tests task mappings queue, and know that it will process 6 months of data without erroring, so that I have task mappings to work with.    AC:  * Running the following steps does not error:  """
"EVG-7408","Bug","app",2,"Task is blocked on duplicate dependencies","""A task was created with a duplicated dependency. When the depended-on task failed the three copies of the dependency were all set unattainable in the depending task. When the depended-on task was restarted and passed only the first instance of the dependency was set unattainable false in the depending task, so it's still blocked and won't run.    Arguably the main issue is the duplicated dependency."""
"EVG-7415","Improvement","ui",2,"GQL Query for patch code changes","""query for code changes by patch id """
"EVG-7413","Improvement","ui",2,"Filter test table based on test name input and status dropdown","""taskTests query already supports these things, these are Spruce changes only.    should store these options as query params so we can link to the table state directly"""
"EVG-7412","Improvement","app",1,"Set retry limit on background reauthorization","""If it fails after some number of attempts, it should log the user out (i.e. clear the login cache)."""
"EVG-9254","Task","platform",1,"Make launch daemons with user security session","""[This StackOverflow question|https://stackoverflow.com/questions/47582989/launchd-not-able-to-access-mac-os-keychains] (also [this one|https://stackoverflow.com/questions/6827874/missing-certificates-and-keys-in-the-keychain-while-using-jenkins-hudson-as-cont/9482707#9482707]) says that we need to use {{SessionCreate}} in order to have access to the user login keychain (i.e. {{~/Library/Keychains/login.keychain-db}})."""
"EVG-8988","Task","platform",2,"Run test patches using barque","""This will iron out any bugs in the service in preparation for using it for releases."""
"EVG-8720","New Feature","platform",0,"Create manager that allows multiple auth methods","""We should be able to combine auth methods into a single user manager. Multiple auth only applies to getting users, not creating new users (to avoid possibly creating multiple users)."""
"EVG-7432","New Feature","ui",2,"Enable CORS on evg auth endpoints","""The auth endpoints are the only REST endpoints that Spruce talks to (aside from the gql endpoint). These endpoints will need to allow CORS from spruce.mongodb.com to work in staging and in production.     When I first tried working on this, I ran into issues with auth not working as expected anymore. I was able to login and logout, however the user cookie was not being removed on logout. This caused tests to fail."""
"EVG-7429","Improvement","app",1,"Virtual workstations should be unexpirable by default","""If the user has unexpirable hosts remaining a virtual workstation should be set to unexpirable on creation."""
"EVG-7428","Build Failure","app",2,"Investigate slow task performance on macos with new provisioning","""Example task failure: https://evergreen.mongodb.com/task/mongo_c_driver_darwin_debug_compile_compression_zlib_0bcde05863e482aa08adf29a9a1b98fd533f8942_20_02_19_19_56_09"""
"EVG-7426","Task","app",2,"Add icecream scheduler domain name to distro settings and add route to edit config file","""We have to do this so that icecream compile nodes can get a config with the correct domain name to connect to the load balancer."""
"EVG-7424","New Feature","app",2,"Upload task working directory to s3","""The agent should use the command to save a directory using pail to upload the task's working directory."""
"EVG-7423","New Feature","app",2,"Add command to restore directory using pail","""Once the agent has uploaded the working directory to s3,  we should be able to retrieve it by its task/execution."""
"EVG-7422","Improvement","app",2,"Allow task group setup to be pulled from s3","""Once the setup has run for one task group, it should be uploaded to s3 so other hosts can pull the setup without having to run through the entire setup."""
"EVG-9239","Task","platform",0,"Convert usernames when making requests against LDAP","""We have to truncate usernames to be firstname.lastname for compatibility with the existing evergreen users. As the inverse operation, we have to also reconvert them back to their actual usernames when making requests to LDAP Okta (so they're in firstname.lastname@email form)."""
"EVG-7442","Improvement","app",2,"Attempt to give task directory write permissions before removing","""On static hosts, many task directories are not being cleaned up because files/directories in tasks directories are set to read-only permissions. This is bad, because it's currently filling up the disk space on the mac hosts. When the agent starts up, it tries to clean up the whole directory since it has {{--cleanup}}, which can spend a substantial amount of time doing wasteful work (for example, on the latest deploy, a macos-1012 host took more than 15 minutes before it started attempting because it had 32GB of uncleaned task directories that it tried removing). During startup, there is no heartbeat to the app server during this time to tell it that the agent is alive, so after a long period of no communication, the app server might try to deploy again on top of the agent, which is actually alive but stuck in cleanup mode."""
"EVG-7439","Improvement","app",1,"Require rootdir for all Windows provisioning types","""Currently it's not required on legacy provisioned Windows hosts. However, it would greatly reduce the amount of complexity in specifying Windows if we used native paths to files more consistently instead of using Unix-style paths and paths relative to HOME in some (but not all) of the relevant places (excluding binaries, which must be invoked with Unix-style paths)."""
"EVG-7438","Bug","app",1,"Commit queue misses a nil patch","""If the commit queue tries to process a non-existent patch it will panic instead of dequeueing.    We should catch the [nil patch case|https://github.com/evergreen-ci/evergreen/blob/a636d364299d42dd6a710a4f4ece931ea04d50e8/units/commit_queue.go#L273] and probably {code:go}defer dequeue(){code}   too."""
"EVG-7437","Improvement","app",2,"Add distro UI option to reprovision Jasper on all hosts on save","""Jasper is automatically restarted when all hosts need new credentials. However, there should be an option to mark all hosts in the distro as needing Jasper to be reprovisioned (e.g. for critical Jasper service updates). The Jasper restart job will have to get the latest curator binary for this. This restart should still have lower priority than the provisioning type conversion jobs.    Also, maybe it would be nice to have a restart button on the host page so we don't have to roll over the entire distro host fleet."""
"EVG-9179","Task","platform",1,"Run Jasper without resource throttling","""According to [this post|https://apple.stackexchange.com/questions/322557/why-is-an-application-running-so-slowly-when-started-with-launchctl], one possible source of slowness when Jasper processes are run is that they're being throttled as launch daemons is launchd thinks they're background processes. We should try running with {{ProcessType}} set to {{Interactive}} to see if performance improves."""
"EVG-9148","Task","platform",0,"Remove GET route for login","""This should be done after clients have had time to update."""
"EVG-9135","Task","platform",2,"Create API user manager from basic user manager","""We need a user manager that can auth in service users to make API requests, but not log into the UI with them. The naive user manager almost does this, but not quite.    The source of truth for the special """"service"""" manager should be the pre-populated list of users from settings, not the database.  Right now, the naive manager takes some info from the list but also logs in users who exist in the users collection. Essentially, we should have the same manager but only with the ability to use the API (using the pre-populated api key from the settings)."""
"EVG-9087","Task","platform",0,"POST to login instead of GET","""Removing the GET route in cedar will be future work once clients have had sufficient time to update."""
"EVG-7445","New Feature","app",2,"Update the visibility parameter on the wiki to include the signed option","""Update the wiki.      [https://github.com/evergreen-ci/evergreen/wiki/Project-Commands#s3-put |https://github.com/evergreen-ci/evergreen/wiki/Project-Commands#s3-put]         Change from:     To:     Since I would be making this change directly in the UI (as opposed to with a PR), please approve here. I'm therefore changing the status of this ticket to """"in code review"""", even though there is not code.     """
"EVG-7444","Bug","legacy-ui",0,"Fix errors on spawn host page","""There's a lot of errors saying {{$scope.curHostData}} is undefined."""
"EVG-7443","Improvement","app",0,"Ensure tasks cannot be put in multiple task queues","""Scheduled tasks should not be able to go into multiple task queues. Otherwise, the scheduler may over-allocate hosts (which it bases off of the primary task queue lengths)."""
"EVG-8780","New Feature","platform",1,"Add replicaCount, liveness and readiness Probes to selected-tests","""I realized recently we are missing some Kanopy configuration elements in the selected-tests service.    As a DAG engineer, I should specify replicaCount to be 2 (it is currently 1), so that the selected-tests service is available during deploys.  As a DAG engineer, I should also configure [liveness and readiness probes|https://github.com/10gen/kanopy-docs/blob/29771cc7a3c2cf35e6af2a99f67cab3c8c346ef3/docs/application_configuration.md#configure-k8s-liveness-and-readiness-probes] so that the scheduler is able to understand when new pods are ready to service requests, reducing downtime during deploys.    AC:  * replicaCount is set to 2 in prod.yml and staging.yml  * liveness and readiness probes are configured  """
"EVG-7462","Improvement","app",2,"Add priority to notifications","""We should add a priority field to notifications and sort on it when we pull the next batch of unprocessed notifications. This will help address commit queue notifications not being processed."""
"EVG-7458","Improvement","app",2,"Replace DescribeInstances with instance metadata","""We can save on DescribeInstances calls (and avoid API limits) by getting the data about the instance from [instance metadata|https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html] from within the agent and posting it back to Evergreen. This would also effectively remove the need for the setup host job to run for user data."""
"EVG-7455","Improvement","app",0,"Prioritize commit queue patches over normal patches","""Commit queue patches are the most important to schedule quickly and shouldn't block behind ordinary user patch builds."""
"EVG-7453","Improvement","perf-tools",2,"Render placeholder cell filter values when the cell is empty (and the filter uses a default value).","""When using the Perf Baron pages, some of the filter cells have defaults when they are empty (e.g.the create time defaults to 2 weeks ago).      When a value is defaulted we should set a placeholder so that it is obvious what filter is being used.          """
"EVG-7451","New Feature","app",1,"Include log links for previous executions","""We got a BFG (https://jira.mongodb.org/browse/BFG-480805) for a failure of a task that has 4 executions. The BFG was specifically related to the 3rd execution. When we query the API to get the logs for that execution, they are all null (https://evergreen.mongodb.com/rest/v2/tasks/mongodb_mongo_master_enterprise_ubuntu1804_arm64_sharding_3_enterprise_ubuntu1804_arm64_f83f9dcc22156cdf3c3e16a040914806e2e17cf7_20_02_25_04_29_47?fetch_all_executions=1).    It looks like all previous executions have null for the log links. Would it be possible to include the log link in the API?"""
"EVG-7473","Improvement","app",1,"Race condition setting commit queue to processing","""From this thread: [https://mongodb.slack.com/archives/C0V896UV8/p1582837378072500]    Probably multiple amboy jobs running is what's hitting this race, but we should check that processing is what we expect it to be before setting it and dequeueing/processing items."""
"EVG-7468","New Feature","ui",1,"Add baseVersionId to Patch schema type","""There is a bug in the new ui on the patch field: the base commit link in the patch metadata card links to `evergreen.com/version/githash`. It should be `evergreen.com/version/baseVersionId`    Change the resolved value of the base commit to be correct.    Get the correct base version id by doing `   baseVersion, err := model.VersionFindOne(model.VersionBaseVersionFromPatch(version.Identifier, version.Revision))`"""
"EVG-7467","Improvement","app",2,"Allow copy_redacted_variables to also copy all variables","""maybe turn it into copy_variables and have an option to """"include_redacted""""    the include redacted option will have the same limitation of needing to be admin of the projects etc.    we want to be able to copy all params from one project to another.  we take the following steps:  1. get both projects  2. delete variables that are only in the target project  3. call the update project with the json object that is source_project[""""variables""""][""""vars""""]  4. call the copy_redacted_variables api.    it would be nicer to just call  /project/source/copy_variables/target?copy_redacted=true    it would also be nice if in dry run mode it will return a json response that, if ran - would in theory do the copy  this way we can dry run - save the result JSON. go over it and see it does what we expect it to do, and then just run update_project with the json file we have.    (I realize that since redacted variables are involved, this is maybe not possible)"""
"EVG-7465","Improvement","app",2,"Commit queue should refuse to enqueue an empty patch","""If a user tries to add an empty commit queue item to a queue (such as if they pause the item and then enqueue it later without adding any modules) they should get an error."""
"EVG-7464","Bug","app",2,"Project Triggers are using the wrong commit","""When a build is triggered from a different project, the commit for the trigger is not used. Instead, an old commit, likely the one that's coupled to the latest commit of the repo for the current project is used. See [this link|https://evergreen.mongodb.com/version/sys_perf_3b279bd75f946b46ad62273a66c3e9d0d6826cc0_81c90ce411305bde898e0a69d2a6479d] and the attached screenshot for as an example.    I'm marking this ticket as P2 since it seems to affect the behavior of project triggers across the board. Feel free to reprioritize or ping me if this is a project-specific issue."""
"EVG-7475","Improvement","app",1,"In regression by test trigger, fall back to task failure if all tests pass","""similar to if there are no tests"""
"EVG-7488","Improvement","ui",2,"Fix flaky auth cypress test","""the issue may be that the local evergreen server is not ready when the auth request is made.     example test: [https://dashboard.cypress.io/projects/m45k1x/runs/210/specs]"""
"EVG-7487","Bug","legacy-ui",1,"lobster UI should provide access to unmodified json","""There’s no way in the UI to get at the original lines emitted by a test. Need an escape hatch.    The raw button gives me the whole log as text with no html markup at all. I can’t see or select line numbers or search it. So essentially all lobster features are unavailable if I want to see the json lines as they were emitted by the unit test."""
"EVG-9303","Task","platform",2,"Evergreen depends on all users to be returned as DBUsers","""We have to add database awareness to the basic user manager because the evergreen middleware won't allow gimlet to return any user except a DBUser. This can be a new wrapper manager with a caching layer that returns only the gimlet.Users that it receives when created."""
"EVG-8479","Bug","platform",1,"setup_ssh_keys.sh shouldn't overwrite keyfiles","""When setup_ssh_keys.sh is run it writes the contents of GITHUB_PRIVATE_KEY and $GITHUB_PUBLIC_KEY to """"~/.ssh/id_rsa"""" and """"~/.ssh/id_rsa.pub"""".    If this script is run in a container then this is fine but if it is run locally, it could potentially cause a user to lose important key files.    The script should either use different file names (maybe ~/.ssh/selected-tests, ~/.ssh/selected-tests.pub) or it should not overrwrite existing files.  """
"EVG-7493","Task","app",2,"Very slow aggregations on the testresults collection","""I noticed the read tickets available were about 20 tickets lower than writes. This appears to very slow aggregations on the testresults collection. A    lthough these are not a problem at the moment, if the number of these queries grow, they could potentially slow other queries in the system. We should find out the source of these queries and remove or improve them. I've attached a screenshot of an example query."""
"EVG-7491","New Feature","ui",2,"Patch tasks table: loading & error states","""* ANTD skeleton is displayed when tasks are loading   * If there is an error then error message is shown"""
"EVG-7490","New Feature","ui",2,"Patch tasks table: fetch more tasks when scrolling table","""* When I scroll down the table, more tests are fetched   * If there are no more tests to fetch then the table stops fetching"""
"EVG-7489","New Feature","ui",2,"Patch tasks table: fetch new tasks when url params change","""* Fetch with the sortBy and sortDir specified in url   * page param is reset to 0 when sorting & filtering changes"""
"EVG-7500","Bug","app",2,"PR commit-queue is setting author to ""evrg-bot-webhook""","""The selected-tests project has been using commit-queue for a while, but yesterday the author for commits to master started showing up as """"evrg-bot-webhook"""": https://github.com/mongodb/selected-tests/commits/master.    The same thing is happening on https://github.com/10gen/build-baron-tools/commits/master.    Previously, commits to master made by the PR commit queue set the author of the commit to the author of the PR that was being merged. This made it easier for me to track when my PRs had been merged."""
"EVG-7496","Bug","app",2,"Fix build cache blocked update for display tasks ","""[b67f30|https://github.com/evergreen-ci/evergreen/commit/b67f3051319873c983583fed8e3b521884599748] updates blocked dependencies in the build cache. It doesn't take into account that execution tasks aren't part of the build log, and the update fails. MarkEnd returns [here|https://github.com/evergreen-ci/evergreen/blob/55a8bc51f4ceb678a7bf60d73197489529bc51d8/model/task_lifecycle.go#L440] and doesn't complete so the [build cache update for status|https://github.com/evergreen-ci/evergreen/blob/55a8bc51f4ceb678a7bf60d73197489529bc51d8/model/task_lifecycle.go#L451] doesn't run."""
"EVG-8514","Bug","platform",2,"Loggers seem to hang in tests","""Example: https://evergreen.mongodb.com/task/jasper_windows_test_jasper_patch_13f1b54d555f3b8a04fb9efe7671443fb827bec6_5e629dd47742ae721bc237ea_20_03_06_19_00_37/1"""
"EVG-7533","Improvement","ui",1,"Task page: Refetch dependsOn field","""should refetch after a certain so the user is up to date without refreshing the page"""
"EVG-7532","Improvement","ui",2,"Tasks page: Render action buttons in top right of page","""attach on click to mutations. set priority should accept an input. """
"EVG-7531","Improvement","ui",2,"Task page: spawnHostLink field in Task GQL type","""link to spawn host page, button lives in medadata card"""
"EVG-7530","New Feature","ui",2,"Task page: dependency resolver for GQL Task type","""task gql type should have a dependency array where each item has the tasks display name, build variant and if it must fail or must finish"""
"EVG-7529","New Feature","ui",1,"Include cookie in cy.visit header","""Every call to cy.visit causes the auth/cookie to be cleared. Include a cookie in the request so that we do not have to login after every call to cy.visit. """
"EVG-7528","New Feature","ui",2,"Patch page: filter by base status - fetch filtered tasks","""When url param changes, fetch new tasks with new params from url"""
"EVG-7527","New Feature","ui",0,"Patch page: filter by base status - update ""baseStatus"" url param","""When parent of status group is clicked, include all nested statuses in url params"""
"EVG-7526","New Feature","ui",0,"Patch page: filter by base status - dropdown menu","""* Clicking parent of nested statuses selects/unselects all status in that group   * Store static list of statuses on the client"""
"EVG-7525","New Feature","ui",2,"Patch page: filter by status - fetch filtered tasks","""When """"statuses"""" url changes, fetch new tasks with new params from url"""
"EVG-7524","New Feature","ui",1,"Patch page: filter by status - clicking on status updates ""statuses"" url param","""When parent of status group is clicked, include all nested statuses in url params"""
"EVG-7523","New Feature","ui",1,"Patch page: filter by status - dropdown menu","""* *Dropdown checkbox menu with all statuses (1)*   * Clicking parent of nested statuses selects/unselects all status in that group   * Store static list of statuses on the client"""
"EVG-7522","New Feature","ui",1,"Patch page: add taskName param to gql resolver","""In db function, apply match with variant param value"""
"EVG-7521","New Feature","ui",1,"Patch page: ""search by task name"" fetch new tasks","""* When url search param changes, fetch new tasks based on search param value    * Fetch tasks filtered by task input"""
"EVG-7520","New Feature","ui",1,"Patch page: ""search by task name"" input field","""On change it updates the url using a debounce"""
"EVG-7519","New Feature","ui",1,"Patch page: add variant param to gql resolver","""* Add variant param to patchTasks resolver   * In db function, apply match with variant param value"""
"EVG-7518","New Feature","ui",1,"Patch page: ""search by variant name"" fetch new tasks","""# When url search param changes, fetch new tasks based on search param value   # Cancel old requests that have not finished when a new one is made for search"""
"EVG-7517","New Feature","ui",1,"Patch page: ""search by variant name"" input field","""On change it updates the url using a debounce"""
"EVG-7516","New Feature","ui",1,"Patch page: show task count","""On the /patch route, show the task count (image attached that corresponds to mockups)    Designs: [https://mongodb.invisionapp.com/share/S7W848CN3GC#/screens/408295791]    A field on the Patch type exists called """"taskCount"""" - it represents the total number of tasks of a patch.    Add this field to the Patch query on the /patch route - this value represents the Y in """"X/Y tasks""""    The X in """"X/Y tasks"""" is determined by getting the length value of the tasks array returned from the patchTasks query"""
"EVG-7514","New Feature","ui",2,"Patch page: gql query for patch build variants","""Add build variants field to Patch type    Build variant type:   * Variant name   * Tasks     * Status   * Name   * ID"""
"EVG-7513","New Feature","ui",2,"Patch page: build variants card","""* Tasks for each build variant are displayed as cube   * TaskCube component   * Hovering task shows tooltip with task name   * Clicking task goes to task page"""
"EVG-7512","New Feature","ui",1,"Patch page: add “commitQueuePosition” field to the patch schema type ","""How to get commit queue position: [https://github.com/evergreen-ci/evergreen/pull/3453/files#diff-17e8f871e4f3e95fbfafe8e4ccecf48aL76]"""
"EVG-7511","New Feature","ui",1,"Patch page: add commit queue position to metadata","""Query it in GET_PATCH     Render it"""
"EVG-8945","Task","platform",1,"Allow bypassing username/password login and set API keys directly","""In the migration from LDAP to Okta, there will no longer be service user support. Therefore, we have to use the users directly from the database without authenticating them against the Okta backend (so they auth into the API using an API key instead of a password to auth against LDAP)."""
"EVG-7557","Improvement","ui",1,"Task page: Add count field from taskFiles query","""display the number of files on the files tab"""
"EVG-7556","Improvement","ui",1,"Task page: Display test counts for test table","""display failed test count in test table tab    display filteredTestCount/totalTestCount above table"""
"EVG-7555","New Feature","ui",2,"My patches: gql mutation to reconfigure patch","""One of the options from the dropdown menu of the PatchCard is to reconfigure patch. This means changing the variants and tasks that are ran fro the patch. The mutation should take an array of tasks and an array of variants and update the patch with those params. This mutation does not schedule the patch. It only updates the DB model. """
"EVG-7554","New Feature","ui",2,"My patches: ""Reconfigure tasks/variants"" modal","""When """"Reconfigure tasks/variants"""" is selected from PatchCard dropdown menu, show modal for reconfiguring patch. Designs coming"""
"EVG-7552","New Feature","ui",2,"My patches: list of patch cards","""Renders a paginated list of PatchCard component"""
"EVG-7551","New Feature","ui",2,"My patches: PatchCard component","""DOES NOT INCLUDE DROPDOWN (aka the menu elipsis with patch actions)   * Polls server for patch status and patch tasks   * Stop polling when component unmount   * Use useEffect to initialize polling and to unsubscribe     * Updates patch status and task statuses in real time"""
"EVG-7549","New Feature","ui",2,"My patches: commit queue checkbox","""* Render it   * Checked by default       * onChange, update the url “commitQueue” param   * When url “commitQueue” param changes, fetch new patches"""
"EVG-7548","New Feature","ui",1,"My patches: dropdown menu of statuses","""* Render it   * onChange, update “status” url param   * When url “status” param changes, fetch new patches"""
"EVG-7547","New Feature","ui",1,"My patches: search input for patch name","""* Render it   * onChange, update “name” url param   * When url “name” param changes, fetch new patches"""
"EVG-7546","New Feature","ui",0,"My patches: render header","""Render the """"My Patches"""" header title"""
"EVG-7545","Improvement","app",1,"Place an Evergreen config file on virtual workstations","""Put the user's credentials in ~/.evergreen.yml on virtual workstation spawnhosts"""
"EVG-7541","Bug","app",0,"Unattached volumes disappear","""If a volume is created with the [ec2Manager|https://github.com/evergreen-ci/evergreen/blob/c905b1bea0fddfeab8fa10ad0f40a8db8fdc349f/cloud/ec2.go#L1181] and not attached to a host it disappears from the AWS account but is still in Evergreen's db."""
"EVG-7537","Improvement","ui",0,"TestsTable should be completely tested in Cypress","""TestsTable is partly tested in cypress and jest. We should rewrite the jest tests in cypress for consistency and also because cypress tests are much easier to understand when something breaks"""
"EVG-7562","Improvement","ui",0,"Add jiraLink field to TaskEventLogData gql type","""this is so we can link to the Jira issue in the event logs in spruce"""
"EVG-7558","Bug","ui",2,"Lobster's log substitution of large numbers can lose precision","""BSON has a NumberLong type, a 64-bit integer. The lobster log conversion presumably treats MongoDBs attribute map as JSON which likely parses all numbers into a floating point value. Large 64-bit numbers can then lose precision."""
"EVG-8918","Task","platform",0,"Sanity check for empty user","""There are many noisy logs for requests being made to evergreen through the user middleware that don't have a user in the headers. The header check in user middleware should check that both the API key and the name are set before trying to get it from the user manager."""
"EVG-8893","Task","platform",0,"Check for potentially multiple cookies with the same name","""Staging and prod can be confused because it's not clear which cookie the browser will present first to the request. """
"EVG-8651","New Feature","platform",1,"Add get_version to Build","""As a DAG engineer,  I'd like to add get_version method to Build objects,  such that, I can get a build's version using evergreen.py.    AC:  * get_version added to Build class."""
